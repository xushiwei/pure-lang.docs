This is pure-sockets.info, produced by makeinfo version 4.13 from
pure-sockets.texi.

Generated by Sphinx

INFO-DIR-SECTION Pure Language and Library Documentation
START-INFO-DIR-ENTRY
* pure-sockets: (pure-sockets.info).    pure-sockets: Pure Sockets Interface
END-INFO-DIR-ENTRY


File: pure-sockets.info,  Node: Top,  Next: Installation,  Up: (dir)

pure-sockets
************

  Version 0.6, March 22, 2012

  Albert Gr√§f <<Dr.Graef@t-online.de>>

  This is an interface to the Berkeley socket functions. It provides
most of the core functionality, so you can create sockets for both
stream and datagram based protocols and use these to transmit messages.
Unix-style file sockets are also available if the host system supports
them.

* Menu:

* Installation::
* Usage::
* Example::
* Index::

 --- The Detailed Node Listing ---

Usage

* Creating and Inspecting Socket Addresses::
* Creating and Closing Sockets::
* Establishing Connections::
* Socket I/O::
* Socket Information::


File: pure-sockets.info,  Node: Installation,  Next: Usage,  Prev: Top,  Up: Top

1 Installation
**************

Get the latest source from
<http://pure-lang.googlecode.com/files/pure-sockets-0.6.tar.gz>.

  Run `make' to compile the module and `sudo make install' to install
it in the Pure library directory. To uninstall the module, use `sudo
make uninstall'. There are a number of other targets (mostly for
maintainers), please see the Makefile for details.

  `make' tries to guess your Pure installation directory and
platform-specific setup. If it gets this wrong, you can set some
variables manually. In particular, `make install prefix=/usr' sets the
installation prefix, and `make PIC=-fPIC' or some similar flag might be
needed for compilation on 64 bit systems. You can also set custom
compilation options with the CFLAGS variable, e.g.: `make CFLAGS=-O3'.
Again, please see the Makefile for details.


File: pure-sockets.info,  Node: Usage,  Next: Example,  Prev: Installation,  Up: Top

2 Usage
*******

To use the operations of this module, put the following in your Pure
script:

    using sockets;

With the *note sockets: 0. module loaded, all the standard socket
functions are available and work pretty much like in C. The only real
difference is that, for convenience, functions taking socket addresses
as parameters (`struct_sockaddr*' pointers in Pure), are called without
the `addrlen' parameter; the size of the socket address structure will
be inferred automatically and passed to the underlying C functions.
Also, there are some convenience functions which act as wrappers around
`getaddrinfo' and `getnameinfo' to create socket addresses from
symbolic information (hostname or ip, port names or numbers) and return
information about existing address pointers, see *note Creating and
Inspecting Socket Addresses: 4. below.

  Below is a list of the provided functions. Please see the
corresponding manual pages for details, and check the Pure scripts in
the examples subdirectory for some examples.

* Menu:

* Creating and Inspecting Socket Addresses::
* Creating and Closing Sockets::
* Establishing Connections::
* Socket I/O::
* Socket Information::


File: pure-sockets.info,  Node: Creating and Inspecting Socket Addresses,  Next: Creating and Closing Sockets,  Up: Usage

2.1 Creating and Inspecting Socket Addresses
============================================

These functions are Pure-specific. The created socket addresses are
malloc'ed and free themselves automatically when garbage-collected.

 -- Function: sockaddr ()
     Create a pointer to an empty socket address suitable to hold the
     socket address result of routines like *note accept: 6, *note
     getsockname: 7, *note recvfrom: 8, etc. which return a socket
     address.

 -- Function: sockaddr ([int family,] char *path)
     Create a local (a.k.a. file) socket address for the given
     pathname. The `family' parameter, if specified, must be `AF_UNIX'
     here. Please note that `AF_UNIX' is not supported on all
     platforms. You can check for this by testing the `HAVE_AF_UNIX'
     constant, which is a truth value specifying whether `AF_UNIX' is
     available on your system.

 -- Function: sockaddr ([int family,] char *host, char *port)
 -- Function: sockaddr ([int family,] char *host, int port)
     This uses `getaddrinfo' to retrieve an `AF_INET' or `AF_INET6'
     address for the given hostname (or numeric IP address in string
     form) and port (specified either as an int or a string). If
     `family' is omitted, it defaults to `AF_UNSPEC' which matches both
     `AF_INET' and `AF_INET6' addresses.

 -- Function: sockaddrs ([int family,] char *host, char *port)
 -- Function: sockaddrs ([int family,] char *host, int port)
     This works like *note sockaddr: 5. above, but returns a list with
     _all_ matching addresses.

 -- Function: sockaddr_family addr
     Returns the address family of the given address.

 -- Function: sockaddr_path addr
     Returns the pathname for `AF_UNIX' addresses.

 -- Function: sockaddr_hostname addr
     Returns the hostname if available, the IP address otherwise.

 -- Function: sockaddr_ip addr
     Returns the IP address.

 -- Function: sockaddr_service addr
     Returns the service (a.k.a. port) name.

 -- Function: sockaddr_port addr
     Returns the port number.

 -- Function: sockaddr_info addr
     Returns a readable description of a socket address, as a
     `(family,hostname,port)' tuple. You should be able to pass this
     into *note sockaddr: 5. again to get the original address.


File: pure-sockets.info,  Node: Creating and Closing Sockets,  Next: Establishing Connections,  Prev: Creating and Inspecting Socket Addresses,  Up: Usage

2.2 Creating and Closing Sockets
================================

 -- Function: socket domain type protocol
     Creates a socket for the given protocol family (`AF_UNIX',
     `AF_INET' or `AF_INET6'), socket type (`SOCK_STREAM',
     `SOCK_DGRAM', etc.) and protocol. Note that on Linux we also
     support the `SOCK_NONBLOCK' (non-blocking) and `SOCK_CLOEXEC'
     (close-on-exec) flags which can be or'ed with the socket type to
     get sockets with the corresponding features. The protocol number
     is usually 0, denoting the default protocol, but it can also be
     any of the prescribed `IPPROTO' constants (a few common ones are
     predefined by this module, try `show -g IPPROTO_*' for a list of
     those).

 -- Function: socketpair domain type protocol sv
     Create a pair of sockets. The descriptors are returned in the
     integer vector `sv' passed in the last argument.

 -- Function: shutdown fd how
     Perform shutdown on a socket. The second argument should be one of
     `SHUT_RD', `SHUT_WR' and `SHUT_RDWR'.

 -- Function: closesocket fd
     This is provided for Windows compatibility. On POSIX systems this
     is just `close'.


File: pure-sockets.info,  Node: Establishing Connections,  Next: Socket I/O,  Prev: Creating and Closing Sockets,  Up: Usage

2.3 Establishing Connections
============================

 -- Function: accept sockfd addr

 -- Function: bind sockfd addr

 -- Function: connect sockfd addr

 -- Function: listen sockfd backlog


File: pure-sockets.info,  Node: Socket I/O,  Next: Socket Information,  Prev: Establishing Connections,  Up: Usage

2.4 Socket I/O
==============

 -- Function: recv fd buf len flags

 -- Function: send fd buf len flags

 -- Function: recvfrom fd buf len flags addr

 -- Function: sendto fd buf len flags addr

  The usual *note send: 1c./*note recv: 1b. flags specified by POSIX
(`MSG_EOR', `MSG_OOB', `MSG_PEEK', `MSG_WAITALL') are provided. On
Linux we also support `MSG_DONTWAIT'. Note that on POSIX systems you
can also just `fdopen' the socket descriptor and use the standard file
I/O operations from the `system' module instead.


File: pure-sockets.info,  Node: Socket Information,  Prev: Socket I/O,  Up: Usage

2.5 Socket Information
======================

 -- Function: getsockname fd addr

 -- Function: getpeername fd addr

 -- Function: getsockopt fd level name val len

 -- Function: setsockopt fd level name val len

  For *note getsockopt: 20. and *note setsockopt: 21, currently only the
`SOL_SOCKET' level is defined (`level' argument) along with the
available POSIX socket options (`name' argument). Try `show -g SO_*' to
get a list of those. Also note that for most socket level options the
`val' argument is actually an `int*', so you can pass a Pure int vector
(with `len = SIZEOF_INT') for that parameter.


File: pure-sockets.info,  Node: Example,  Next: Index,  Prev: Usage,  Up: Top

3 Example
*********

Here is a fairly minimal example using Unix stream sockets. To keep
things simple, this does no error checking whatsoever and just keeps
sending strings back and forth. More elaborate examples can be found in
the examples directory in the sources.

    using sockets, system;

    const path = "server_socket";
    extern int unlink(char *name);

    server = loop with
      loop = loop if ~null s && ~response fp s when
        // Connect to a client.
        cfd = accept fd $ sockaddr ();
        // Open the client socket as a FILE* and read a request.
        fp = fdopen cfd "r+"; s = fgets fp;
      end;
      loop = puts "server is exiting" $$ closesocket fd $$
             unlink path $$ () otherwise;
      response fp s::string = s=="quit\n" when
        // Process the request. (Here we just print the received
        // message and echo it back to the client.)
        printf "server> %s" s;
        fputs s fp;
      end;
    end when
      // Create the server socket and start listening.
      unlink path;
      fd = socket AF_UNIX SOCK_STREAM 0;
      bind fd (sockaddr path); listen fd 5;
      printf "server listening at '%s'\n" path;
    end;

    client = loop with
      // Keep reading requests from stdin.
      loop = loop if ~null s && ~request s when
        fputs "client> " stdout; s = fgets stdin;
      end;
      loop = puts "client is exiting" $$ () otherwise;
      request s::string = s=="quit\n" when
        fd = socket AF_UNIX SOCK_STREAM 0;
        connect fd (sockaddr path);
        // Send the request to the server.
        fp = fdopen fd "r+"; fputs s fp;
        // Get the reply.
        s = fgets fp;
      end;
    end;

To use this example, run the `server' function in one instance of the
Pure interpreter and the `client' function in another. Enter a line
when the client prompts you for input; it will be printed by the
server. Behind the scenes, the server also sends the line back to the
client. After receiving the reply, the client prompts for the next
input line. Entering end-of-file at the client prompt terminates the
client but keeps the server running, so that you can start another
client and reconnect to the server. Entering just `quit' in the client
terminates both server and client. Here is how a typical interaction
may look like:

    > client;
    client> 1+1
    client> foo bar
    client> quit
    client is exiting
    ()

    > server;
    server listening at 'server_socket'
    server> 1+1
    server> foo bar
    server> quit
    server is exiting
    ()

Note that while the server processes requests sequentially, it accepts
connections from a new client after each request, so that you can run
as many clients as you like.


File: pure-sockets.info,  Node: Index,  Prev: Example,  Up: Top

Index
*****

 [index ]
* Menu:

* accept function:                       Establishing Connections.
                                                               (line  6)
* bind function:                         Establishing Connections.
                                                               (line  8)
* closesocket function:                  Creating and Closing Sockets.
                                                               (line 26)
* connect function:                      Establishing Connections.
                                                               (line 10)
* getpeername function:                  Socket Information.   (line  8)
* getsockname function:                  Socket Information.   (line  6)
* getsockopt function:                   Socket Information.   (line 10)
* listen function:                       Establishing Connections.
                                                               (line 12)
* recv function:                         Socket I/O.           (line  6)
* recvfrom function:                     Socket I/O.           (line 10)
* send function:                         Socket I/O.           (line  8)
* sendto function:                       Socket I/O.           (line 12)
* setsockopt function:                   Socket Information.   (line 12)
* shutdown function:                     Creating and Closing Sockets.
                                                               (line 22)
* sockaddr function:                     Creating and Inspecting Socket Addresses.
                                                               (line  9)
* sockaddr_family function:              Creating and Inspecting Socket Addresses.
                                                               (line 36)
* sockaddr_hostname function:            Creating and Inspecting Socket Addresses.
                                                               (line 42)
* sockaddr_info function:                Creating and Inspecting Socket Addresses.
                                                               (line 54)
* sockaddr_ip function:                  Creating and Inspecting Socket Addresses.
                                                               (line 45)
* sockaddr_path function:                Creating and Inspecting Socket Addresses.
                                                               (line 39)
* sockaddr_port function:                Creating and Inspecting Socket Addresses.
                                                               (line 51)
* sockaddr_service function:             Creating and Inspecting Socket Addresses.
                                                               (line 48)
* sockaddrs function:                    Creating and Inspecting Socket Addresses.
                                                               (line 31)
* socket function:                       Creating and Closing Sockets.
                                                               (line  6)
* socketpair function:                   Creating and Closing Sockets.
                                                               (line 18)
* sockets module:                        Top.                  (line  6)



Tag Table:
Node: Top282
Node: Installation987
Ref: installation1071
Ref: 01071
Ref: module-sockets1071
Ref: 11071
Ref: pure-sockets-pure-sockets-interface1071
Ref: 21071
Node: Usage1902
Ref: usage1990
Ref: 31990
Node: Creating and Inspecting Socket Addresses3170
Ref: creating and inspecting socket addresses3295
Ref: 43295
Ref: creating-and-inspecting-socket-addresses3295
Ref: 53523
Ref: sockaddr3523
Ref: 94623
Ref: sockaddrs4623
Ref: a4850
Ref: sockaddr_family4850
Ref: b4940
Ref: sockaddr_path4940
Ref: c5025
Ref: sockaddr_hostname5025
Ref: d5129
Ref: sockaddr_ip5129
Ref: e5190
Ref: sockaddr_service5190
Ref: f5272
Ref: sockaddr_port5272
Ref: 105336
Ref: sockaddr_info5336
Node: Creating and Closing Sockets5565
Ref: creating and closing sockets5723
Ref: 115723
Ref: creating-and-closing-sockets5723
Ref: 125790
Ref: socket5790
Ref: 136451
Ref: socketpair6451
Ref: 146622
Ref: shutdown6622
Ref: 156768
Ref: closesocket6768
Node: Establishing Connections6891
Ref: establishing connections7019
Ref: 167019
Ref: establishing-connections7019
Ref: 67078
Ref: accept7078
Ref: 177112
Ref: bind7112
Ref: 187144
Ref: connect7144
Ref: 197179
Ref: listen7179
Node: Socket I/O7216
Ref: socket i/o7334
Ref: 1a7334
Ref: socket-i-o7334
Ref: 1b7365
Ref: recv7365
Ref: 1c7402
Ref: send7402
Ref: 87439
Ref: recvfrom7439
Ref: 1d7485
Ref: sendto7485
Node: Socket Information7855
Ref: socket information7940
Ref: 1e7940
Ref: socket-information7940
Ref: 77987
Ref: getsockname7987
Ref: 1f8022
Ref: getpeername8022
Ref: 208057
Ref: getsockopt8057
Ref: 218105
Ref: setsockopt8105
Node: Example8551
Ref: example8632
Ref: 228632
Node: Index11365
Ref: index11432

End Tag Table


Local Variables:
coding: utf-8
End:
