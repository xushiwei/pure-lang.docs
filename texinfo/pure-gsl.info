This is pure-gsl.info, produced by makeinfo version 4.13 from
pure-gsl.texi.

Generated by Sphinx

INFO-DIR-SECTION Pure Language and Library Documentation
START-INFO-DIR-ENTRY
* pure-gsl: (pure-gsl.info).    pure-gsl - GNU Scientific Library Interface for Pure
END-INFO-DIR-ENTRY


File: pure-gsl.info,  Node: Top,  Next: Polynomials,  Up: (dir)

pure-gsl
********

  Version 0.11, November 16, 2011

    Albert Graef <<Dr.Graef@t-online.de>> 
    Eddie Rucker <<erucker@bmc.edu>> 
  License: GPL V3 or later, see the accompanying COPYING file

  Building on Pure's GSL-compatible matrix support, this module aims to
provide a complete wrapper for the GNU Scientific Library which
provides a wide range of mathematical routines useful for scientific
programming, number crunching and signal processing applications.

  This is still work in progress, only a small part of the interface is
finished right now. Here is a brief summary of the operations which are
implemented:

   - Matrix-scalar and matrix-matrix arithmetic. This is fairly complete
     and includes matrix multiplication, as well as element-wise
     exponentiation (^) and integer operations (div, mod, bit shifts and
     bitwise logical operations) which aren't actually in the GSL API.

   - SVD (singular value decomposition), as well as the corresponding
     solvers, pseudo inverses and left and right matrix division. This
     is only available for real matrices right now, as GSL doesn't
     implement complex SVD.

   - Random distributions (p.d.f. and c.d.f.) and statistic functions.

   - Polynomial evaluation and roots.

   - Linear least-squares fitting. Multi-fitting is not available yet.

  Installation instructions: Get the latest source from
<http://pure-lang.googlecode.com/files/pure-gsl-0.11.tar.gz>. Run
`make' to compile the module and `make install' (as root) to install it
in the Pure library directory.  This requires GNU make, and of course
you need to have Pure and GSL installed.  The `make install' step is
only necessary for system-wide installation.

  `make' tries to guess your Pure installation directory and
platform-specific setup. If it gets this wrong, you can set some
variables manually. In particular, `make install prefix=/usr' sets the
installation prefix, and `make PIC=-fPIC' or some similar flag might be
needed for compilation on 64 bit systems. Please see the Makefile for
details.

  The current release requires GSL 1.11 or later and Pure 0.45 or later.
Older GSL versions might still work, but then some operations may be
missing. The latest and greatest GSL version is always available from
<http://www.gnu.org/software/gsl>.

  After installation, you can import the entire GSL interface as
follows:

    using gsl;

For convenience, the different parts of the GSL interface are also
available as separate modules. E.g., if you only need the matrix
operations:

    using gsl::matrix;

In either case, the global `gsl_version' variable reports the installed
GSL version:

    > show gsl_version
    let gsl_version = "1.11";

(This variable used to be defined by the Pure runtime but has been moved
into pure-gsl as of Pure 0.37.)

  Most other operations are declared in separate namespaces which are
in 1-1 correspondence with the module names. Thus, e.g., the
`gsl_poly_eval' routine is named `gsl::poly::eval' in Pure and can be
found in the `gsl::poly' module and namespace. The `using namespace'
declaration can be used to facilitate access to the operations in a
given namespace, e.g.:

    > using gsl::poly;
    > using namespace gsl::poly;
    > eval {1,2,3} 2;
    17

See the `examples' folder in the sources for some examples.

  If you'd like to contribute, please mail the authors or contact us at
<http://groups.google.com/group/pure-lang>.

* Menu:

* Polynomials::
* Special Functions::
* Matrices::
* Least-Squares Fitting::
* Statistics::
* Random Number Distributions::
* Sorting::
* Index::

 --- The Detailed Node Listing ---

Polynomials

* Routines::
* Examples::

Special Functions

* Airy Functions::
* Examples: Examples<2>.
* Bessel Functions::
* Examples: Examples<3>.
* Clausen Functions::
* Examples: Examples<4>.
* Colomb Functions::
* Examples: Examples<5>.
* Coupling Coefficients::
* Examples: Examples<6>.
* Dawson Function::
* Examples: Examples<7>.
* Debye Functions::
* Examples: Examples<8>.
* Dilogarithm::
* Examples: Examples<9>.
* Examples: Examples<10>.

Matrices

* Matrix Creation::
* Matrix Operators and Functions::
* Singular Value Decomposition::

Least-Squares Fitting

* Routines: Routines<2>.
* Examples: Examples<11>.

Statistics

* Routines: Routines<3>.
* Examples: Examples<12>.

Random Number Distributions

* Routines: Routines<4>.
* Examples: Examples<13>.

Sorting

* Routines: Routines<5>.
* Examples: Examples<14>.


File: pure-gsl.info,  Node: Polynomials,  Next: Special Functions,  Prev: Top,  Up: Top

1 Polynomials
*************

This module provides Pure wrappers for the GSL polynomial routines. For
detail about the routines, see Chapter 6 of the GSL manual,

  <http://www.gnu.org/software/gsl/manual/html_node/Polynomials.html>.

  Polynomials are represented by vectors (one row matrices).

* Menu:

* Routines::
* Examples::


File: pure-gsl.info,  Node: Routines,  Next: Examples,  Up: Polynomials

1.1 Routines
============

 -- Function: gsl::poly::eval c::matrix x
     implements `gsl_poly_eval', `gsl_poly_complex_eval', and
     `gsl_complex_poly_eval' without the `len' parameter.

     GSL does not supply an integer routine for evaluating polynomials
     with `int' or  `bigint' coefficients. Therefore, an integer
     routine has been provided in pure-gsl using the Chinese Remainder
     Theorem.

 -- Function: gsl::poly::dd_init x::matrix y::matrix
     implements `gsl_poly_dd_init' without the `size' parameter.

 -- Function: gsl::poly::dd_eval dd::matrix xa::matrix x::double
     implements `gsl_poly_dd_eval' without the `size' parameter.

 -- Function: gsl::poly::dd_taylor xp::double dd::matrix xa::matrix
     implements `gsl_poly_dd_taylor' without the `size' and workspace
     `w' arguments.

 -- Function: gsl::poly::solve_quadratic a b c
     implements `gsl_poly_solve_quadratic'.  This function returns a
     list of roots instead of passing them through the parameters `x0'
     and `x1'.

 -- Function: gsl::poly::complex_solve_quadratic a b c
     implements `gsl_poly_complex_solve_quadratic'. This function
     returns a list of roots instead of passing trhough the parameters
     `z0' and `z1'.

 -- Function: gsl::poly::solve_cubic a b c
     implements `gsl_poly_solve_cubic'. This function returns a list of
     roots instead of passing them through the parameters `x0', `x1',
     and `x2'.

 -- Function: gsl::poly::complex_solve_cubic a b c
     implements `gsl_poly_complex_colve_cubic'. This function returns a
     list of roots instead of passing them through the parameters `z0',
     `z1', and `z2'.

 -- Function: gsl::poly::complex_solve c::matrix
     implements `gsl_poly_complex_solve' omitting the parametrs `n' and
     `w'. The GSL routines for creating and freeing the workspace are
     handled automatically.


File: pure-gsl.info,  Node: Examples,  Prev: Routines,  Up: Polynomials

1.2 Examples
============

Usage of each library routine is illustrated below.

    > using gsl::poly;
    > using namespace gsl::poly;
    > eval {1,2,3} 2;
    17
    > eval {1.0,2.0,3.0} (-2.0);
    9.0
    > eval {1, 2, 2} (1+:1);
    3.0+:6.0
    > eval {1+:2, 2+:3, 2+:3} (1+:1);
    -6.0+:11.0
    > let dd = dd_init {1,2,3} {2,4,6};
    > dd;
    {2.0,2.0,0.0}
    > dd_eval dd {1,2,3} 2;
    4.0
    > dd_taylor 0.0 dd {1,2,3};
    {0.0,2.0,0.0}
    > solve_quadratic 2 4 1;
    [-1.70710678118655,-0.292893218813452]
    > solve_quadratic 1 4 4;
    [-2.0,-2.0]
    > solve_quadratic 0 2 1;
    [-0.5]
    > solve_quadratic 1 2 8;
    []
    > complex_solve_quadratic 0 2 1;
    [-0.5+:0.0]
    > complex_solve_quadratic 2 2 3;
    [-0.5+:-1.11803398874989,-0.5+:1.11803398874989]
    > solve_cubic 3 3 1;
    [-1.0,-1.0,-1.0]
    > solve_cubic 3 2 1;
    [-2.32471795724475]
    > complex_solve_cubic 2 2 1;
    [-1.0+:0.0,-0.5+:-0.866025403784439,-0.5+:0.866025403784439]
    > complex_solve {6,1,-7,-1,1};
    [1.0+:0.0,-1.0+:0.0,-2.0+:0.0,3.0+:0.0]



File: pure-gsl.info,  Node: Special Functions,  Next: Matrices,  Prev: Polynomials,  Up: Top

2 Special Functions
*******************

This module is loaded via the command `using gsl::sf' and provides Pure
wrappers for the GSL Special Functions. For details, see Chapter 7 of
the GSL manual,

<http://www.gnu.org/software/gsl/manual/html_node/Special-Functions.html>.

  To load the library, use the Pure command `using gsl::sf'.  Modes for
the functions must be one of:

    GSL_PREC_DOUBLE
    GSL_PREC_SINGLE
    GSL_PREC_APPROX

Results for some of the functions are returned as a Pure list instead of
the `gsl_sf_result' or  `gsl_sf_result_e10' structures in C. In these
cases, the resulting list is one of the following forms.

        - `[val, err]' for the `gsl_sf_result' struct and

        - `[val, err, e10]' for the `gsl_sf_result_e10' struct.

* Menu:

* Airy Functions::
* Examples: Examples<2>.
* Bessel Functions::
* Examples: Examples<3>.
* Clausen Functions::
* Examples: Examples<4>.
* Colomb Functions::
* Examples: Examples<5>.
* Coupling Coefficients::
* Examples: Examples<6>.
* Dawson Function::
* Examples: Examples<7>.
* Debye Functions::
* Examples: Examples<8>.
* Dilogarithm::
* Examples: Examples<9>.
* Examples: Examples<10>.


File: pure-gsl.info,  Node: Airy Functions,  Next: Examples<2>,  Up: Special Functions

2.1 Airy Functions
==================

 -- Function: gsl::sf::airy_Ai x
 -- Function: gsl::sf::airy_Ai (x, mode::int)
     implements `gsl_sf_airy_Ai'. The first form computes the function
     with `mode = GSL_PREC_DOUBLE'.

 -- Function: gsl::sf::airy_Ai_e x
 -- Function: gsl::sf::airy_Ai_e (x, mode::int)
     implements `gsl_sf_airy_Ai_e'. The first form computes the function
     with `mode = GSL_PREC_DOUBLE'.

 -- Function: gsl::sf::airy_Ai_scaled x
 -- Function: gsl::sf::airy_Ai_scaled (x, mode::int)
     implements `gsl_sf_airy_Ai_scaled'. The first form computes the
     function with `mode = GSL_PREC_DOUBLE'.

 -- Function: gsl::sf::airy_Ai_scaled_e x
 -- Function: gsl::sf::airy_Ai_scaled_e (x, mode::int)
     implements `gsl_sf_airy_Ai_scaled_e'. The first form computes the
     function with `mode = GSL_PREC_DOUBLE'.

 -- Function: gsl::sf::airy_Bi x
 -- Function: gsl::sf::airy_Bi (x, mode::int)
     implements `gsl_sf_airy_Bi'. The first form computes the function
     with `mode = GSL_PREC_DOUBLE'.

 -- Function: gsl::sf::airy_Bi_e x
 -- Function: gsl::sf::airy_Bi_e (x, mode::int)
     implements `gsl_sf_airy_Bi_e'. The first form computes the function
     with `mode = GSL_PREC_DOUBLE'.

 -- Function: gsl::sf::airy_Bi_scaled x
 -- Function: gsl::sf::airy_Bi_scaled (x, mode::int)
     implements `gsl_sf_airy_Bi_scaled'. The first form computes the
     function with `mode = GSL_PREC_DOUBLE'.

 -- Function: gsl::sf::airy_Bi_scaled_e x
 -- Function: gsl::sf::airy_Bi_scaled_e (x, mode::int)
     implements `gsl_sf_airy_Bi_scaled_e'. The first form computes the
     function with `mode = GSL_PREC_DOUBLE'.

 -- Function: gsl::sf::airy_Ai_deriv x
 -- Function: gsl::sf::airy_Ai_deriv (x, mode::int)
     implements `gsl_sf_airy_Ai_deriv'. The first form computes the
     function with `mode = GSL_PREC_DOUBLE'.

 -- Function: gsl::sf::airy_Ai_deriv_e x
 -- Function: gsl::sf::airy_Ai_deriv_e (x, mode::int)
     implements `gsl_sf_airy_Ai_deriv_e'. The first form computes the
     function with `mode = GSL_PREC_DOUBLE'.

 -- Function: gsl::sf::airy_Ai_deriv_scaled x
 -- Function: gsl::sf::airy_Ai_deriv_scaled (x, mode::int)
     implements `gsl_sf_airy_Ai_deriv_scaled'. The first form computes
     the function with `mode = GSL_PREC_DOUBLE'.

 -- Function: gsl::sf::airy_Ai_deriv_scaled_e x
 -- Function: gsl::sf::airy_Ai_deriv_scaled_e (x, mode::int)
     implements `gsl_sf_airy_Ai_deriv_scaled_e'. The first form computes
     the function with `mode = GSL_PREC_DOUBLE'.

 -- Function: gsl::sf::airy_Bi_deriv x
 -- Function: gsl::sf::airy_Bi_deriv (x, mode::int)
     implements `gsl_sf_airy_Bi_deriv'. The first form computes the
     function with `mode = GSL_PREC_DOUBLE'.

 -- Function: gsl::sf::airy_Bi_deriv_e x
 -- Function: gsl::sf::airy_Bi_deriv_e (x, mode::int)
     implements `gsl_sf_airy_Bi_deriv_e'. The first form computes the
     function with `mode = GSL_PREC_DOUBLE'.

 -- Function: gsl::sf::airy_Bi_deriv_scaled x
 -- Function: gsl::sf::airy_Bi_deriv_scaled (x, mode::int)
     implements `gsl_sf_airy_Bi_deriv_scaled'. The first form computes
     the function with `mode = GSL_PREC_DOUBLE'.

 -- Function: gsl::sf::airy_Bi_deriv_scaled_e x
 -- Function: gsl::sf::airy_Bi_deriv_scaled_e (x, mode::int)
     implements `gsl_sf_airy_Bi_deriv_scaled_e'. The first form computes
     the function with `mode = GSL_PREC_DOUBLE'.

 -- Function: gsl::sf::airy_zero_Ai s
     implements `gsl_sf_airy_zero_Ai'.

 -- Function: gsl::sf::airy_zero_Ai_e s
     implements `gsl_sf_airy_zero_Ai_e'.

 -- Function: gsl::sf::airy_zero_Bi s
     implements `gsl_sf_airy_zero_Bi'.

 -- Function: gsl::sf::airy_zero_Bi_e s
     implements `gsl_sf_airy_zero_Bi_e'.

 -- Function: gsl::sf::airy_zero_Ai_deriv s
     implements `gsl_sf_airy_zero_Ai_deriv'.

 -- Function: gsl::sf::airy_zero_Ai_deriv_e s
     implements `gsl_sf_airy_zero_Ai_deriv_e'.

 -- Function: gsl::sf::airy_zero_Bi_deriv s
     implements `gsl_sf_airy_zero_Bi_deriv'.

 -- Function: gsl::sf::airy_zero_Bi_deriv_e s
     implements `gsl_sf_airy_zero_Bi_deriv_e'.


File: pure-gsl.info,  Node: Examples<2>,  Next: Bessel Functions,  Prev: Airy Functions,  Up: Special Functions

2.2 Examples
============

The following illustrate the Airy functions.

    > using gsl::sf;
    > using namespace gsl::sf;
    > airy_Ai (-1.2); // defaults to GSL_PREC_DOUBLE
    0.52619437480212
    > airy_Ai_scaled (-1.2);
    0.52619437480212
    > airy_Ai (-1.2,GSL_PREC_APPROX);
    0.526194374771687
    > airy_Ai_scaled (-1.2, GSL_PREC_SINGLE);
    0.526194374771687
    > airy_Ai_e (-1.2);
    [0.52619437480212,1.88330586480371e-15]
    > airy_Ai_e (-1.2,GSL_PREC_APPROX);
    [0.526194374771687,1.01942940819652e-08]
    > airy_Ai_scaled_e (-1.2);
    [0.52619437480212,1.88330586480371e-15]
    > airy_Ai_scaled_e (-1.2,GSL_PREC_APPROX);
    [0.526194374771687,1.01942940819652e-08]
    > airy_Bi (-1.2);
    -0.015821370184632
    > airy_Bi_scaled (-1.2);
    -0.015821370184632
    > airy_Bi (-1.2,GSL_PREC_APPROX);
    -0.0158213701898015
    > airy_Bi_scaled (-1.2, GSL_PREC_SINGLE);
    -0.0158213701898015
    > airy_Bi_e (-1.2);
    [-0.015821370184632,1.31448899295896e-16]
    > airy_Bi_e (-1.2,GSL_PREC_APPROX);
    [-0.0158213701898015,4.10638404843775e-10]
    > airy_Bi_scaled_e (-1.2);
    [-0.015821370184632,1.31448899295896e-16]
    > airy_Bi_scaled_e (-1.2,GSL_PREC_APPROX);
    [-0.0158213701898015,4.10638404843775e-10]
    > airy_Ai_deriv (-1.2); // defaults to GSL_PREC_DOUBLE
    0.107031569272281
    > airy_Ai_deriv_scaled (-1.2);
    0.107031569272281
    > airy_Ai_deriv (-1.2,GSL_PREC_APPROX);
    0.107031569264504
    > airy_Ai_deriv_scaled (-1.2, GSL_PREC_SINGLE);
    0.107031569264504
    > airy_Ai_deriv_e (-1.2);
    [0.107031569272281,3.02919983680384e-16]
    > airy_Ai_deriv_e (-1.2,GSL_PREC_APPROX);
    [0.107031569264504,9.25921017197604e-11]
    > airy_Ai_deriv_scaled_e (-1.2);
    [0.107031569272281,3.02919983680384e-16]
    > airy_Ai_deriv_scaled_e (-1.2,GSL_PREC_APPROX);
    [0.107031569264504,9.25921017197604e-11]
    > airy_Bi_deriv (-1.2);
    0.601710157437464
    > airy_Bi_deriv_scaled (-1.2);
    0.601710157437464
    > airy_Bi_deriv (-1.2,GSL_PREC_APPROX);
    0.601710157441937
    > airy_Bi_deriv_scaled (-1.2, GSL_PREC_SINGLE);
    0.601710157441937
    > airy_Bi_deriv_e (-1.2);
    [0.601710157437464,1.7029557943563e-15]
    > airy_Bi_deriv_e (-1.2,GSL_PREC_APPROX);
    [0.601710157441937,5.20534347823991e-10]
    > airy_Bi_deriv_scaled_e (-1.2);
    [0.601710157437464,1.7029557943563e-15]
    > airy_Bi_deriv_scaled_e (-1.2,GSL_PREC_APPROX);
    [0.601710157441937,5.20534347823991e-10]
    > airy_zero_Ai 2;
    -4.08794944413097
    > airy_zero_Ai_e 3;
    [-5.52055982809555,1.22581052599448e-15]
    > airy_zero_Bi 2;
    -3.27109330283635
    > airy_zero_Bi_e 3;
    [-4.83073784166202,1.07263927554824e-15]
    > airy_zero_Ai_deriv 2;
    -3.24819758217984
    > airy_zero_Ai_deriv_e 3;
    [-4.82009921117874,1.07027702504564e-15]
    > airy_zero_Bi_deriv 2;
    -4.07315508907183
    > airy_zero_Bi_deriv_e 3;
    [-5.5123957296636,1.22399773198358e-15]



File: pure-gsl.info,  Node: Bessel Functions,  Next: Examples<3>,  Prev: Examples<2>,  Up: Special Functions

2.3 Bessel Functions
====================

 -- Function: gsl::sf::bessel_J0 x
     implements `gsl_sf_bessel_J0'.

 -- Function: gsl::sf::bessel_J0_e x
     implements `gsl_sf_besselJ0_e'.

 -- Function: gsl::sf::bessel_J1 x
     implements `gsl_sf_bessel_J1'.

 -- Function: gsl::sf::bessel_J1_e x
     implements `gsl_sf_bessel_J1_e'.

 -- Function: gsl::sf::bessel_Jn n x
     implements `gsl_sf_bessel_Jn'.

 -- Function: gsl::sf::bessel_Jn_e n x
     implements `gsl_sf_bessel_Jn_e'.

 -- Function: gsl::sf::bessel_Jn_array nmin::int nmax::int x
     implements `gsl_sf_bessel_Jn_array'.

 -- Function: gsl::sf::bessel_Y0 x
     implements `gsl_sf_bessel_Y0'.

 -- Function: gsl::sf::bessel_Y0_e x
     implements `gsl_sf_bessel_Y0_e'.

 -- Function: gsl::sf::bessel_Y1 x
     implements `gsl_sf_bessel_Y1'.

 -- Function: gsl::sf::bessel_Y1_e x
     implements `gsl_sf_bessel_Y1_e'.

 -- Function: gsl::sf::bessel_Yn x
     implements `gsl_sf_bessel_Yn'.

 -- Function: gsl::sf::bessel_Yn_e x
     implements `gsl_sf_bessel_Yn_e'.

 -- Function: gsl::sf::bessel_Yn_array nmin::int nmax::int x
     implements `gsl_sf_bessel_Yn_array'.

 -- Function: gsl::sf::bessel_I0 x
     implements `gsl_sf_bessel_I0'.

 -- Function: gsl::sf::bessel_I0_e x
     implements `gsl_sf_bessel_I0_e'.

 -- Function: gsl::sf::bessel_I1 x
     implements `gsl_sf_bessel_I1'.

 -- Function: gsl::sf::bessel_I1_e x
     implements `gsl_sf_bessel_I1_e'.

 -- Function: gsl::sf::bessel_In n::int x
     implements `gsl_sf_bessel_In'.

 -- Function: gsl::sf::bessel_In_e n::int x
     implements `gsl_sf_bessel_In_e'

 -- Function: gsl::sf::bessel_In_array nmin::int nmax::int x
     implements `gsl_sf_bessel_In_array'.

 -- Function: gsl::sf::bessel_I0_scaled x
     implements `gsl_sf_bessel_I0_scaled'.

 -- Function: gsl::sf::bessel_I0_scaled_e x
     implements `gsl_sf_bessel_I0_scaled_e'.

 -- Function: gsl::sf::bessel_I1_scaled x
     implements `gsl_sf_bessel_I1_scaled'.

 -- Function: gsl::sf::bessel_I1_scaled_e x
     implements `gsl_sf_bessel_I1_scaled_e'.

 -- Function: gsl::sf::bessel_In_scaled n::int x
     implements `gsl_sf_bessel_In_scaled'.

 -- Function: gsl::sf::bessel_In_scaled_e n::int x
     implements `gsl_sf_bessel_In_scaled_e'.

 -- Function: gsl::sf::bessel_In_scaled_array nmin::int nmax::int x
     implements `gsl_sf_bessel_In_array'.

 -- Function: gsl::sf::bessel_K0 x
     implements `gsl_sf_bessel_K0'.

 -- Function: gsl::sf::bessel_K0_e x
     implements `gsl_sf_bessel_K0_e'.

 -- Function: gsl::sf::bessel_K1 x
     implements `gsl_sf_bessel_K1'.

 -- Function: gsl::sf::bessel_K1_e x
     implements `gsl_sf_bessel_K1_e'.

 -- Function: gsl::sf::bessel_Kn n::int x
     implements `gsl_sf_bessel_Kn'.

 -- Function: gsl::sf::bessel_Kn_e n::int x
     implements `gsl_sf_bessel_Kn_e'

 -- Function: gsl::sf::bessel_Kn_array nmin::int nmax::int x
     implements `gsl_sf_bessel_Kn_array'.

 -- Function: gsl::sf::bessel_K0_scaled x
     implements `gsl_sf_bessel_K0_scaled'.

 -- Function: gsl::sf::bessel_K0_scaled_e x
     implements `gsl_sf_bessel_K0_scaled_e'.

 -- Function: gsl::sf::bessel_K1_scaled x
     implements `gsl_sf_bessel_K1_scaled'.

 -- Function: gsl::sf::bessel_K1_scaled_e x
     implements `gsl_sf_bessel_K1_scaled_e'.

 -- Function: gsl::sf::bessel_Kn_scaled n::int x
     implements `gsl_sf_bessel_Kn_scaled'.

 -- Function: gsl::sf::bessel_Kn_scaled_e n::int x
     implements `gsl_sf_bessel_Kn_scaled_e'.

 -- Function: gsl::sf::bessel_Kn_scaled_array nmin::int nmax::int x
     implements `gsl_sf_bessel_Kn_array'.

 -- Function: gsl::sf::bessel_j0 x
     implements `gsl_sf_bessel_j0'.

 -- Function: gsl::sf::bessel_j0_e x
     implements `gsl_sf_bessel_j0_e'.

 -- Function: gsl::sf::bessel_j1 x
     implements `gsl_sf_bessel_j1'.

 -- Function: gsl::sf::bessel_j1_e x
     implements `gsl_sf_bessel_j1_e'.

 -- Function: gsl::sf::bessel_j2 x
     implements `gsl_sf_bessel_j2'.

 -- Function: gsl::sf::bessel_j2_e x
     implements `gsl_sf_bessel_j2_e'.

 -- Function: gsl::sf::bessel_jl l::int x
     implements `gsl_sf_bessel_jl'.

 -- Function: gsl::sf::bessel_jl_e l::int x
     implements `gsl_sf_bessel_jl_e'.

 -- Function: gsl::sf::bessel_jl_array lmax::int x
     implements `gsl_sf_bessel_jl_array'.

 -- Function: gsl::sf::bessel_jl_steed_array lmax::int x
     implements `gsl_sf_bessel_jl_steed_array'.

 -- Function: gsl::sf::bessel_y0 x
     implements `gsl_sf_bessel_y0'.

 -- Function: gsl::sf::bessel_y0_e x
     implements `gsl_sf_bessel_y0_e'.

 -- Function: gsl::sf::bessel_y1 x
     implements `gsl_sf_bessel_y1'.

 -- Function: gsl::sf::bessel_y1_e x
     implements `gsl_sf_bessel_y1_e'.

 -- Function: gsl::sf::bessel_y2 x
     implements `gsl_sf_bessel_y2'.

 -- Function: gsl::sf::bessel_y2_e x
     implements `gsl_sf_bessel_y2_e'.

 -- Function: gsl::sf::bessel_yl l::int x
     implements `gsl_sf_bessel_yl'.

 -- Function: gsl::sf::bessel_yl_e l::int x
     implements `gsl_sf_bessel_yl_e'.

 -- Function: gsl::sf::bessel_yl_array lmax::int x
     implements `gsl_sf_bessel_yl_array'.

 -- Function: gsl::sf::bessel_i0_scaled x
     implements `gsl_sf_bessel_i0_scaled'.

 -- Function: gsl::sf::bessel_i0_scaled_e x
     implements `gsl_sf_bessel_i0_scaled_e'.

 -- Function: gsl::sf::bessel_i1_scaled x
     implements `gsl_sf_bessel_i1_scaled'.

 -- Function: gsl::sf::bessel_i1_scaled_e x
     implements `gsl_sf_bessel_i1_scaled_e'.

 -- Function: gsl::sf::bessel_i2_scaled x
     implements `gsl_sf_bessel_i2_scaled'.

 -- Function: gsl::sf::bessel_i2_scaled_e x
     implements `gsl_sf_bessel_i2_scaled_e'.

 -- Function: gsl::sf::bessel_il_scaled l::int x
     implements `gsl_sf_bessel_il_scaled'.

 -- Function: gsl::sf::bessel_il_scaled_e l::int x
     implements `gsl_sf_bessel_il_scaled_e'.

 -- Function: gsl::sf::bessel_il_scaled_array lmax::int x
     implements `gsl_sf_bessel_il_scaled_array'.

 -- Function: gsl::sf::bessel_k0_scaled x
     implements `gsl_sf_bessel_k0_scaled'.

 -- Function: gsl::sf::bessel_k0_scaled_e x
     implements `gsl_sf_bessel_k0_scaled_e'.

 -- Function: gsl::sf::bessel_k1_scaled x
     implements `gsl_sf_bessel_k1_scaled'.

 -- Function: gsl::sf::bessel_k1_scaled_e x
     implements `gsl_sf_bessel_ik_scaled_e'.

 -- Function: gsl::sf::bessel_k2_scaled x
     implements `gsl_sf_bessel_k2_scaled'.

 -- Function: gsl::sf::bessel_k2_scaled_e x
     implements `gsl_sf_bessel_k2_scaled_e'.

 -- Function: gsl::sf::bessel_kl_scaled l::int x
     implements `gsl_sf_bessel_kl_scaled'.

 -- Function: gsl::sf::bessel_kl_scaled_e l::int x
     implements `gsl_sf_bessel_kl_scaled_e'.

 -- Function: gsl::sf::bessel_kl_scaled_array lmax::int x
     implements `gsl_sf_bessel_il_scaled_array'.

 -- Function: gsl::sf::bessel_Jnu nu x
     implements `gsl_sf_bessel_Jnu'.

 -- Function: gsl::sf::bessel_Jnu_e nu x
     implements `gsl_sf_bessel_Jnu_e'.

 -- Function: gsl::sf::bessel_sequence_Jnu_e nu v::matrix
     implements `gsl_sf_bessel_sequence_Jnu_e'.

 -- Function: gsl::sf::bessel_Ynu nu x
     implements `gsl_sf_bessel_Ynu'.

 -- Function: gsl::sf::bessel_Ynu_e nu x
     implements `gsl_sf_bessel_Ynu_e'.

 -- Function: gsl::sf::bessel_Inu nu x
     implements `gsl_sf_bessel_Inu'.

 -- Function: gsl::sf::bessel_Inu_e nu x
     implements `gsl_sf_bessel_Inu_e'.

 -- Function: gsl::sf::bessel_Inu_scaled nu x
     implements `gsl_sf_bessel_Inu_scaled'.

 -- Function: gsl::sf::bessel_Inu_scaled_e nu x
     implements `gsl_sf_bessel_Inu_scaled_e'.

 -- Function: gsl::sf::bessel_Knu nu x
     implements `gsl_sf_bessel_Knu'.

 -- Function: gsl::sf::bessel_Knu_e nu x
     implements `gsl_sf_bessel_Knu'.

 -- Function: gsl::sf::bessel_lnKnu nu x
     implements `gsl_sf_bessel_lnKnu'.

 -- Function: gsl::sf::bessel_lnKnu_e nu x
     implements `gsl_sf_bessel_lnKnu_e'.

 -- Function: gsl::sf::bessel_Knu_scaled nu x
     implements `gsl_sf_bessel_Knu_scaled'.

 -- Function: gsl::sf::bessel_Knu_scaled_e nu x
     implements `gsl_sf_bessel_Knu_scaled_e'.

 -- Function: gsl::sf::bessel_zero_J0 s::int
     implements `gsl_sf_bessel_zero_J0'.

 -- Function: gsl::sf::bessel_zero_J0_e s::int
     implements `gsl_sf_bessel_zero_J0_e'.

 -- Function: gsl::sf::bessel_zero_J1 s::int
     implements `gsl_sf_bessel_zero_J1'.

 -- Function: gsl::sf::bessel_zero_J1_e s::int
     implements `gsl_sf_bessel_zero_J1_e'.

 -- Function: gsl::sf::bessel_zero_Jnu nu s::int
     implements `gsl_sf_bessel_zero_Jnu'.

 -- Function: gsl::sf::bessel_zero_Jnu_e nu s::int
     implements `gsl_sf_bessel_zero_Jnu'.


File: pure-gsl.info,  Node: Examples<3>,  Next: Clausen Functions,  Prev: Bessel Functions,  Up: Special Functions

2.4 Examples
============

The following illustrate the Bessel functions.

    > using gsl::sf;
    > using namespace gsl::sf;
    > bessel_J0 (-1.2);
    0.671132744264363
    > bessel_J0_e 0.75;
    [0.864242275166649,7.07329111491049e-16]
    > bessel_J1 1.2;
    0.498289057567216
    > bessel_J1_e (-0.2);
    [-0.099500832639236,5.00768737808415e-17]
    > bessel_Jn 0 (-1.2);
    0.671132744264363
    > bessel_Jn_e 2 0.75;
    [0.0670739972996506,5.48959386474892e-17]
    > bessel_Jn_array 0 4 0.5;
    [0.938469807240813,0.242268457674874,0.0306040234586826,
     0.00256372999458724,0.000160736476364288]
    > bessel_Y0 0.25;
    -0.931573024930059
    > bessel_Y0_e 0.25;
    [-0.931573024930059,6.4279898430593e-16]
    > bessel_Y1 0.125;
    -5.19993611253477
    > bessel_Y1_e 4.325;
    [0.343041276811844,2.74577716760089e-16]
    > bessel_Yn 3 4.325;
    -0.0684784962694202
    > bessel_Yn_e 3 4.325;
    [-0.0684784962694202,3.37764590906247e-16]
    > bessel_Yn_array 2 4 1.35;
    [-1.07379345815726,-2.66813016175689,-10.7845628163178]
    > bessel_I0 1.35;
    1.51022709775726
    > bessel_I0_e 1.35;
    [1.51022709775726,2.37852166449918e-15]
    > bessel_I1 0.35;
    0.177693400031422
    > bessel_I1_e 0.35;
    [0.177693400031422,1.55520651386126e-16]
    > bessel_In 2 3.0;
    2.24521244092995
    > bessel_In_e 2 3.0;
    2.24521244092995,5.98244771302867e-15]
    > bessel_In_array 3 5 (-0.1);
    [-2.08463574223272e-05,2.60546902129966e-07,-2.6052519298937e-09]
    > bessel_I0_scaled 1.05;
    0.453242541279856
    > bessel_I0_scaled_e 1.05;
    [0.453242541279856,4.10118141697477e-16]
    > bessel_I1_scaled 1.05;
    0.210226017612868
    > bessel_I1_scaled_e 1.05;
    [0.210226017612868,2.12903131803686e-16]
    > bessel_In_scaled 3 1.05;
    0.00903732602788281
    > bessel_In_scaled_e 3 1.05;
    [0.00903732602788281,2.00668948743994e-17]
    > bessel_In_scaled_array 3 5 1.05;
    [0.00903732602788281,0.0011701685245855,0.000121756316755217]
    > bessel_K0 2.3;
    0.0791399330020936
    > bessel_K0_e 2.3;
    [0.0791399330020936,1.15144454318261e-16]
    > bessel_K1 2.3;
    0.0949824438453627
    > bessel_K1_e 2.3;
    [0.0949824438453627,9.85583638959967e-17]
    > bessel_Kn 2 3.4;
    0.0366633035851529
    > bessel_Kn_e 2 3.4;
    [0.0366633035851529,2.01761856558251e-16]
    > bessel_Kn_array 1 3 2.5;
    [0.0738908163477471,0.121460206278564,0.268227146393449]
    > bessel_K0_scaled 1.5;
    0.367433609054158
    > bessel_K0_scaled_e 1.5;
    [0.958210053294896,1.25816573186951e-14]
    > bessel_K1_scaled 1.5;
    1.24316587355255
    > bessel_K1_scaled_e 1.5;
    [1.24316587355255,2.32370553362606e-15]
    > bessel_Kn_scaled 4 1.5;
    35.4899165934682
    > bessel_Kn_scaled_e 4 1.5;
    [35.4899165934682,3.89252285021454e-14]
    > bessel_Kn_scaled_array 4 6 1.5;
    [35.4899165934682,197.498093175689,1352.14387109806]
    > bessel_j0 0.01;
    0.999983333416666
    > bessel_j0_e 0.01;
    [0.999983333416666,4.44081808400239e-16]
    > bessel_j1 0.2;
    0.0664003806703222
    > bessel_j1_e 0.2;
    [0.0664003806703222,2.94876925856268e-17]
    > bessel_j2 0.3;
    0.00596152486862022
    > bessel_j2_e 0.3;
    [0.00596152486862022,2.64744886840705e-18]
    > bessel_jl 4 0.3;
    8.53642426502516e-06
    > bessel_jl_e 4 0.3;
    [8.53642426502516e-06,1.02355215483598e-19]
    > bessel_jl_array 2 1.2;
    [0.776699238306022,0.34528456985779,0.0865121863384538]
    > bessel_jl_steed_array 2 1.2;
    [0.776699238306022,0.34528456985779,0.0865121863384538]
    > bessel_y0 1;
    -0.54030230586814
    > bessel_y0_e 3;
    [0.329997498866815,2.93096657048522e-16]
    > bessel_y1 3;
    0.062959163602316
    > bessel_y1_e 3.0;
    [0.062959163602316,1.04609100698801e-16]
    > bessel_yl 3 5;
    -0.0154429099129942
    > bessel_yl_e 3 5;
    [-0.0154429099129942,2.87258769784673e-17]
    > bessel_i0_scaled 3;
    0.166253541303889
    > bessel_i0_scaled_e 3;
    [0.166253541303889,7.38314037924188e-17]
    > bessel_i1_scaled 3;
    0.111661944928148
    > bessel_i1_scaled_e 3;
    [0.111661944928148,4.95878648934625e-17]
    > bessel_i2_scaled 3;
    0.0545915963757409
    > bessel_i2_scaled_e 3;
    [0.0545915963757409,2.42435388989563e-17]
    > bessel_il_scaled 3 1;
    0.0037027398773348
    > bessel_il_scaled_e 3 1;
    [0.0037027398773348,8.46838615599053e-17]
    > bessel_il_scaled_array 3 1;
    [0.432332358381693,0.135335283236613,0.0263265086718556,0.0037027398773348]
    > bessel_k0_scaled 3;
    0.523598775598299
    > bessel_k0_scaled_e 3;
    [0.523598775598299,2.32524566533909e-16]
    > bessel_k1_scaled 4;
    0.490873852123405
    > bessel_k1_scaled_e 4;
    [0.490873852123405,2.17991781125539e-16]
    > bessel_k2_scaled 4;
    0.760854470791278
    > bessel_k2_scaled_e 4;
    [0.760854470791278,3.37887260744586e-16]
    > bessel_kl_scaled 2 4;
    0.760854470791278
    > bessel_kl_scaled_e 2 4;
    [0.760854470791278,3.37887260744586e-16]
    > bessel_kl_scaled_array 2 4;
    [0.392699081698724,0.490873852123405,0.760854470791278]
    > bessel_Jnu 2 2.3;
    0.413914591732062
    > bessel_Jnu_e 2 2.3;
    [0.413914591732062,6.43352513956959e-16]
    > bessel_sequence_Jnu_e 2 {.1,.2,.3};
    [0.00124895865879992,0.00498335415278356,0.011165861949064]
    > bessel_Ynu 1 0.5;
    -1.47147239267024
    > bessel_Ynu_e 1 0.5;
    [-1.47147239267024,8.49504515830242e-15]
    > bessel_Inu 1.2 3.4;
    5.25626563437082
    > bessel_Inu_e 1.2 3.4;
    [5.25626563437082,1.00839636820646e-13]
    > bessel_Inu_scaled 1.2 3.4;
    0.175418771999042
    > bessel_Inu_scaled_e 1.2 3.4;
    [0.175418771999042,3.15501414592188e-15]
    > bessel_Knu 3 3;
    0.122170375757184
    > bessel_Knu_e 3 3;
    [0.122170375757184,4.34036365096743e-16]
    > bessel_lnKnu 3 3;
    -2.10233868587978
    > bessel_lnKnu_e 3 3;
    [-2.10233868587978,4.24157124665032e-15]
    > bessel_Knu_scaled 3 3;
    2.45385759319062
    > bessel_Knu_scaled_e 3 3;
    [2.45385759319062,7.6281217575122e-15]
    > bessel_zero_J0 3;
    8.65372791291102
    > bessel_zero_J0_e 3;
    [8.65372791291102,2.59611837387331e-14]
    > bessel_zero_J1 3;
    10.1734681350627
    > bessel_zero_J1_e 3;
    [10.1734681350627,2.03469362701254e-13]
    > bessel_zero_Jnu 1.2 3;
    10.46769
    > bessel_zero_Jnu_e 1.2 3;
    [10.4676986203553,2.09353972407105e-14]86203553



File: pure-gsl.info,  Node: Clausen Functions,  Next: Examples<4>,  Prev: Examples<3>,  Up: Special Functions

2.5 Clausen Functions
=====================

 -- Function: gsl::sf::clausen x
     implements `gsl_sf_clausen'.

 -- Function: gsl::sf::clausen_e x
     implements `gsl_sf_clausen_e'.


File: pure-gsl.info,  Node: Examples<4>,  Next: Colomb Functions,  Prev: Clausen Functions,  Up: Special Functions

2.6 Examples
============

The following illustrate the Clausen functions.

    > using gsl::sf;
    > using namespace gsl::sf;
    > clausen 4.5;
    -0.831839220823219
    > clausen_e 4.5;
    [-0.831839220823219,8.60688668835964e-16]



File: pure-gsl.info,  Node: Colomb Functions,  Next: Examples<5>,  Prev: Examples<4>,  Up: Special Functions

2.7 Colomb Functions
====================

The results of the Coulomb wave functions are returned as a list whose
elements are ordered corresponding to the argument order of the
corresponding C functions in GSL library.

 -- Function: gsl::sf::hydrogenicR_1 Z r
     implements `gsl_sf_hydrogenicR_1'.

 -- Function: gsl::sf::hydrogenicR_1_e Z r
     implements `gsl_sf_hydrogenicR_1_e'.

 -- Function: gsl::sf::hydrogenicR n::int l::int Z r
     implements `gsl_sf_hydrogenicR_1'.

 -- Function: gsl::sf::hydrogenicR_e n::int l::int Z r
     implements `gsl_sf_hydrogenicR_1_e'.

 -- Function: gsl::sf::coulomb_wave_FG_e eta x L_F k::int
     implements `gsl_sf_coulomb_wave_FG_e'.

 -- Function: gsl::sf::coulomb_wave_F_array L_min kmax::int eta x
     implements `gsl_sf_coulomb_wave_F_array'.

 -- Function: gsl::sf::coulomb_wave_FG_array L_min kmax::int eta x
     implements `gsl_sf_coulomb_wave_FG_array'.

 -- Function: gsl::sf::coulomb_wave_FGp_array L_min kmax::int eta x
     implements `gsl_sf_coulomb_wave_FGp_array'.

 -- Function: gsl::sf::coulomb_wave_sphF_array L_min kmax::int eta x
     implements `gsl_sf_coulomb_wave_sphF_array'.

 -- Function: gsl::sf::coulomb_CL_e L eta
     implements `gsl_sf_coulomb_wave_CL_e'.

 -- Function: gsl::sf::coulomb_CL_array Lmin kmax eta
     implements `gsl_sf_coulomb_wave_CL_array'.


File: pure-gsl.info,  Node: Examples<5>,  Next: Coupling Coefficients,  Prev: Colomb Functions,  Up: Special Functions

2.8 Examples
============

The following illustrate the Coulomb functions.

    > using gsl::sf;
    > using namespace gsl::sf;
    > hydrogenicR_1 0.2 4;
    0.0803784086420537
    > hydrogenicR_1_e 0.2 4;
    [0.0803784086420537,2.85561471862841e-17]
    > hydrogenicR 3 1 0.25 3.2;
    0.00802954301593587
    > hydrogenicR_e 3 1 0.25 3.2;
    [0.00802954301593587,3.90138748076797e-17]
    > coulomb_wave_F_array 1 2 0.5 0.5;
    [{0.0387503306520188,0.0038612830533923,0.000274978904710252},0.0]
    > coulomb_wave_FG_array 1 2 0.5 0.5;
    [{0.0387503306520188,0.0038612830533923,0.000274978904710252},
     {4.13731494044202,25.4479852847406,257.269816591168},0.0,0.0]
    > coulomb_wave_FGp_array 1 2 0.5 0.5;
    [{0.0387503306520188,0.0038612830533923,0.000274978904710252},
     {4.13731494044202,25.4479852847406,257.269816591168},0.0,0.0]
    > coulomb_wave_sphF_array 1 2 0.5 0.5;
    [{0.0775006613040376,0.0077225661067846,0.000549957809420504},0.0]
    > coulomb_CL_e (-0.5) 3;
    [0.000143036170217949,2.92195771135514e-18]
    > coulomb_CL_array (-0.5) 4 1.5;
    [0.0159218263353144,0.0251746178646226,0.00890057150292734,
     0.00172996014234001,0.000235267570111599]



File: pure-gsl.info,  Node: Coupling Coefficients,  Next: Examples<6>,  Prev: Examples<5>,  Up: Special Functions

2.9 Coupling Coefficients
=========================

 -- Function: gsl::sf::coupling_3j m::matrix
     implements `gsl_sf_coupling_3j' except the input is a 2x3 (row by
     column) integer matrix instead of six integer arguments.

 -- Function: gsl::sf::coupling_3j_e m::matrix
     implements `gsl_sf_coupling_3j_e' except the input is a 2x3 (row by
     column) integer matrix instead of six integer arguments.

 -- Function: gsl::sf::coupling_6j m::matrix
     implements `gsl_sf_coupling_6j' except the input is a 2x3 (row by
     column) integer matrix instead of six integer arguments.

 -- Function: gsl::sf::coupling_6j_e m::matrix
     implements `gsl_sf_coupling_6j_e' except the input is a 2x3 (row by
     column) integer matrix instead of six integer arguments.

 -- Function: gsl::sf::coupling_9j m::matrix
     implements `gsl_sf_coupling_9j' except the input is a 3x3 integer
     matrix instead of six integer arguments.

 -- Function: gsl::sf::coupling_9j_e m::matrix
     implements `gsl_sf_coupling_9j_e' except the input is a 3x3 integer
     matrix instead of six integer arguments.


File: pure-gsl.info,  Node: Examples<6>,  Next: Dawson Function,  Prev: Coupling Coefficients,  Up: Special Functions

2.10 Examples
=============

The following illustrate the coupling coefficient functions.

    > using gsl::sf;
    > using namespace gsl::sf;
    > coupling_3j {6,4,2;0,0,0};
    -0.29277002188456
    > coupling_3j_e {6,4,2;0,0,0};
    [-0.29277002188456,1.300160076865e-16]
    > coupling_6j {1,2,3;2,1,2};
    -0.166666666666667
    > coupling_6j_e {1,2,3;2,1,2};
    [-0.166666666666667,2.22044604925031e-16]
    > coupling_9j {1,2,3;2,1,2;1,1,1};
    -0.0962250448649376
    > coupling_9j_e {1,2,3;2,1,2;1,1,1};
    [-0.0962250448649376,4.84948508304183e-16]



File: pure-gsl.info,  Node: Dawson Function,  Next: Examples<7>,  Prev: Examples<6>,  Up: Special Functions

2.11 Dawson Function
====================

 -- Function: gsl::sf::dawson x
     implements `gsl_sf_dawson'.

 -- Function: gsl::sf::dawson_e x
     implements `gsl_sf_dawson_e'.


File: pure-gsl.info,  Node: Examples<7>,  Next: Debye Functions,  Prev: Dawson Function,  Up: Special Functions

2.12 Examples
=============

The following illustrate the dawson functions.

    > dawson 3;/**-
    0.178271030610558
    > dawson_e 3;
    [0.178271030610558,8.9920386788099e-16]



File: pure-gsl.info,  Node: Debye Functions,  Next: Examples<8>,  Prev: Examples<7>,  Up: Special Functions

2.13 Debye Functions
====================

 -- Function: gsl::sf::debye_1 x
     implements `gsl_sf_debye_1'.

 -- Function: gsl::sf::debye_1_e x
     implements `gsl_sf_debye_1_e'.

 -- Function: gsl::sf::debye_2 x
     implements `gsl_sf_debye_2'.

 -- Function: gsl::sf::debye_2_e x
     implements `gsl_sf_debye_2_e'.

 -- Function: gsl::sf::debye_3 x
     implements `gsl_sf_debye_3'.

 -- Function: gsl::sf::debye_3_e x
     implements `gsl_sf_debye_3_e'.

 -- Function: gsl::sf::debye_4 x
     implements `gsl_sf_debye_4'.

 -- Function: gsl::sf::debye_4_e x
     implements `gsl_sf_debye_4_e'.

 -- Function: gsl::sf::debye_5 x
     implements `gsl_sf_debye_5'.

 -- Function: gsl::sf::debye_5_e x
     implements `gsl_sf_debye_5_e'.

 -- Function: gsl::sf::debye_6 x
     implements `gsl_sf_debye_6'.

 -- Function: gsl::sf::debye_6_e x
     implements `gsl_sf_debye_6_e'.


File: pure-gsl.info,  Node: Examples<8>,  Next: Dilogarithm,  Prev: Debye Functions,  Up: Special Functions

2.14 Examples
=============

The following illustrate the debye functions.

    > debye_1 0.4;
    0.904437352623294
    > debye_1_e 0.4;
    [0.904437352623294,3.84040456356756e-16]
    > debye_2 1.4;
    0.613281386045505
    > debye_2_e 1.4;
    [0.613281386045505,5.15090106564116e-16]
    > debye_3 2.4;
    0.370136882985216
    > debye_3_e 2.4;
    [0.370136882985216,6.0792125556598e-16]
    > debye_4 3.4;
    0.205914922541978
    > debye_4_e 3.4;
    [0.205914922541978,7.42872979584512e-16]
    > debye_5 4.4;
    0.107477287722471
    > debye_5_e 4.4;
    [0.107477287722471,2.38647518907499e-17]
    > debye_6 5.4;
    0.0533132925698824
    > debye_6_e 5.4;
    [0.0533132925698824,1.18379289859322e-17]



File: pure-gsl.info,  Node: Dilogarithm,  Next: Examples<9>,  Prev: Examples<8>,  Up: Special Functions

2.15 Dilogarithm
================

 -- Function: gsl::sf::dilog x
     implements `gsl_sf_dilog'.

 -- Function: gsl::sf::dilog (r<:theta)
     implements `gsl_sf_complex_dilog_e' except that results are
     returned as the complex value `re+:im' and the error values are
     not returned.

 -- Function: gsl::sf::dilog_e x
     implements `gsl_sf_dilog_e'.

 -- Function: gsl::sf::dilog_e (r<:theta)
     implements `gsl_sf_complex_dilog_e' except the results are
     returned as the list `[re+:im, re_error, im_error]'.


File: pure-gsl.info,  Node: Examples<9>,  Next: Examples<10>,  Prev: Dilogarithm,  Up: Special Functions

2.16 Examples
=============

The following illustrate the dilog functions.

    > dilog 1.0;
    1.64493406684823
    > dilog (1<:2);
    -0.496658586741567+:0.727146050863279
    > dilog_e (1%3);
    [0.366213229977064,8.22687466397711e-15]
    > dilog_e (1<:3);
    [-0.817454913536463+:0.0980262093913011,3.8224192909699e-15,
     1.47247478976757e-15]


 -- Function: gsl::sf::multiply_e x y
     implements `gsl_sf_multiply_e'.

 -- Function: gsl::sf::multiply_err_e x dx y dy
     implements `gsl_sf_multiply_err_e'.


File: pure-gsl.info,  Node: Examples<10>,  Prev: Examples<9>,  Up: Special Functions

2.17 Examples
=============

The following illustrate the multiply functions.

    > multiply_e 10.0 11.0;
    [110.0,4.88498130835069e-14]
    > multiply_err_e 10.0 0.04 11.0 0.002;
    [110.0,0.460000000000049]



File: pure-gsl.info,  Node: Matrices,  Next: Least-Squares Fitting,  Prev: Special Functions,  Up: Top

3 Matrices
**********

This module is loaded via the command `using gsl::matrix' and provides
wrappers for many of the GSL matrix, BLAS, and linear algebra routines
found in Chapters 8, 12, and 13, respectively of the GSL Reference
Manual:

   * Vectors and Matrices
     (http://www.gnu.org/software/gsl/manual/html_node/Vectors-and-Matrices.html)

   * BLAS Support
     (http://www.gnu.org/software/gsl/manual/html_node/BLAS-Support.html)

   * Linear Algebra
     (http://www.gnu.org/software/gsl/manual/html_node/Linear-Algebra.html)

  It also contains some general utility functions for creating various
types of matrices.

* Menu:

* Matrix Creation::
* Matrix Operators and Functions::
* Singular Value Decomposition::


File: pure-gsl.info,  Node: Matrix Creation,  Next: Matrix Operators and Functions,  Up: Matrices

3.1 Matrix Creation
===================

The utility functions `zeros' and `ones' create matrices with all
elements zero or one, respectively, and `eye' creates identity
matrices. These functions can be invoked either with a pair *(n,m)*
denoting the desired number of rows or columns, or an integer *n* in
which case a square *n* x *n* matrix is created. The result is always a
double matrix. Analogous functions `izeros', `czeros', etc. are
provided to create integer and complex matrices, respectively.

 -- Function: gsl::matrix::zeros (n :: int, m :: int)
     creates an *n* x *m* double matrix with all of its entries being
     zero.

 -- Function: gsl::matrix::zeros n :: int
     creates an *n* x *n* double matrix with all of its entries being
     zero.

 -- Function: gsl::matrix::izeros (n :: int, m :: int)
     creates an *n* x *m* integer matrix with all of its entries being
     zero.

 -- Function: gsl::matrix::izeros n :: int
     creates an *n`x`n* integer matrix with all of its entries being
     zero.

 -- Function: gsl::matrix::czeros (n :: int, m :: int)
     creates an *n* x *m* complex matrix with all of its entries being
     zero.

 -- Function: gsl::matrix::czeros n :: int
     creates an *n* x *n* complex matrix with all of its entries being
     zero.

 -- Function: gsl::matrix::ones (n :: int, m :: int)
     creates an *n* x *m* double matrix with all of its entries being
     one.

 -- Function: gsl::matrix::ones n :: int
     creates an *n* x *n* double matrix with all of its entries being
     one.

 -- Function: gsl::matrix::iones (n :: int, m :: int)
     creates an *n* x *m* integer matrix with all of its entries being
     one.

 -- Function: gsl::matrix::iones n :: int
     creates an *n* x *n* integer matrix with all of its entries being
     one.

 -- Function: gsl::matrix::cones (n :: int, m :: int)
     creates an *n* x *m* complex matrix with all of its entries being
     one.

 -- Function: gsl::matrix::cones n :: int
     creates an *n* x *n* complex matrix with all of its entries being
     one.

 -- Function: gsl::matrix::eye (n :: int, m :: int)
     creates an *n* x *m* identity matrix with double entries.

 -- Function: gsl::matrix::eye n :: int
     creates an *n* x *n* identity matrix with double entries.

 -- Function: gsl::matrix::ieye (n :: int, m :: int)
     creates an *n* x *m* identity matrix with integer entries.

 -- Function: gsl::matrix::ieye n :: int
     creates an *n* x *n* identity matrix with integer entries.

 -- Function: gsl::matrix::ceye (n :: int, m :: int)
     creates an *n* x *m* identity matrix with complex entries.

 -- Function: gsl::matrix::ceye n :: int
     creates an *n* x *n* identity matrix with complex entries.


File: pure-gsl.info,  Node: Matrix Operators and Functions,  Next: Singular Value Decomposition,  Prev: Matrix Creation,  Up: Matrices

3.2 Matrix Operators and Functions
==================================

The following operations are defined for constant `a' and matrices `x'
and `y'. Some operators are not defined in the GSL library but are
provided here for convenience.

 -- Function: a + x
 -- Function: x + a
     returns a matrix with entries `a + x!(i,j)'.

 -- Function: x + y
     adds matrix `x' to matrix `y'.

 -- Function: - x
     returns a matrix with entries `- x!(i,j)'. Note that `neg x' is
     equivalent to `- x'.

 -- Function: a - x
     returns a matrix with entries `a - x!(i,j)'.

 -- Function: x - a
     returns a matrix with entries `x!(i,j) - a'.

 -- Function: x - y
     subtracts matrix `y' from matrix `x'.

 -- Function: a * x
 -- Function: x * a
     returns a matrix with entries `a * x!(i,j)'.

 -- Function: x .* y
     multiplies, element-wise, matrix `x' to matrix `y'.

 -- Function: x * y
     multiplies matrix `x' to matrix `y'.

 -- Function: a / x
     returns a matrix with entries `a / x!(i,j)'. Note that matrix `x'
     must not have any zero entries.

 -- Function: x / a
     returns a matrix with entries `x!(i,j) / a'. Note that `a' must be
     nonzero.

 -- Function: x ./ y
     divides, element-wise, matrix *x* by matrix *y*.

 -- Function: x / y
     right divides matrix *x* by matrix *y*.

 -- Function: x \ y
     left divides matrix *x* by matrix *y*.

 -- Function: a div x
     returns an integer matrix with entries `a div x!(i,j)'. Note that
     *a* must be an integer and matrix `x' must be an integer matrix
     with nonzero entries.

 -- Function: x div a
     returns an integer matrix with entries `x!(i,j) div a'. Note that
     `a' must be a nonzero integer and matrix `x' must have integer
     entries.

 -- Function: x div y
     computes the quotient integer matrix `x' by integer matrix `y'.

 -- Function: a mod x
     returns an integer matrix with entries `a mod x!(i,j)'. Note that
     `a' must be an integer and matrix `x' must be an integer matrix
     with nonzero entries.

 -- Function: x mod a
     returns an integer matrix with entries `a mod x!(i,j)'. Note that
     `a' must be an integer and matrix `x' must be an integer matrix
     with nonzero entries.

 -- Function: x mod y
     returns the remainder integer matrix `x' mod integer matrix `y'.

 -- Function: not x
     returns a matrix with integer entries `not x!(i,j)'. Note that `x'
     must be a matrix with integer entries and `not' is the bitwise
     negation operation.

 -- Function: a ^ x
     returns a matrix with entries `a ^ x!(i,j)'. Note that `0^0' is
     defined as 1.

 -- Function: x ^ a
     returns a matrix with entries `x!(i,j) ^ a'. Note that `0^0' is
     defined as 1.

 -- Function: x .^ y
     returns a matrix with entries `x!(i,j) ^ y!(i,j)'.

 -- Function: x ^ y
     returns a matrix with entries `x!(i,j) ^ y!(i,j)'.

 -- Function: x << a
     returns an integer matrix with entries `x!(i,j) << a'. Note that
     `a' must be an integer and matrix `x' must have integer entries.

 -- Function: x << y
     returns an integer matrix with entries `x!(i,j) << y!(i,j)'. Note
     that `x' and `y' must have integer entries.

 -- Function: x >> a
     returns an integer matrix with entries `x!(i,j) >> a'. Note that
     `a' must be an integer and matrix `x' must have integer entries.

 -- Function: x >> y
     returns an integer matrix with entries `x!(i,j) >> y!(i,j)'. Note
     that `x' and `y' must have integer entries.

 -- Function: x and a
 -- Function: a and x
     returns an integer matrix with entries `a and x!(i,j)'. Note that
     `a' must be an integer, matrix `x' must have integer entries, and
     `and' is a bitwise operator.

 -- Function: x and y
     returns an integer matrix with entries `x!(i,j) and y!(i,j)'. Note
     that `x' and `y' must be matrices with integer entries.

 -- Function: x or a
 -- Function: a or x
     returns an integer matrix with entries `a or x!(i,j)'. Note that
     `a' must be an integer, matrix `x' must have integer entries, and
     `or' is a bitwise operator.

 -- Function: x or y
     returns an integer matrix with entries `x!(i,j) or y!(i,j)'. Note
     that `x' and `y' must be matrices with integer entries.

  The `pow' function computes powers of matrices by repeated matrix
multiplication.

 -- Function: pow x :: matrix k :: int
 -- Function: pow x :: matrix k :: bigint
     Raises matrix `x' to the `k' th power. Note `x' must be a square
     matrix and `k' a nonnegative integer.


File: pure-gsl.info,  Node: Singular Value Decomposition,  Prev: Matrix Operators and Functions,  Up: Matrices

3.3 Singular Value Decomposition
================================

For a given *n* x *m* matrix `x', these functions yield a
singular-value decomposition `u', `s', `v' of the matrix such that `x
== u*s*transpose v', where `u' and `v' are orthogonal matrices of
dimensions *n* x *m* and *n* x *n*, respectively, and *s* is a *n* x
*n* diagonal matrix which has the singular values in its diagonal, in
descending order. Note that GSL implements this only for double
matrices right now. Also, GSL only handles the case of square or
overdetermined systems, but we work around that in our wrapper functions
by just adding a suitable number of zero rows in the underdetermined
case.

 -- Function: gsl::matrix::svd x
     singular-value decomposition of matrix `x'.

 -- Function: gsl::matrix::svd_mod x
     This uses the modified Golub-Reinsch algorithm, which is faster if
     `n > m' but needs *O(m^2)* extra memory as internal workspace.

 -- Function: gsl::matrix::svd_jacobi x
     This uses one-sided Jacobi orthogonalization which provides better
     relative accuracy but is slower.

 -- Function: gsl::matrix::svd_solve (u, s, v) b
     Solve the system `Ax=b', using the SVD of `A'. `svd_solve' takes
     the result `(u,s,v)' of a `svd' call, and a column vector `b' of
     the appropriate dimension. The result is another column vector
     solving the system (possibly in the least-squares sense).

 -- Function: gsl::matrix::pinv x
     Computes the pseudo inverse of a matrix from its singular value
     decomposition.


File: pure-gsl.info,  Node: Least-Squares Fitting,  Next: Statistics,  Prev: Matrices,  Up: Top

4 Least-Squares Fitting
***********************

This module is loaded via the command `using gsl::fit' and provides Pure
wrappers for the GSL least-squares fitting routines found in Chapter 36
of the GSL manual,

<http://www.gnu.org/software/gsl/manual/html_node/Least_002dSquares-Fitting.html>.

* Menu:

* Routines: Routines<2>.
* Examples: Examples<11>.


File: pure-gsl.info,  Node: Routines<2>,  Next: Examples<11>,  Up: Least-Squares Fitting

4.1 Routines
============

 -- Function: gsl::fit::linear x::matrix y::matrix
     implements `gsl_fit_linear' without the `xstride', `ystride', and
     `n' parameters. Results are returned as a list `[c0, c1, cov00,
     cov01, cov11, sumsq]'.

 -- Function: gsl::fit::wlinear x::matrix w::matrix y::matrix
     implements `gsl_fit_wlinear' without the `xstride', `wstride',
     `ystride', and `n' parameters. Results are given as a list `[c0,
     c1, cov00, cov01, cov11, chisq]'.

 -- Function: gsl::fit::linear_est x c0::double c1::double
          cov00::double cov01::double cov11::double
     implements `gsl_fit_linear_est'. Results are returned as a list
     `[y, y_err]'.

 -- Function: gsl::fit::mul x::matrix y::matrix
     implements `gsl_fit_mul' omitting the parameters `xstride',
     `ystride', and `n'. Results are returned as a list `[c1, cov11,
     sumsq]'.

 -- Function: gsl::fit::wmul x::matrix w::matrix y::matrix
     implements `gsl_fit_wmul' omitting the parametrs `xstride',
     `ystride', and `n'. Results are returned as a list `[c1, cov11,
     sumsq]'.

 -- Function: gsl::fit::mul_est x c1::double cov11::double
     implements `gsl_fit_mul_est'. Results are returned as a list `[y,
     y_err]'.


File: pure-gsl.info,  Node: Examples<11>,  Prev: Routines<2>,  Up: Least-Squares Fitting

4.2 Examples
============

Usage of each implemented library routine is illustrated below.

    > using gsl::fit;
    > using namespace gsl::fit;

The following code determines the equation for the least-squares line
through the points (1,0.01), (2,1.11), (3,1.9), (4,2.85), and (5,4.01).

    > Y x = '(a + b * x)
    > when
    >   a:b:_ = linear {1,2,3,4,5} {0.01,1.11,1.9,2.85,4.01}
    > end;
    > Y x;
    -0.946+0.974*x
    > eval $ Y 2;
    1.002

The following code illustrates estimating y-values without constructing
an equation for the least-squares line determined by the points
`{x1,x2,x3,...,xn}', `{y1,y2,y3,...,yn}'. Here we estimate the
*y*-value at *x* = 1, *x* = 2, and *x* = 3. Compare the output above at
*x* = 2 to the output at *x* = 2 below.

    > let c0:c1:cov00:cov01:cov11:_ = linear {1,2,3,4,5}
    >   {0.01,1.11,1.9,2.85,4.01};
    > linear_est 1 c0 c1 cov00 cov01 cov11;
    [0.028,0.0838570211729465]
    > linear_est 2 c0 c1 cov00 cov01 cov11;
    [1.002,0.0592958683214944]
    > linear_est 3 c0 c1 cov00 cov01 cov11;
    [1.976,0.0484148737476408]

Next, we determine a least-squares line through the points (1,0.01),
(2,1.11), (3,1.9), (4,2.85), and (5,4.01) using weights 0.1, 0.2, 0.3,
0.4, and 0.5.

    > W x = '(a + b * x)
    > when
    >   a:b:_ = wlinear (matrix (1..5))
    >           {0.1, 0.2, 0.3, 0.4, 0.5}
    >           {0.01, 1.11, 1.9, 2.85, 4.01};
    > end;
    > W u;
    -0.99+0.986*u
    > eval $ W 2;
    0.982

The least-squares slope for `Y = c1 * X' using the points (1,3), (2,5),
and (3,7) is calculated below. Also, the *y*-values and standard error
about *x* = 1, 2, and 3 are given.

    > let c1:cov11:sumsq:_ = mul {1,2,3} {3,5,7};
    > mul_est 1 c1 cov11;
    [2.42857142857143,0.123717914826348]
    > mul_est 2 c1 cov11;
    [4.85714285714286,0.247435829652697]
    > mul_est 3 c1 cov11;
    [7.28571428571428,0.371153744479045]

The least-squares slope for `Y = c1 * X' using the points (1,3), (2,5),
and (3,7), and weights 0.4, 0.9, and 0.4 is calculated below.  The
approximation of y-values and standard error about *x* = 1, 2, and 3
follows.

    > let c1:cov11:sumsq:_ = wmul {1,2,3} {0.4,0.9,0.4} {3,5,7};
    > mul_est 1 c1 cov11;
    [2.44736842105263,0.362738125055006]
    > mul_est 2 c1 cov11;
    [4.89473684210526,0.725476250110012]
    > mul_est 3 c1 cov11;
    [7.34210526315789,1.08821437516502]



File: pure-gsl.info,  Node: Statistics,  Next: Random Number Distributions,  Prev: Least-Squares Fitting,  Up: Top

5 Statistics
************

This module is loaded via the command `using gsl::stats' and provides
Pure wrappers for the GSL Statistics routines found in Chapter 20 of the
GSL manual,

  <http://www.gnu.org/software/gsl/manual/html_node/Statistics.html>.

* Menu:

* Routines: Routines<3>.
* Examples: Examples<12>.


File: pure-gsl.info,  Node: Routines<3>,  Next: Examples<12>,  Up: Statistics

5.1 Routines
============

 -- Function: gsl::stats::mean data::matrix
     implements `gsl_stats_mean' without `stride' and `n' arguments.

 -- Function: gsl::stats::variance data::matrix
     implements `gsl_stats_variance' without `stride' and `n' arguments.

 -- Function: gsl::stats::variance data::matrix mean
     implements `gsl_stats_variance_m' without `stride' and `n'
     arguments.

 -- Function: gsl::stats::sd data::matrix
     implements `gsl_stats_sd' without `stride' and `n' arguments.

 -- Function: gsl::stats::sd_m data::matrix mean
     implements `gsl_stats_sd_m' without `stride' and `n' arguments.

 -- Function: gsl::stats::tss data::matrix
     implements `gsl_stats_tss' without `stride' and `n' arguments.

 -- Function: gsl::stats::tss_m data::matrix mean
     implements `gsl_stats_tss_m' without `stride' and `n' arguments.

 -- Function: gsl::stats::variance_with_fixed_mean data::matrix mean
     implements `gsl_stats_variance_with_fixed_mean' without `stride'
     and `n' arguments.

 -- Function: gsl::stats::sd_with_fixed_mean data::matrix mean
     implements `gsl_stats_sd_with_fixed_mean' without `stride' and `n'
     arguments.

 -- Function: gsl::stats::absdev data::matrix
     implements `gsl_stats_absdev' without `stride' and `n' arguments.

 -- Function: gsl::stats::absdev_m data::matrix mean
     implements `gsl_stats_absdev_m' without `stride' and `n' arguments.

 -- Function: gsl::stats::skew data::matrix mean
     implements `gsl_stats_skew' without `stride' and `n' arguments.

 -- Function: gsl::stats::skew_m_sd data::matrix mean sd
     implements `gsl_stats_skew_m_sd' without `stride' and `n'
     arguments.

 -- Function: gsl::stats::kurtosis data::matrix
     implements `gsl_stats_kurtosis' without `stride' and `n' arguments.

 -- Function: gsl::stats::kurtosis_m_sd data::matrix mean sd
     implements `gsl_stats_kurtosis_m_sd' without `stride' and `n'
     arguments.

 -- Function: gsl::stats::lag1_autocorrelation data::matrix
     implements `gsl_stats_lag1_autocorrelation' without `stride' and
     `n' arguments.

 -- Function: gsl::stats::lag1_autocorrelation_m data::matrix mean
     implements `gsl_stats_lag1_autocorrelation_m' without `stride' and
     `n' arguments.

 -- Function: gsl::stats::covariance d1::matrix d2::matrix
     implements `gsl_stats_covariance' without `stride1', `stride2',
     and `n' arguments.

 -- Function: gsl::stats::covariance_m d1::matrix d2::matrix mean1 mean2
     implements `gsl_stats_covariance_m' without `stride1', `stride2',
     and `n' arguments.

 -- Function: gsl::stats::correlation d1::matrix d2::matrix
     implements `gsl_stats_correlation' without `stride1', `stride2',
     and `n' arguments.

 -- Function: gsl::stats::wmean weight::matrix data::matrix
     implements `gsl_stats_wmean' without `stride' and `n' arguments.

 -- Function: gsl::stats::wvariance weight::matrix data::matrix
     implements `gsl_stats_wvariance' without `stride' and `n'
     arguments.

 -- Function: gsl::stats::wvariance_m weight::matrix data::matrix mean
     implements `gsl_stats_wvariance_m' without `stride' and `n'
     arguments.

 -- Function: gsl::stats::wsd weight::matrix data::matrix
     implements `gsl_stats_wsd' without `stride' and `n' arguments.

 -- Function: gsl::stats::wsd_m weight::matrix data::matrix mean
     implements `gsl_stats_wsd_m' without `stride' and `n' arguments.

 -- Function: gsl::stats::wvariance_with_fixed_mean weight::matrix
          data::matrix mean
     implements `gsl_stats_wvariance_with_fixed_mean' without `stride'
     and `n' arguments.

 -- Function: gsl::stats::wsd_with_fixed_mean weight::matrix
          data::matrix mean
     implements `gsl_stats_wsd_with_fixed_mean' without `stride' and
     `n' arguments.

 -- Function: gsl::stats::wtss weight::matrix data::matrix
     implements `gsl_stats_wtss' without `stride' and `n' arguments.

 -- Function: gsl::stats::wtss_m weight::matrix data::matrix mean
     implements `gsl_stats_wtss_m' without `stride' and `n' arguments.

 -- Function: gsl::stats::wabsdev weight::matrix data::matrix
     implements `gsl_stats_wabsdev' without `stride' and `n' arguments.

 -- Function: gsl::stats::wabsdev_m weight::matrix data::matrix mean
     implements `gsl_stats_wabsdev_m' without `stride' and `n'
     arguments.

 -- Function: gsl::stats::wskew weight::matrix data::matrix
     implements `gsl_stats_wskew' without `stride' and `n' arguments.

 -- Function: gsl::stats::wskew_m_sd weight::matrix data::matrix mean sd
     implements `gsl_stats_wskew_m_sd' without `stride' and `n'
     arguments.

 -- Function: gsl::stats::wkurtosis weight::matrix data::matrix
     implements `gsl_stats_wkurtosis' without `stride' and `n'
     arguments.

 -- Function: gsl::stats::wkurtosis_m_sd weight::matrix data::matrix
     implements `gsl_stats_wkurtosis_m_sd' without `stride' and `n'
     arguments.

 -- Function: gsl::stats::max data::matrix
     implements `gsl_stats_max' without `stride' and `n' arguments.

 -- Function: gsl::stats::min data::matrix
     implements `gsl_stats_min' without `stride' and `n' arguments.

 -- Function: gsl::stats::minmax data::matrix
     implements `gsl_stats_minmax' without `stride' and `n' arguments.
     Results are returned as a list `[min, max]'.

 -- Function: gsl::stats::min_index data::matrix
     implements `gsl_stats_min_index' without `stride' and `n'
     arguments.

 -- Function: gsl::stats::max_index data::matrix
     implements `gsl_stats_max_index' without `stride' and `n'
     arguments.

 -- Function: gsl::stats::minmax_index data::matrix
     implements `gsl_stats_minmax_index' without `stride' and `n'
     arguments. Results are returned as a list `[min_index, max_index]'.

 -- Function: gsl::stats::median_from_sorted_data data::matrix
     implements `gsl_stats_median_from_sorted_data' without `stride'
     and `n' arguments.

 -- Function: gsl::stats::quantile_from_sorted_data data::matrix
          f::double
     implements `gsl_stats_quantile_from_sorted_data' without `stride'
     and `n' arguments.


File: pure-gsl.info,  Node: Examples<12>,  Prev: Routines<3>,  Up: Statistics

5.2 Examples
============

The following illustrates the use of each function in the `stats'
module.

    > using gsl::stats;
    > using namespace gsl::stats;
    > mean {1,2,3,4,5};
    3.0
    > variance {1,2,3,4,5};
    2.5
    > variance_m {1,2,3,4,5}  4;
    3.75
    > sd {1,2,3,4,5};
    1.58113883008419
    > sd_m {1,2,3,4,5} 4;
    1.93649167310371
    > tss {1,2,3,4,5};
    10.0
    > tss_m {1,2,3,4,5} 4;
    15.0
    > variance_with_fixed_mean {0.0,1.2,3.4,5.6,6.0} 4.1;
    6.314
    > sd_with_fixed_mean {0.0,1.2,3.4,5.6,6.0} 4.1;
    2.51276739870606
    > absdev {2,2,3,4,4};
    0.8
    > absdev_m {2,2,3,4,4} 4;
    1.0
    > skew {1,1,1,1,2,2,2,2,2,2,2,2,3,30};
    2.94796699504537
    > skew_m_sd {1,2,2,3,3,3,3,3,3,3,4,4,5} 3 1;
    0.0
    > kurtosis  {1,2,2,3,3,3,3,3,3,3,4,4,5};
    -0.230769230769231
    > kurtosis_m_sd {1,2,2,3,3,3,3,3,3,3,4,4,5} 3 1;
    -0.230769230769231
    > lag1_autocorrelation {1,2,3,4,5};
    0.4
    > lag1_autocorrelation_m {1,2,3,4,5} 2.5;
    0.444444444444444
    > covariance {1,2,3,4,5} {3.0,4.5,6.0,7.5,9.0};
    3.75
    > covariance_m {1,2,3,4,5} {3.0,4.5,6.0,7.5,9.0} 3 6;
    3.75
    > correlation {1,2,3,4} {2,3,4,5};
    1.0
    > wmean {0.4,0.2,0.3,0.3,0.3} {2,3,4,5,6};
    3.93333333333333
    > wvariance {0.4,0.2,0.3,0.3,0.3} {2,3,4,5,6};
    2.7752808988764
    > wvariance_m {0.4,0.2,0.3,0.3,0.3} {2,3,4,5,6} 3.0;
    3.87640449438202
    > wsd {0.4,0.2,0.3,0.3,0.3} {2,3,4,5,6};
    1.66591743459164
    > wsd_m {0.4,0.2,0.3,0.3,0.3} {2,3,4,5,6} 3.0;
    1.96885867811329
    > wvariance_with_fixed_mean {1,2,3,4} {1,2,3,4} 2.5;
    1.25
    > wsd_with_fixed_mean {1,2,3,4} {1,2,3,4} 2.5;
    1.11803398874989
    > wtss {1,1,2,2} {2,3,4,5};
    6.83333333333333
    > wtss_m {1,1,2,2} {2,3,4,5} 3.1;
    10.06
    > wabsdev {1,1,2,2} {2,3,4,5};
    0.888888888888889
    > wabsdev_m {1,1,2,2} {2,3,4,5} 3.1;
    1.13333333333333
    > wskew {1,1,2,2} {2,3,4,5};
    -0.299254338484713
    > wskew_m_sd {1,1,2,2} {2,3,4,5} 3.1 1.2;
    1.33526234567901
    > wkurtosis {1,1,2,2} {2,3,4,5};
    -1.96206512878137
    > wkurtosis_m_sd {1,1,2,2} {2,3,4,5} 3.1 1.2;
    -0.681921939300412
    > min {9,4,2,1,9};
    1
    > max {9.1,4.2,2.6,1.1,9.2};
    9.2
    > minmax {9.0,4.0,2.0,1.0,9.0};
    [1.0,9.0]
    > min_index {9.1,4.2,2.6,1.1,9.2};
    3
    > max_index {9,4,2,1,9};
    0
    > minmax_index {9,4,2,1,0,9};
    [4,0]
    > median_from_sorted_data {1.0,2.0,3.0};
    2.0
    > quantile_from_sorted_data {1.0,2.0,3.0} 0.25;
    1.5



File: pure-gsl.info,  Node: Random Number Distributions,  Next: Sorting,  Prev: Statistics,  Up: Top

6 Random Number Distributions
*****************************

This module is loaded via the command `using gsl::randist' and provides
Pure wrappers for the GSL random distribution routines found in Chapter
19 of the GSL manual,

<http://www.gnu.org/software/gsl/manual/html_node/Random-Number-Distributions.html>.

  There are two namespaces provided by randist.pure, `gsl::ran' for
probability densitity functions and `gsl::cdf' for cumulative
distribution functions. The two namespaces minimize typing of the
prefixes `gsl_ran_' and `gsl_cdf_' respectively.

* Menu:

* Routines: Routines<4>.
* Examples: Examples<13>.


File: pure-gsl.info,  Node: Routines<4>,  Next: Examples<13>,  Up: Random Number Distributions

6.1 Routines
============

 -- Function: gsl::ran::ugaussian_pdf x
     implements `gsl_ran_ugaussian'.

 -- Function: gsl::ran::gaussian_pdf x sigma
     implements `gsl_ran_gaussian_pdf'.

 -- Function: gsl::ran::gaussian_tail_pdf x a sigma
     implements `gsl_ran_gaussian_tail_pdf'.

 -- Function: gsl::ran::ugaussian_tail_pdf x a
     implements `gsl_ran_ugaussian_tail_pdf'.

 -- Function: gsl::ran::bivariate_gaussian_pdf x a
     implements `gsl_ran_bivariate_gaussian_pdf'.

 -- Function: gsl::ran::exponential_pdf x mu
     implements `gsl_ran_exponential_pdf'.

 -- Function: gsl::ran::laplace_pdf x a
     implements `gsl_ran_laplace_pdf'.

 -- Function: gsl::ran::exppow_pdf x a b
     implements `gsl_ran_exppow_pdf'.

 -- Function: gsl::ran::cauchy_pdf x a
     implements `gsl_ran_cauchy_pdf'.

 -- Function: gsl::ran::rayleigh_pdf x sigma
     implements `gsl_ran_rayleigh_pdf'.

 -- Function: gsl::ran::rayleigh_tail_pdf x a sigma
     implements `gsl_ran_rayleigh_tail_pdf'.

 -- Function: gsl::ran::landau_pdf x
     implements `gsl_ran_landau_pdf'.

 -- Function: gsl::ran::gamma_pdf x a b
     implements `gsl_ran_gamma_pdf'.

 -- Function: gsl::ran::flat_pdf x a b
     implements `gsl_ran_flat_pdf'.

 -- Function: gsl::ran::lognormal_pdf x zeta sigma
     implements `gsl_ran_lognormal_pdf'.

 -- Function: gsl::ran::chisq_pdf x nu
     implements `gsl_ran_chisq_pdf'.

 -- Function: gsl::ran::fdist_pdf x nu1 nu2
     implements `gsl_ran_fdist_pdf'.

 -- Function: gsl::ran::tdist_pdf x nu
     implements `gsl_ran_tdist_pdf'.

 -- Function: gsl::ran::beta_pdf x a b
     implements `gsl_ran_beta_pdf'.

 -- Function: gsl::ran::logistic_pdf x a
     implements `gsl_ran_logistic_pdf'.

 -- Function: gsl::ran::pareto_pdf x a b
     implements `gsl_ran_pareto_pdf'.

 -- Function: gsl::ran::weibull_pdf x a b
     implements `gsl_ran_weibull_pdf'.

 -- Function: gsl::ran::gumbel1_pdf x a b
     implements `gsl_ran_gumbel1_pdf'.

 -- Function: gsl::ran::gumbel2_pdf x a b
     implements `gsl_ran_gumbel2_pdf'.

 -- Function: gsl::ran::dirichlet_pdf alpha::matrix theta::matrix
     implements `gsl_ran_dirichlet_pdf'.

 -- Function: gsl::ran::dirichlet_lnpdf alpha::matrix theta::matrix
     implements `gsl_ran_dirichlet_lnpdf'.

 -- Function: gsl::ran::discrete_preproc p::matrix
     implements `gsl_ran_discrete_preproc' without the `K' parameter.

 -- Function: gsl::ran::discrete_pdf k::int p::pointer
     implements `gsl_ran_discrete_pdf' without the `K' parameter.

 -- Function: gsl::ran::discrete_free p::pointer
     implements `gsl_ran_discrete_free'

 -- Function: gsl::ran::poisson_pdf k::int mu
     implements `gsl_ran_poisson_pdf'.

 -- Function: gsl::ran::bernoulli_pdf k::int p
     implements `gsl_ran_bernoulli_pdf'.

 -- Function: gsl::ran::binomial_pdf k::int p n::int
     implements `gsl_ran_binomial_pdf'.

 -- Function: gsl::ran::multinomial_pdf p::matrix n::matrix
     implements `gsl_ran_multinomial_pdf'.

 -- Function: gsl::ran::multinomial_lnpdf p::matrix n::matrix
     implements `gsl_ran_multinomial_lnpdf'.

 -- Function: gsl::ran::negative_binomial_pdf k::int p n
     implements `gsl_ran_negative_binomial_pdf'.

 -- Function: gsl::ran::pascal_pdf k::int p n::int
     implements `gsl_ran_pascal_pdf'.

 -- Function: gsl::ran::geometric_pdf k::int p
     implements `gsl_ran_geometric_pdf'.

 -- Function: gsl::ran::hypergeometric_pdf k::int n1::int n2::int t::int
     implements `gsl_ran_hypergeometric_pdf'.

 -- Function: gsl::ran::logarithmic_pdf k::int p
     implements `gsl_ran_logarithmic_pdf'.

 -- Function: gsl::cdf::ugaussian_P x
     implements `gsl_cdf_ugaussian_P'.

 -- Function: gsl::cdf::ugaussian_Q x
     implements `gsl_cdf_ugaussian_Q'.

 -- Function: gsl::cdf::ugaussian_Pinv p
     implements `gsl_cdf_ugaussian_Pinv'.

 -- Function: gsl::cdf::ugaussian_Qinv q
     implements `gsl_cdf_ugaussian_Qinv'.

 -- Function: gsl::cdf::gaussian_P x sigma
     implements `gsl_cdf_gaussian_P'.

 -- Function: gsl::cdf::gaussian_Q x sigma
     implements `gsl_cdf_gaussian_Q'.

 -- Function: gsl::cdf::gaussian_Pinv p sigma
     implements `gsl_cdf_gaussian_Pinv'.

 -- Function: gsl::cdf::guassian_Qinv q sigma
     implements `gsl_cdf_gaussian_Qinv'.

 -- Function: gsl::cdf::exponential_P x mu
     implements `gsl_cdf_exponential_P'.

 -- Function: gsl::cdf::exponential_Q x mu
     implements `gsl_cdf_exponential_Q'.

 -- Function: gsl::cdf::exponential_Pinv p mu
     implements `gsl_cdf_exponential_Pinv'.

 -- Function: gsl::cdf::exponential_Qinv q mu
     implements `gsl_cdf_exponential_Qinv'.

 -- Function: gsl::cdf::laplace_P x a
     implements `gsl_cdf_laplace_P'.

 -- Function: gsl::cdf::laplace_Q x a
     implements `gsl_cdf_laplace_Q'.

 -- Function: gsl::cdf::laplace_Pinv p a
     implements `gsl_cdf_laplace_Pinv'.

 -- Function: gsl::cdf::laplace_Qinv q a
     implements `gsl_cdf_laplace_Qinv'.

 -- Function: gsl::cdf::exppow_P x a b
     implements `gsl_cdf_exppow_P'.

 -- Function: gsl::cdf::exppow_Q x a b
     implements `gsl_cdf_exppow_Q'.

 -- Function: gsl::cdf::cauchy_P x a
     implements `gsl_cdf_cauchy_P'.

 -- Function: gsl::cdf::cauchy_Q x a
     implements `gsl_cdf_cauchy_Q'.

 -- Function: gsl::cdf::cauchy_Pinv p a
     implements `gsl_cdf_cauchy_Pinv'.

 -- Function: gsl::cdf::cauchy_Qinv q a
     implements `gsl_cdf_cauchy_Qinv'.

 -- Function: gsl::cdf::rayleigh_P x sigma
     implements `gsl_cdf_rayleigh_P'.

 -- Function: gsl::cdf::rayleigh_Q x sigma
     implements `gsl_cdf_rayleigh_Q'.

 -- Function: gsl::cdf::rayleigh_Pinv p sigma
     implements `gsl_cdf_rayleigh_Pinv'.

 -- Function: gsl::cdf::rayleigh_Qinv q sigma
     implements `gsl_cdf_rayleigh_Qinv'.

 -- Function: gsl::cdf::gamma_P x a b
     implements `gsl_cdf_gamma_P'.

 -- Function: gsl::cdf::gamma_Q x a b
     implements `gsl_cdf_gamMa_Q'.

 -- Function: gsl::cdf::gamma_Pinv p a b
     implements `gsl_cdf_gamma_Pinv'.

 -- Function: gsl::cdf::gamma_Qinv q a b
     implements `gsl_cdf_gamma_Qinv'.

 -- Function: gsl::cdf::flat_P x a b
     implements `gsl_cdf_flat_P'.

 -- Function: gsl::cdf::flat_Q x a b
     implements `gsl_cdf_flat_Q'.

 -- Function: gsl::cdf::flat_Pinv p a b
     implements `gsl_cdf_flat_Pinv'.

 -- Function: gsl::cdf::flat_Qinv q a b
     implements `gsl_cdf_flat_Qinv'.

 -- Function: gsl::cdf::lognormal_P x zeta sigma
     implements `gsl_cdf_lognormal_P'.

 -- Function: gsl::cdf::lognormal_Q x zeta sigma
     implements `gsl_cdf_lognormal_Q'.

 -- Function: gsl::cdf::lognormal_Pinv p zeta sigma
     implements `gsl_cdf_lognormal_Pinv'.

 -- Function: gsl::cdf::lognormal_Qinv q zeta sigma
     implements `gsl_cdf_lognormal_Qinv'.

 -- Function: gsl::cdf::chisq_P x nu
     implements `gsl_cdf_chisq_P'.

 -- Function: gsl::cdf::chisq_Q x nu
     implements `gsl_cdf_chisq_Q'.

 -- Function: gsl::cdf::chisq_Pinv p nu
     implements `gsl_cdf_chisq_Pinv'.

 -- Function: gsl::cdf::chisq_Qinv q nu
     implements `gsl_cdf_chisq_Qinv'.

 -- Function: gsl::cdf::fdist_P x nu1 nu2
     implements `gsl_cdf_fdist_P'.

 -- Function: gsl::cdf::fdist_Q x nu1 nu2
     implements `gsl_cdf_fdist_Q'.

 -- Function: gsl::cdf::fdist_Pinv p nu1 nu2
     implements `gsl_cdf_fdist_Pinv'.

 -- Function: gsl::cdf::fdist_Qinv q nu1 nu2
     implements `gsl_cdf_fdist_Qinv'.

 -- Function: gsl::cdf::tdist_P x nu
     implements `gsl_cdf_tdist_P'.

 -- Function: gsl::cdf::tdist_Q x nu
     implements `gsl_cdf_tdist_Q'.

 -- Function: gsl::cdf::tdist_Pinv p nu
     implements `gsl_cdf_tdist_Pinv'.

 -- Function: gsl::cdf::tdist_Qinv q nu
     implements `gsl_cdf_tdist_Qinv'.

 -- Function: gsl::cdf::beta_P x a b
     implements `gsl_cdf_beta_P'.

 -- Function: gsl::cdf::beta_Q x a b
     implements `gsl_cdf_beta_Q'.

 -- Function: gsl::cdf::beta_Pinv p a b
     implements `gsl_cdf_beta_Pinv'.

 -- Function: gsl::cdf::beta_Qinv q a b
     implements `gsl_cdf_beta_Qinv'.

 -- Function: gsl::cdf::logistic_P x a
     implements `gsl_cdf_logistic_P'.

 -- Function: gsl::cdf::logistic_Q x a
     implements `gsl_cdf_logistic_Q'.

 -- Function: gsl::cdf::logistic_Pinv p a
     implements `gsl_cdf_logistic_Pinv'.

 -- Function: gsl::cdf::logistic_Qinv q a
     implements `gsl_cdf_logistic_Qinv'.

 -- Function: gsl::cdf::pareto_P x a b
     implements `gsl_cdf_pareto_P'.

 -- Function: gsl::cdf::pareto_Q x a b
     implements `gsl_cdf_pareto_Q'.

 -- Function: gsl::cdf::pareto_Pinv p a b
     implements `gsl_cdf_pareto_Pinv'.

 -- Function: gsl::cdf::pareto_Qinv q a b
     implements `gsl_cdf_pareto_Qinv'.

 -- Function: gsl::cdf::weibull_P x a b
     implements `gsl_cdf_weibull_P'.

 -- Function: gsl::cdf::weibull_Q x a b
     implements `gsl_cdf_weibull_Q'.

 -- Function: gsl::cdf::weibull_Pinv p a b
     implements `gsl_cdf_weibull_Pinv'.

 -- Function: gsl::cdf::weibull_Qinv q a b
     implements `gsl_cdf_weibull_Qinv'.

 -- Function: gsl::cdf::gumbel1_P x a b
     implements `gsl_cdf_gumbel1_P'.

 -- Function: gsl::cdf::gumbel1_Q x a b
     implements `gsl_cdf_gumbel1_Q'.

 -- Function: gsl::cdf::gumbel1_Pinv p a b
     implements `gsl_cdf_gumbel1_Pinv'.

 -- Function: gsl::cdf::gumbel1_Qinv q a b
     implements `gsl_cdf_gumbel1_Qinv'.

 -- Function: gsl::cdf::gumbel2_P x a b
     implements `gsl_cdf_gumbel2_P'.

 -- Function: gsl::cdf::gumbel2_Q x a b
     implements `gsl_cdf_gumbel2_Q'.

 -- Function: gsl::cdf::gumbel2_Pinv p a b
     implements `gsl_cdf_gumbel2_Pinv'.

 -- Function: gsl::cdf::gumbel2_Qinv q a b
     implements `gsl_cdf_gumbel2_Qinv'.

 -- Function: gsl::cdf::poisson_P k::int mu
     implements `gsl_cdf_poisson_P'.

 -- Function: gsl::cdf::poisson_Q k::int mu
     implements `gsl_cdf_poisson_Q'.

 -- Function: gsl::cdf::binomial_P k::int p n::int
     implements `gsl_cdf_binomial_P'.

 -- Function: gsl::cdf::binomial_Q k::int q n::int
     implements `gsl_cdf_binomial_Q'.

 -- Function: gsl::cdf::negative_binomial_P k::int p n
     implements `gsl_cdf_negative_binomial_P'.

 -- Function: gsl::cdf::negative_binomial_Q k::int p n
     implements `gsl_cdf_negative_binomial_Q'.

 -- Function: gsl::cdf::pascal_P k::int p n::int
     implements `gsl_cdf_pascal_P'.

 -- Function: gsl::cdf::pascal_Q k::int p n::int
     implements `gsl_cdf_pascal_Q'.

 -- Function: gsl::cdf::geometric_P k::int p
     implements `gsl_cdf_geometric_P'.

 -- Function: gsl::cdf::geometric_Q k::int p
     implements `gsl_cdf_geometric_Q'.

 -- Function: gsl::cdf::hypergeometric_P k::int n1::int n2::int t::int
     implements `gsl_cdf_hypergeometric_P'.

 -- Function: gsl::cdf::hypergeometric_Q k::int n1::int n2::int t::int
     implements `gsl_cdf_hypergeometric_Q'.


File: pure-gsl.info,  Node: Examples<13>,  Prev: Routines<4>,  Up: Random Number Distributions

6.2 Examples
============

The following illustrates the use of each function in the `randist'
module.  The pdf functions are illustrated first.

    > using gsl::stats;
    > using namespace gsl::ran;
    > ugaussian_pdf 1.2;
    0.194186054983213
    > gaussian_pdf (-1.3) 1.5;
    0.182690978264686
    > gaussian_tail_pdf 2.0 1.0 1.5;
    0.433042698395299
    > ugaussian_tail_pdf 2.0 1.0;
    0.34030367841782
    > bivariate_gaussian_pdf 1.2 0.9 1.0 1.0 0.95;
    0.184646843689817
    > exponential_pdf 1.0 0.5;
    0.270670566473225
    > laplace_pdf 1.5 2.0;
    0.118091638185254
    > exppow_pdf 0.0 1.0 1.5;
    0.553866083716236
    > cauchy_pdf (-1.0) 1.0;
    0.159154943091895
    > rayleigh_pdf 2.5 1.0;
    0.109842334058519
    > rayleigh_tail_pdf 1.5 1.0 1.0;
    0.802892142778485
    > landau_pdf 1.1;
    0.140968737919623
    > gamma_pdf 1.0 1.0 1.5;
    0.342278079355061
    > flat_pdf 1.0 0.5 2.5;
    0.5
    > lognormal_pdf 0.01 0.0 1.0;
    0.000990238664959182
    > chisq_pdf 1.0 2.0;
    0.303265329856317
    > fdist_pdf 0.5 3.0 2.0;
    0.480970043785452
    > tdist_pdf 0.1 10.0;
    0.386975225815181
    > beta_pdf 0.5 4.0 1.0;
    0.499999999999999
    > logistic_pdf (-1.0) 2.0;
    0.117501856100797
    > pareto_pdf 0.01 3.0 2.0;
    0.0
    > weibull_pdf  0.01 1.0 1.0;
    0.990049833749168
    > gumbel1_pdf 0.01 1.0 1.0;
    0.367861108816436
    > gumbel2_pdf 0.01 1.0 1.0;
    3.72007597602084e-40
    > dirichlet_pdf {0.1,0.2,0.8} {2.0,2.0,2.0};
    0.00501316294425874
    > dirichlet_lnpdf {0.1,0.2,0.8} {2.0,2.0,2.0};
    -5.29568823688856
    > poisson_pdf 4 0.4;
    0.000715008049104682
    > bernoulli_pdf 1 0.7;
    0.7
    > binomial_pdf 3 0.5 9;
    0.1640625
    > multinomial_pdf {0.1,0.2,0.7} {2,2,2};
    0.0
    > multinomial_lnpdf {0.1,0.2,0.7} {2,2,2};
    -1728120799.71174
    > negative_binomial_pdf 10 0.5 3.5;
    0.0122430486923836
    > pascal_pdf 10 0.5 3;
    0.00805664062499999
    > geometric_pdf 5 0.4;
    0.05184
    > hypergeometric_pdf 1 5 20 3;
    0.413043478260872
    > logarithmic_pdf 10 0.7;
    0.00234619293712492
    > test_discrete
    >   = v
    >     when
    >       px = discrete_preproc {0.1,0.3,0.4};
    >       v = discrete_pdf 0 px +
    >           discrete_pdf 1 px +
    >           discrete_pdf 2 px;
    >       _ = discrete_free px
    >     end;
    > test_discrete;
    1.0

The cumulative distribution functions are shown.

    > using namespace gsl::cdf;
    > ugaussian_P  (-1.3);
    0.0968004845856103
    > ugaussian_Q  (-1.3);
    0.90319951541439
    > ugaussian_Pinv  0.84;
    0.994457883209753
    > ugaussian_Qinv  0.84;
    -0.994457883209753
    > gaussian_P  (1.3)  1.5;
    0.806937662858093
    > gaussian_Q  (1.3)  1.5;
    0.193062337141907
    > gaussian_Pinv  0.4  5.0;
    -1.266735515679
    > gaussian_Qinv  0.4 5.0;
    1.266735515679
    > exponential_P  1.0  0.5;
    0.864664716763387
    > exponential_Q  1.0  0.5;
    0.135335283236613
    > exponential_Pinv  0.6  0.5;
    0.458145365937077
    > exponential_Qinv  0.6  0.5;
    0.255412811882995
    > laplace_P  1.5  2.0;
    0.763816723629493
    > laplace_Q  1.5  2.0;
    0.236183276370507
    > laplace_Pinv  0.6  2.0;
    0.446287102628419
    > laplace_Qinv  0.4  2.0;
    0.446287102628419
    > exppow_P  0.0  1.0  2.5;
    0.5
    > exppow_Q  0.0  1.0  0.5;
    0.5
    > cauchy_P  (-1.0)  1.0;
    0.25
    > cauchy_Q  (-1.0)  1.0;
    0.75
    > cauchy_Pinv  0.75  1.0;
    1.0
    > cauchy_Qinv  0.25  1.0;
    1.0
    > rayleigh_P  1.5  2.0;
    0.245160398010993
    > rayleigh_Q  0.5  1.0;
    0.882496902584595
    > rayleigh_Pinv  0.5  1.0;
    1.17741002251547
    > rayleigh_Qinv  0.5  1.0;
    1.17741002251547
    > gamma_P  1.0  1.0  3.0;
    0.283468689426211
    > gamma_Q  1.0  1.0  3.0;
    0.716531310573789
    > gamma_Pinv  0.5  1.0  1.0;
    0.693147180559945
    > gamma_Qinv  0.5  1.0  1.0;
    0.693147180559945
    > flat_P  2.0  1.2  4.8;
    0.222222222222222
    > flat_Q  2.0  1.2  4.8;
    0.777777777777778
    > flat_Pinv  0.2  0.5  2.5;
    0.9
    > flat_Qinv  0.2  0.5  2.5;
    2.1
    > lognormal_P  0.01  0.0  1.0;
    2.06064339597172e-06
    > lognormal_Q  0.01  0.0  1.0;
    0.999997939356604
    > lognormal_Pinv  0.1  0.0  1.0;
    0.27760624185201
    > lognormal_Qinv  0.1  0.0  1.0;
    3.60222447927916
    > chisq_P  1.0  2.0;
    0.393469340287367
    > chisq_Q  1.0  2.0;
    0.606530659712633
    > chisq_Pinv  0.5  2.0;
    0.221199216928595
    > chisq_Qinv  0.5  2.0;
    1.38629436111989
    > fdist_P  1.0  3.0  2.0;
    0.46475800154489
    > fdist_Q  1.0  3.0  2.0;
    0.53524199845511
    > fdist_Pinv  0.5  3.0  2.0;
    1.13494292261288
    > fdist_Qinv  0.5  3.0  2.0;
    1.13494292261288
    > tdist_P  2.1  10.0;
    0.968961377898891
    > tdist_Q  (-2.1)  10.0;
    0.968961377898891
    > tdist_Pinv  0.68  10.0;
    0.482264205919689
    > tdist_Qinv  0.68  10.0;
    -0.482264205919689
    > beta_P  0.75  2.0  2.0;
    0.84375
    > beta_Q  0.75  2.0  2.0;
    0.15625
    > beta_Pinv  0.75  2.0  2.0;
    0.673648177666931
    > beta_Qinv  0.25  2.0  2.0;
    0.673648177666931
    > logistic_P  (-1.0)  2.0;
    1
    > logistic_Q  (-1.0)  2.0;
    0.622459331201855
    > logistic_Pinv  0.75  1.0;
    1.09861228866811
    > logistic_Qinv  0.25  1.0;
    1.09861228866811
    > pareto_P  2.01  3.0  2.0;
    0.0148512406901899
    > pareto_Q  2.01  3.0  2.0;
    0.98514875930981
    > pareto_Pinv  0.1  3.0  2.0;
    2.07148833730257
    > pareto_Qinv  0.1  3.0  2.0;
    4.30886938006377
    > weibull_P  1.01  1.0  2.0;
    0.639441117518024
    > weibull_Q  1.01  2.0  3.0;
    0.879160657465162
    > weibull_Pinv  0.1  1.0  2.0;
    0.324592845974501
    > weibull_Qinv  0.1  1.0  2.0;
    1.51742712938515
    > gumbel1_P  1.01  1.0  1.0;
    0.694739044426344
    > gumbel1_Q  1.01  1.0  1.0;
    0.305260955573656
    > gumbel1_Pinv  0.1  1.0  1.0;
    -0.834032445247956
    > gumbel1_Qinv  0.1  1.0  1.0;
    2.25036732731245
    > gumbel2_P  1.01  1.0  1.0;
    0.371539903071873
    > gumbel2_Q  1.01  1.0  1.0;
    0.628460096928127
    > gumbel2_Pinv  0.1  1.0  1.0;
    0.434294481903252
    > gumbel2_Qinv  0.1  1.0  1.0;
    9.4912215810299
    > poisson_P  4  0.4;
    0.999938756672898
    > poisson_Q  4  0.6;
    0.000394486018340255
    > binomial_P  3  0.5  10;
    0.171874999999999
    > binomial_Q  3  0.5  10;
    0.828125000000001
    > negative_binomial_P  10  0.5  3.0;
    0.98876953125
    > negative_binomial_Q  10  0.5  3.0;
    0.01123046875
    > pascal_P  10  0.5  3;
    0.98876953125
    > pascal_Q  10  0.5  3;
    0.01123046875
    > geometric_P  5  0.4;
    0.92224
    > geometric_Q  5  0.6;
    0.01024
    > hypergeometric_P  1  5  20  3;
    0.908695652173913
    > hypergeometric_Q  1  5  20  3;
    0.0913043478260873



File: pure-gsl.info,  Node: Sorting,  Next: Index,  Prev: Random Number Distributions,  Up: Top

7 Sorting
*********

This module is loaded via the command `using gsl::sort' and provides
Pure wrappers for the GSL sorting routines found in Chapter 11 of the
GSL manual,

  <http://www.gnu.org/software/gsl/manual/html_node/Sorting.html>.

* Menu:

* Routines: Routines<5>.
* Examples: Examples<14>.


File: pure-gsl.info,  Node: Routines<5>,  Next: Examples<14>,  Up: Sorting

7.1 Routines
============

 -- Function: gsl::sort_vector m::matrix
     implements `gsl_sort' and `gsl_sort_int' without `stride' and `n'
     parameters.

 -- Function: gsl::sort_vector_index m::matrix
     implements `gsl_sort_index' and `gsl_sort_int_index' without
     `stride' and `n' parameters.


File: pure-gsl.info,  Node: Examples<14>,  Prev: Routines<5>,  Up: Sorting

7.2 Examples
============

Usage of each library routine is illustrated below.

    > using gsl::sort;
    > using namespace gsl;
    > sort_vector {0,3,2,4,5};
    {0,2,3,4,5}
    > sort_vector_index {0.0,1.0,5.0,2.0,8.0,0.0};
    {5,0,1,3,2,4}



File: pure-gsl.info,  Node: Index,  Prev: Sorting,  Up: Top

Index
*****

 [index ]
* Menu:

* * infix function:                      Matrix Operators and Functions.
                                                              (line  30)
* + infix function:                      Matrix Operators and Functions.
                                                              (line  10)
* - infix function:                      Matrix Operators and Functions.
                                                              (line  21)
* - prefix function:                     Matrix Operators and Functions.
                                                              (line  17)
* / infix function:                      Matrix Operators and Functions.
                                                              (line  40)
* << infix function:                     Matrix Operators and Functions.
                                                              (line 102)
* >> infix function:                     Matrix Operators and Functions.
                                                              (line 110)
* \ infix function:                      Matrix Operators and Functions.
                                                              (line  54)
* ^ infix function:                      Matrix Operators and Functions.
                                                              (line  88)
* and infix function:                    Matrix Operators and Functions.
                                                              (line 118)
* div infix function:                    Matrix Operators and Functions.
                                                              (line  57)
* gsl cdf beta_P function:               Routines<4>.         (line 273)
* gsl cdf beta_Pinv function:            Routines<4>.         (line 279)
* gsl cdf beta_Q function:               Routines<4>.         (line 276)
* gsl cdf beta_Qinv function:            Routines<4>.         (line 282)
* gsl cdf binomial_P function:           Routines<4>.         (line 351)
* gsl cdf binomial_Q function:           Routines<4>.         (line 354)
* gsl cdf cauchy_P function:             Routines<4>.         (line 177)
* gsl cdf cauchy_Pinv function:          Routines<4>.         (line 183)
* gsl cdf cauchy_Q function:             Routines<4>.         (line 180)
* gsl cdf cauchy_Qinv function:          Routines<4>.         (line 186)
* gsl cdf chisq_P function:              Routines<4>.         (line 237)
* gsl cdf chisq_Pinv function:           Routines<4>.         (line 243)
* gsl cdf chisq_Q function:              Routines<4>.         (line 240)
* gsl cdf chisq_Qinv function:           Routines<4>.         (line 246)
* gsl cdf exponential_P function:        Routines<4>.         (line 147)
* gsl cdf exponential_Pinv function:     Routines<4>.         (line 153)
* gsl cdf exponential_Q function:        Routines<4>.         (line 150)
* gsl cdf exponential_Qinv function:     Routines<4>.         (line 156)
* gsl cdf exppow_P function:             Routines<4>.         (line 171)
* gsl cdf exppow_Q function:             Routines<4>.         (line 174)
* gsl cdf fdist_P function:              Routines<4>.         (line 249)
* gsl cdf fdist_Pinv function:           Routines<4>.         (line 255)
* gsl cdf fdist_Q function:              Routines<4>.         (line 252)
* gsl cdf fdist_Qinv function:           Routines<4>.         (line 258)
* gsl cdf flat_P function:               Routines<4>.         (line 213)
* gsl cdf flat_Pinv function:            Routines<4>.         (line 219)
* gsl cdf flat_Q function:               Routines<4>.         (line 216)
* gsl cdf flat_Qinv function:            Routines<4>.         (line 222)
* gsl cdf gamma_P function:              Routines<4>.         (line 201)
* gsl cdf gamma_Pinv function:           Routines<4>.         (line 207)
* gsl cdf gamma_Q function:              Routines<4>.         (line 204)
* gsl cdf gamma_Qinv function:           Routines<4>.         (line 210)
* gsl cdf gaussian_P function:           Routines<4>.         (line 135)
* gsl cdf gaussian_Pinv function:        Routines<4>.         (line 141)
* gsl cdf gaussian_Q function:           Routines<4>.         (line 138)
* gsl cdf geometric_P function:          Routines<4>.         (line 369)
* gsl cdf geometric_Q function:          Routines<4>.         (line 372)
* gsl cdf guassian_Qinv function:        Routines<4>.         (line 144)
* gsl cdf gumbel1_P function:            Routines<4>.         (line 321)
* gsl cdf gumbel1_Pinv function:         Routines<4>.         (line 327)
* gsl cdf gumbel1_Q function:            Routines<4>.         (line 324)
* gsl cdf gumbel1_Qinv function:         Routines<4>.         (line 330)
* gsl cdf gumbel2_P function:            Routines<4>.         (line 333)
* gsl cdf gumbel2_Pinv function:         Routines<4>.         (line 339)
* gsl cdf gumbel2_Q function:            Routines<4>.         (line 336)
* gsl cdf gumbel2_Qinv function:         Routines<4>.         (line 342)
* gsl cdf hypergeometric_P function:     Routines<4>.         (line 375)
* gsl cdf hypergeometric_Q function:     Routines<4>.         (line 378)
* gsl cdf laplace_P function:            Routines<4>.         (line 159)
* gsl cdf laplace_Pinv function:         Routines<4>.         (line 165)
* gsl cdf laplace_Q function:            Routines<4>.         (line 162)
* gsl cdf laplace_Qinv function:         Routines<4>.         (line 168)
* gsl cdf logistic_P function:           Routines<4>.         (line 285)
* gsl cdf logistic_Pinv function:        Routines<4>.         (line 291)
* gsl cdf logistic_Q function:           Routines<4>.         (line 288)
* gsl cdf logistic_Qinv function:        Routines<4>.         (line 294)
* gsl cdf lognormal_P function:          Routines<4>.         (line 225)
* gsl cdf lognormal_Pinv function:       Routines<4>.         (line 231)
* gsl cdf lognormal_Q function:          Routines<4>.         (line 228)
* gsl cdf lognormal_Qinv function:       Routines<4>.         (line 234)
* gsl cdf negative_binomial_P function:  Routines<4>.         (line 357)
* gsl cdf negative_binomial_Q function:  Routines<4>.         (line 360)
* gsl cdf pareto_P function:             Routines<4>.         (line 297)
* gsl cdf pareto_Pinv function:          Routines<4>.         (line 303)
* gsl cdf pareto_Q function:             Routines<4>.         (line 300)
* gsl cdf pareto_Qinv function:          Routines<4>.         (line 306)
* gsl cdf pascal_P function:             Routines<4>.         (line 363)
* gsl cdf pascal_Q function:             Routines<4>.         (line 366)
* gsl cdf poisson_P function:            Routines<4>.         (line 345)
* gsl cdf poisson_Q function:            Routines<4>.         (line 348)
* gsl cdf rayleigh_P function:           Routines<4>.         (line 189)
* gsl cdf rayleigh_Pinv function:        Routines<4>.         (line 195)
* gsl cdf rayleigh_Q function:           Routines<4>.         (line 192)
* gsl cdf rayleigh_Qinv function:        Routines<4>.         (line 198)
* gsl cdf tdist_P function:              Routines<4>.         (line 261)
* gsl cdf tdist_Pinv function:           Routines<4>.         (line 267)
* gsl cdf tdist_Q function:              Routines<4>.         (line 264)
* gsl cdf tdist_Qinv function:           Routines<4>.         (line 270)
* gsl cdf ugaussian_P function:          Routines<4>.         (line 123)
* gsl cdf ugaussian_Pinv function:       Routines<4>.         (line 129)
* gsl cdf ugaussian_Q function:          Routines<4>.         (line 126)
* gsl cdf ugaussian_Qinv function:       Routines<4>.         (line 132)
* gsl cdf weibull_P function:            Routines<4>.         (line 309)
* gsl cdf weibull_Pinv function:         Routines<4>.         (line 315)
* gsl cdf weibull_Q function:            Routines<4>.         (line 312)
* gsl cdf weibull_Qinv function:         Routines<4>.         (line 318)
* gsl fit linear function:               Routines<2>.         (line   6)
* gsl fit linear_est function:           Routines<2>.         (line  16)
* gsl fit module:                        Least-Squares Fitting.
                                                              (line   6)
* gsl fit mul function:                  Routines<2>.         (line  21)
* gsl fit mul_est function:              Routines<2>.         (line  31)
* gsl fit wlinear function:              Routines<2>.         (line  11)
* gsl fit wmul function:                 Routines<2>.         (line  26)
* gsl matrix ceye function:              Matrix Creation.     (line  74)
* gsl matrix cones function:             Matrix Creation.     (line  54)
* gsl matrix czeros function:            Matrix Creation.     (line  30)
* gsl matrix eye function:               Matrix Creation.     (line  62)
* gsl matrix ieye function:              Matrix Creation.     (line  68)
* gsl matrix iones function:             Matrix Creation.     (line  46)
* gsl matrix izeros function:            Matrix Creation.     (line  22)
* gsl matrix module:                     Matrices.            (line   6)
* gsl matrix ones function:              Matrix Creation.     (line  38)
* gsl matrix pinv function:              Singular Value Decomposition.
                                                              (line  34)
* gsl matrix svd function:               Singular Value Decomposition.
                                                              (line  17)
* gsl matrix svd_jacobi function:        Singular Value Decomposition.
                                                              (line  24)
* gsl matrix svd_mod function:           Singular Value Decomposition.
                                                              (line  20)
* gsl matrix svd_solve function:         Singular Value Decomposition.
                                                              (line  28)
* gsl matrix zeros function:             Matrix Creation.     (line  14)
* gsl module:                            Top.                 (line   6)
* gsl poly complex_solve function:       Routines.            (line  45)
* gsl poly complex_solve_cubic function: Routines.            (line  40)
* gsl poly complex_solve_quadratic function: Routines.        (line  30)
* gsl poly dd_eval function:             Routines.            (line  18)
* gsl poly dd_init function:             Routines.            (line  15)
* gsl poly dd_taylor function:           Routines.            (line  21)
* gsl poly eval function:                Routines.            (line   6)
* gsl poly module:                       Polynomials.         (line   6)
* gsl poly solve_cubic function:         Routines.            (line  35)
* gsl poly solve_quadratic function:     Routines.            (line  25)
* gsl ran bernoulli_pdf function:        Routines<4>.         (line  96)
* gsl ran beta_pdf function:             Routines<4>.         (line  60)
* gsl ran binomial_pdf function:         Routines<4>.         (line  99)
* gsl ran bivariate_gaussian_pdf function: Routines<4>.       (line  18)
* gsl ran cauchy_pdf function:           Routines<4>.         (line  30)
* gsl ran chisq_pdf function:            Routines<4>.         (line  51)
* gsl ran dirichlet_lnpdf function:      Routines<4>.         (line  81)
* gsl ran dirichlet_pdf function:        Routines<4>.         (line  78)
* gsl ran discrete_free function:        Routines<4>.         (line  90)
* gsl ran discrete_pdf function:         Routines<4>.         (line  87)
* gsl ran discrete_preproc function:     Routines<4>.         (line  84)
* gsl ran exponential_pdf function:      Routines<4>.         (line  21)
* gsl ran exppow_pdf function:           Routines<4>.         (line  27)
* gsl ran fdist_pdf function:            Routines<4>.         (line  54)
* gsl ran flat_pdf function:             Routines<4>.         (line  45)
* gsl ran gamma_pdf function:            Routines<4>.         (line  42)
* gsl ran gaussian_pdf function:         Routines<4>.         (line   9)
* gsl ran gaussian_tail_pdf function:    Routines<4>.         (line  12)
* gsl ran geometric_pdf function:        Routines<4>.         (line 114)
* gsl ran gumbel1_pdf function:          Routines<4>.         (line  72)
* gsl ran gumbel2_pdf function:          Routines<4>.         (line  75)
* gsl ran hypergeometric_pdf function:   Routines<4>.         (line 117)
* gsl ran landau_pdf function:           Routines<4>.         (line  39)
* gsl ran laplace_pdf function:          Routines<4>.         (line  24)
* gsl ran logarithmic_pdf function:      Routines<4>.         (line 120)
* gsl ran logistic_pdf function:         Routines<4>.         (line  63)
* gsl ran lognormal_pdf function:        Routines<4>.         (line  48)
* gsl ran multinomial_lnpdf function:    Routines<4>.         (line 105)
* gsl ran multinomial_pdf function:      Routines<4>.         (line 102)
* gsl ran negative_binomial_pdf function: Routines<4>.        (line 108)
* gsl ran pareto_pdf function:           Routines<4>.         (line  66)
* gsl ran pascal_pdf function:           Routines<4>.         (line 111)
* gsl ran poisson_pdf function:          Routines<4>.         (line  93)
* gsl ran rayleigh_pdf function:         Routines<4>.         (line  33)
* gsl ran rayleigh_tail_pdf function:    Routines<4>.         (line  36)
* gsl ran tdist_pdf function:            Routines<4>.         (line  57)
* gsl ran ugaussian_pdf function:        Routines<4>.         (line   6)
* gsl ran ugaussian_tail_pdf function:   Routines<4>.         (line  15)
* gsl ran weibull_pdf function:          Routines<4>.         (line  69)
* gsl randist module:                    Random Number Distributions.
                                                              (line   6)
* gsl sf airy_Ai function:               Airy Functions.      (line   6)
* gsl sf airy_Ai_deriv function:         Airy Functions.      (line  46)
* gsl sf airy_Ai_deriv_e function:       Airy Functions.      (line  51)
* gsl sf airy_Ai_deriv_scaled function:  Airy Functions.      (line  56)
* gsl sf airy_Ai_deriv_scaled_e function: Airy Functions.     (line  61)
* gsl sf airy_Ai_e function:             Airy Functions.      (line  11)
* gsl sf airy_Ai_scaled function:        Airy Functions.      (line  16)
* gsl sf airy_Ai_scaled_e function:      Airy Functions.      (line  21)
* gsl sf airy_Bi function:               Airy Functions.      (line  26)
* gsl sf airy_Bi_deriv function:         Airy Functions.      (line  66)
* gsl sf airy_Bi_deriv_e function:       Airy Functions.      (line  71)
* gsl sf airy_Bi_deriv_scaled function:  Airy Functions.      (line  76)
* gsl sf airy_Bi_deriv_scaled_e function: Airy Functions.     (line  81)
* gsl sf airy_Bi_e function:             Airy Functions.      (line  31)
* gsl sf airy_Bi_scaled function:        Airy Functions.      (line  36)
* gsl sf airy_Bi_scaled_e function:      Airy Functions.      (line  41)
* gsl sf airy_zero_Ai function:          Airy Functions.      (line  86)
* gsl sf airy_zero_Ai_deriv function:    Airy Functions.      (line  98)
* gsl sf airy_zero_Ai_deriv_e function:  Airy Functions.      (line 101)
* gsl sf airy_zero_Ai_e function:        Airy Functions.      (line  89)
* gsl sf airy_zero_Bi function:          Airy Functions.      (line  92)
* gsl sf airy_zero_Bi_deriv function:    Airy Functions.      (line 104)
* gsl sf airy_zero_Bi_deriv_e function:  Airy Functions.      (line 107)
* gsl sf airy_zero_Bi_e function:        Airy Functions.      (line  95)
* gsl sf bessel_I0 function:             Bessel Functions.    (line  48)
* gsl sf bessel_I0_e function:           Bessel Functions.    (line  51)
* gsl sf bessel_i0_scaled function:      Bessel Functions.    (line 189)
* gsl sf bessel_I0_scaled function:      Bessel Functions.    (line  69)
* gsl sf bessel_i0_scaled_e function:    Bessel Functions.    (line 192)
* gsl sf bessel_I0_scaled_e function:    Bessel Functions.    (line  72)
* gsl sf bessel_I1 function:             Bessel Functions.    (line  54)
* gsl sf bessel_I1_e function:           Bessel Functions.    (line  57)
* gsl sf bessel_i1_scaled function:      Bessel Functions.    (line 195)
* gsl sf bessel_I1_scaled function:      Bessel Functions.    (line  75)
* gsl sf bessel_i1_scaled_e function:    Bessel Functions.    (line 198)
* gsl sf bessel_I1_scaled_e function:    Bessel Functions.    (line  78)
* gsl sf bessel_i2_scaled function:      Bessel Functions.    (line 201)
* gsl sf bessel_i2_scaled_e function:    Bessel Functions.    (line 204)
* gsl sf bessel_il_scaled function:      Bessel Functions.    (line 207)
* gsl sf bessel_il_scaled_array function: Bessel Functions.   (line 213)
* gsl sf bessel_il_scaled_e function:    Bessel Functions.    (line 210)
* gsl sf bessel_In function:             Bessel Functions.    (line  60)
* gsl sf bessel_In_array function:       Bessel Functions.    (line  66)
* gsl sf bessel_In_e function:           Bessel Functions.    (line  63)
* gsl sf bessel_In_scaled function:      Bessel Functions.    (line  81)
* gsl sf bessel_In_scaled_array function: Bessel Functions.   (line  87)
* gsl sf bessel_In_scaled_e function:    Bessel Functions.    (line  84)
* gsl sf bessel_Inu function:            Bessel Functions.    (line 258)
* gsl sf bessel_Inu_e function:          Bessel Functions.    (line 261)
* gsl sf bessel_Inu_scaled function:     Bessel Functions.    (line 264)
* gsl sf bessel_Inu_scaled_e function:   Bessel Functions.    (line 267)
* gsl sf bessel_j0 function:             Bessel Functions.    (line 132)
* gsl sf bessel_J0 function:             Bessel Functions.    (line   6)
* gsl sf bessel_j0_e function:           Bessel Functions.    (line 135)
* gsl sf bessel_J0_e function:           Bessel Functions.    (line   9)
* gsl sf bessel_j1 function:             Bessel Functions.    (line 138)
* gsl sf bessel_J1 function:             Bessel Functions.    (line  12)
* gsl sf bessel_j1_e function:           Bessel Functions.    (line 141)
* gsl sf bessel_J1_e function:           Bessel Functions.    (line  15)
* gsl sf bessel_j2 function:             Bessel Functions.    (line 144)
* gsl sf bessel_j2_e function:           Bessel Functions.    (line 147)
* gsl sf bessel_jl function:             Bessel Functions.    (line 150)
* gsl sf bessel_jl_array function:       Bessel Functions.    (line 156)
* gsl sf bessel_jl_e function:           Bessel Functions.    (line 153)
* gsl sf bessel_jl_steed_array function: Bessel Functions.    (line 159)
* gsl sf bessel_Jn function:             Bessel Functions.    (line  18)
* gsl sf bessel_Jn_array function:       Bessel Functions.    (line  24)
* gsl sf bessel_Jn_e function:           Bessel Functions.    (line  21)
* gsl sf bessel_Jnu function:            Bessel Functions.    (line 243)
* gsl sf bessel_Jnu_e function:          Bessel Functions.    (line 246)
* gsl sf bessel_K0 function:             Bessel Functions.    (line  90)
* gsl sf bessel_K0_e function:           Bessel Functions.    (line  93)
* gsl sf bessel_k0_scaled function:      Bessel Functions.    (line 216)
* gsl sf bessel_K0_scaled function:      Bessel Functions.    (line 111)
* gsl sf bessel_k0_scaled_e function:    Bessel Functions.    (line 219)
* gsl sf bessel_K0_scaled_e function:    Bessel Functions.    (line 114)
* gsl sf bessel_K1 function:             Bessel Functions.    (line  96)
* gsl sf bessel_K1_e function:           Bessel Functions.    (line  99)
* gsl sf bessel_k1_scaled function:      Bessel Functions.    (line 222)
* gsl sf bessel_K1_scaled function:      Bessel Functions.    (line 117)
* gsl sf bessel_k1_scaled_e function:    Bessel Functions.    (line 225)
* gsl sf bessel_K1_scaled_e function:    Bessel Functions.    (line 120)
* gsl sf bessel_k2_scaled function:      Bessel Functions.    (line 228)
* gsl sf bessel_k2_scaled_e function:    Bessel Functions.    (line 231)
* gsl sf bessel_kl_scaled function:      Bessel Functions.    (line 234)
* gsl sf bessel_kl_scaled_array function: Bessel Functions.   (line 240)
* gsl sf bessel_kl_scaled_e function:    Bessel Functions.    (line 237)
* gsl sf bessel_Kn function:             Bessel Functions.    (line 102)
* gsl sf bessel_Kn_array function:       Bessel Functions.    (line 108)
* gsl sf bessel_Kn_e function:           Bessel Functions.    (line 105)
* gsl sf bessel_Kn_scaled function:      Bessel Functions.    (line 123)
* gsl sf bessel_Kn_scaled_array function: Bessel Functions.   (line 129)
* gsl sf bessel_Kn_scaled_e function:    Bessel Functions.    (line 126)
* gsl sf bessel_Knu function:            Bessel Functions.    (line 270)
* gsl sf bessel_Knu_e function:          Bessel Functions.    (line 273)
* gsl sf bessel_Knu_scaled function:     Bessel Functions.    (line 282)
* gsl sf bessel_Knu_scaled_e function:   Bessel Functions.    (line 285)
* gsl sf bessel_lnKnu function:          Bessel Functions.    (line 276)
* gsl sf bessel_lnKnu_e function:        Bessel Functions.    (line 279)
* gsl sf bessel_sequence_Jnu_e function: Bessel Functions.    (line 249)
* gsl sf bessel_y0 function:             Bessel Functions.    (line 162)
* gsl sf bessel_Y0 function:             Bessel Functions.    (line  27)
* gsl sf bessel_y0_e function:           Bessel Functions.    (line 165)
* gsl sf bessel_Y0_e function:           Bessel Functions.    (line  30)
* gsl sf bessel_y1 function:             Bessel Functions.    (line 168)
* gsl sf bessel_Y1 function:             Bessel Functions.    (line  33)
* gsl sf bessel_y1_e function:           Bessel Functions.    (line 171)
* gsl sf bessel_Y1_e function:           Bessel Functions.    (line  36)
* gsl sf bessel_y2 function:             Bessel Functions.    (line 174)
* gsl sf bessel_y2_e function:           Bessel Functions.    (line 177)
* gsl sf bessel_yl function:             Bessel Functions.    (line 180)
* gsl sf bessel_yl_array function:       Bessel Functions.    (line 186)
* gsl sf bessel_yl_e function:           Bessel Functions.    (line 183)
* gsl sf bessel_Yn function:             Bessel Functions.    (line  39)
* gsl sf bessel_Yn_array function:       Bessel Functions.    (line  45)
* gsl sf bessel_Yn_e function:           Bessel Functions.    (line  42)
* gsl sf bessel_Ynu function:            Bessel Functions.    (line 252)
* gsl sf bessel_Ynu_e function:          Bessel Functions.    (line 255)
* gsl sf bessel_zero_J0 function:        Bessel Functions.    (line 288)
* gsl sf bessel_zero_J0_e function:      Bessel Functions.    (line 291)
* gsl sf bessel_zero_J1 function:        Bessel Functions.    (line 294)
* gsl sf bessel_zero_J1_e function:      Bessel Functions.    (line 297)
* gsl sf bessel_zero_Jnu function:       Bessel Functions.    (line 300)
* gsl sf bessel_zero_Jnu_e function:     Bessel Functions.    (line 303)
* gsl sf clausen function:               Clausen Functions.   (line   6)
* gsl sf clausen_e function:             Clausen Functions.   (line   9)
* gsl sf coulomb_CL_array function:      Colomb Functions.    (line  40)
* gsl sf coulomb_CL_e function:          Colomb Functions.    (line  37)
* gsl sf coulomb_wave_F_array function:  Colomb Functions.    (line  25)
* gsl sf coulomb_wave_FG_array function: Colomb Functions.    (line  28)
* gsl sf coulomb_wave_FG_e function:     Colomb Functions.    (line  22)
* gsl sf coulomb_wave_FGp_array function: Colomb Functions.   (line  31)
* gsl sf coulomb_wave_sphF_array function: Colomb Functions.  (line  34)
* gsl sf coupling_3j function:           Coupling Coefficients.
                                                              (line   6)
* gsl sf coupling_3j_e function:         Coupling Coefficients.
                                                              (line  10)
* gsl sf coupling_6j function:           Coupling Coefficients.
                                                              (line  14)
* gsl sf coupling_6j_e function:         Coupling Coefficients.
                                                              (line  18)
* gsl sf coupling_9j function:           Coupling Coefficients.
                                                              (line  22)
* gsl sf coupling_9j_e function:         Coupling Coefficients.
                                                              (line  26)
* gsl sf dawson function:                Dawson Function.     (line   6)
* gsl sf dawson_e function:              Dawson Function.     (line   9)
* gsl sf debye_1 function:               Debye Functions.     (line   6)
* gsl sf debye_1_e function:             Debye Functions.     (line   9)
* gsl sf debye_2 function:               Debye Functions.     (line  12)
* gsl sf debye_2_e function:             Debye Functions.     (line  15)
* gsl sf debye_3 function:               Debye Functions.     (line  18)
* gsl sf debye_3_e function:             Debye Functions.     (line  21)
* gsl sf debye_4 function:               Debye Functions.     (line  24)
* gsl sf debye_4_e function:             Debye Functions.     (line  27)
* gsl sf debye_5 function:               Debye Functions.     (line  30)
* gsl sf debye_5_e function:             Debye Functions.     (line  33)
* gsl sf debye_6 function:               Debye Functions.     (line  36)
* gsl sf debye_6_e function:             Debye Functions.     (line  39)
* gsl sf dilog function:                 Dilogarithm.         (line   6)
* gsl sf dilog_e function:               Dilogarithm.         (line  14)
* gsl sf hydrogenicR function:           Colomb Functions.    (line  16)
* gsl sf hydrogenicR_1 function:         Colomb Functions.    (line  10)
* gsl sf hydrogenicR_1_e function:       Colomb Functions.    (line  13)
* gsl sf hydrogenicR_e function:         Colomb Functions.    (line  19)
* gsl sf module:                         Special Functions.   (line   6)
* gsl sf multiply_e function:            Examples<9>.         (line  18)
* gsl sf multiply_err_e function:        Examples<9>.         (line  22)
* gsl sort module:                       Sorting.             (line   6)
* gsl sort_vector function:              Routines<5>.         (line   6)
* gsl sort_vector_index function:        Routines<5>.         (line  10)
* gsl stats absdev function:             Routines<3>.         (line  36)
* gsl stats absdev_m function:           Routines<3>.         (line  39)
* gsl stats correlation function:        Routines<3>.         (line  72)
* gsl stats covariance function:         Routines<3>.         (line  64)
* gsl stats covariance_m function:       Routines<3>.         (line  68)
* gsl stats kurtosis function:           Routines<3>.         (line  49)
* gsl stats kurtosis_m_sd function:      Routines<3>.         (line  52)
* gsl stats lag1_autocorrelation function: Routines<3>.       (line  56)
* gsl stats lag1_autocorrelation_m function: Routines<3>.     (line  60)
* gsl stats max function:                Routines<3>.         (line 131)
* gsl stats max_index function:          Routines<3>.         (line 145)
* gsl stats mean function:               Routines<3>.         (line   6)
* gsl stats median_from_sorted_data function: Routines<3>.    (line 153)
* gsl stats min function:                Routines<3>.         (line 134)
* gsl stats min_index function:          Routines<3>.         (line 141)
* gsl stats minmax function:             Routines<3>.         (line 137)
* gsl stats minmax_index function:       Routines<3>.         (line 149)
* gsl stats module:                      Statistics.          (line   6)
* gsl stats quantile_from_sorted_data function: Routines<3>.  (line 157)
* gsl stats sd function:                 Routines<3>.         (line  16)
* gsl stats sd_m function:               Routines<3>.         (line  19)
* gsl stats sd_with_fixed_mean function: Routines<3>.         (line  32)
* gsl stats skew function:               Routines<3>.         (line  42)
* gsl stats skew_m_sd function:          Routines<3>.         (line  45)
* gsl stats tss function:                Routines<3>.         (line  22)
* gsl stats tss_m function:              Routines<3>.         (line  25)
* gsl stats variance function:           Routines<3>.         (line   9)
* gsl stats variance_with_fixed_mean function: Routines<3>.   (line  28)
* gsl stats wabsdev function:            Routines<3>.         (line 109)
* gsl stats wabsdev_m function:          Routines<3>.         (line 112)
* gsl stats wkurtosis function:          Routines<3>.         (line 123)
* gsl stats wkurtosis_m_sd function:     Routines<3>.         (line 127)
* gsl stats wmean function:              Routines<3>.         (line  76)
* gsl stats wsd function:                Routines<3>.         (line  87)
* gsl stats wsd_m function:              Routines<3>.         (line  90)
* gsl stats wsd_with_fixed_mean function: Routines<3>.        (line  98)
* gsl stats wskew function:              Routines<3>.         (line 116)
* gsl stats wskew_m_sd function:         Routines<3>.         (line 119)
* gsl stats wtss function:               Routines<3>.         (line 103)
* gsl stats wtss_m function:             Routines<3>.         (line 106)
* gsl stats wvariance function:          Routines<3>.         (line  79)
* gsl stats wvariance_m function:        Routines<3>.         (line  83)
* gsl stats wvariance_with_fixed_mean function: Routines<3>.  (line  93)
* mod infix function:                    Matrix Operators and Functions.
                                                              (line  70)
* not prefix function:                   Matrix Operators and Functions.
                                                              (line  83)
* or infix function:                     Matrix Operators and Functions.
                                                              (line 128)
* pow function:                          Matrix Operators and Functions.
                                                              (line 141)



Tag Table:
Node: Top282
Node: Polynomials4811
Ref: polynomials4902
Ref: 04902
Ref: module-gsl4902
Ref: 14902
Ref: pure-gsl-gnu-scientific-library-interface-for-pure4902
Ref: 24902
Ref: module-gsl poly4902
Ref: 34902
Node: Routines5234
Ref: routines5309
Ref: 45309
Ref: 55336
Ref: gsl poly eval5336
Ref: 65721
Ref: gsl poly dd_init5721
Ref: 75840
Ref: gsl poly dd_eval5840
Ref: 85971
Ref: gsl poly dd_taylor5971
Ref: 96130
Ref: gsl poly solve_quadratic6130
Ref: a6333
Ref: gsl poly complex_solve_quadratic6333
Ref: b6546
Ref: gsl poly solve_cubic6546
Ref: c6747
Ref: gsl poly complex_solve_cubic6747
Ref: d6964
Ref: gsl poly complex_solve6964
Node: Examples7184
Ref: examples7259
Ref: e7259
Node: Special Functions8324
Ref: special functions8420
Ref: f8420
Ref: module-gsl sf8420
Ref: 108420
Ref: special-functions8420
Node: Airy Functions9586
Ref: airy functions9676
Ref: 119676
Ref: airy-functions9676
Ref: 129715
Ref: gsl sf airy_ai9715
Ref: 139902
Ref: gsl sf airy_ai_e9902
Ref: 1410095
Ref: gsl sf airy_ai_scaled10095
Ref: 1510303
Ref: gsl sf airy_ai_scaled_e10303
Ref: 1610517
Ref: gsl sf airy_bi10517
Ref: 1710704
Ref: gsl sf airy_bi_e10704
Ref: 1810897
Ref: gsl sf airy_bi_scaled10897
Ref: 1911105
Ref: gsl sf airy_bi_scaled_e11105
Ref: 1a11319
Ref: gsl sf airy_ai_deriv11319
Ref: 1b11524
Ref: gsl sf airy_ai_deriv_e11524
Ref: 1c11735
Ref: gsl sf airy_ai_deriv_scaled11735
Ref: 1d11961
Ref: gsl sf airy_ai_deriv_scaled_e11961
Ref: 1e12193
Ref: gsl sf airy_bi_deriv12193
Ref: 1f12398
Ref: gsl sf airy_bi_deriv_e12398
Ref: 2012609
Ref: gsl sf airy_bi_deriv_scaled12609
Ref: 2112835
Ref: gsl sf airy_bi_deriv_scaled_e12835
Ref: 2213067
Ref: gsl sf airy_zero_ai13067
Ref: 2313145
Ref: gsl sf airy_zero_ai_e13145
Ref: 2413227
Ref: gsl sf airy_zero_bi13227
Ref: 2513305
Ref: gsl sf airy_zero_bi_e13305
Ref: 2613387
Ref: gsl sf airy_zero_ai_deriv13387
Ref: 2713477
Ref: gsl sf airy_zero_ai_deriv_e13477
Ref: 2813571
Ref: gsl sf airy_zero_bi_deriv13571
Ref: 2913661
Ref: gsl sf airy_zero_bi_deriv_e13661
Node: Examples<2>13755
Ref: examples<2>13870
Ref: 2a13870
Ref: id113870
Node: Bessel Functions16816
Ref: bessel functions16928
Ref: 2b16928
Ref: bessel-functions16928
Ref: 2c16971
Ref: gsl sf bessel_j016971
Ref: 2d17043
Ref: gsl sf bessel_j0_e17043
Ref: 2e17118
Ref: gsl sf bessel_j117118
Ref: 2f17190
Ref: gsl sf bessel_j1_e17190
Ref: 3017266
Ref: gsl sf bessel_jn17266
Ref: 3117340
Ref: gsl sf bessel_jn_e17340
Ref: 3217418
Ref: gsl sf bessel_jn_array17418
Ref: 3317522
Ref: gsl sf bessel_y017522
Ref: 3417594
Ref: gsl sf bessel_y0_e17594
Ref: 3517670
Ref: gsl sf bessel_y117670
Ref: 3617742
Ref: gsl sf bessel_y1_e17742
Ref: 3717818
Ref: gsl sf bessel_yn17818
Ref: 3817890
Ref: gsl sf bessel_yn_e17890
Ref: 3917966
Ref: gsl sf bessel_yn_array17966
Ref: 3a18070
Ref: gsl sf bessel_i018070
Ref: 3b18142
Ref: gsl sf bessel_i0_e18142
Ref: 3c18218
Ref: gsl sf bessel_i118218
Ref: 3d18290
Ref: gsl sf bessel_i1_e18290
Ref: 3e18366
Ref: gsl sf bessel_in18366
Ref: 3f18445
Ref: gsl sf bessel_in_e18445
Ref: 4018527
Ref: gsl sf bessel_in_array18527
Ref: 4118631
Ref: gsl sf bessel_i0_scaled18631
Ref: 4218717
Ref: gsl sf bessel_i0_scaled_e18717
Ref: 4318807
Ref: gsl sf bessel_i1_scaled18807
Ref: 4418893
Ref: gsl sf bessel_i1_scaled_e18893
Ref: 4518983
Ref: gsl sf bessel_in_scaled18983
Ref: 4619076
Ref: gsl sf bessel_in_scaled_e19076
Ref: 4719173
Ref: gsl sf bessel_in_scaled_array19173
Ref: 4819284
Ref: gsl sf bessel_k019284
Ref: 4919356
Ref: gsl sf bessel_k0_e19356
Ref: 4a19432
Ref: gsl sf bessel_k119432
Ref: 4b19504
Ref: gsl sf bessel_k1_e19504
Ref: 4c19580
Ref: gsl sf bessel_kn19580
Ref: 4d19659
Ref: gsl sf bessel_kn_e19659
Ref: 4e19741
Ref: gsl sf bessel_kn_array19741
Ref: 4f19845
Ref: gsl sf bessel_k0_scaled19845
Ref: 5019931
Ref: gsl sf bessel_k0_scaled_e19931
Ref: 5120021
Ref: gsl sf bessel_k1_scaled20021
Ref: 5220107
Ref: gsl sf bessel_k1_scaled_e20107
Ref: 5320197
Ref: gsl sf bessel_kn_scaled20197
Ref: 5420290
Ref: gsl sf bessel_kn_scaled_e20290
Ref: 5520387
Ref: gsl sf bessel_kn_scaled_array20387
Ref: 5620794
Ref: gsl sf bessel_j220794
Ref: 5720866
Ref: gsl sf bessel_j2_e20866
Ref: 5820942
Ref: gsl sf bessel_jl20942
Ref: 5921021
Ref: gsl sf bessel_jl_e21021
Ref: 5a21104
Ref: gsl sf bessel_jl_array21104
Ref: 5b21198
Ref: gsl sf bessel_jl_steed_array21198
Ref: 5c21600
Ref: gsl sf bessel_y221600
Ref: 5d21672
Ref: gsl sf bessel_y2_e21672
Ref: 5e21748
Ref: gsl sf bessel_yl21748
Ref: 5f21827
Ref: gsl sf bessel_yl_e21827
Ref: 6021910
Ref: gsl sf bessel_yl_array21910
Ref: 6122356
Ref: gsl sf bessel_i2_scaled22356
Ref: 6222442
Ref: gsl sf bessel_i2_scaled_e22442
Ref: 6322532
Ref: gsl sf bessel_il_scaled22532
Ref: 6422625
Ref: gsl sf bessel_il_scaled_e22625
Ref: 6522722
Ref: gsl sf bessel_il_scaled_array22722
Ref: 6623182
Ref: gsl sf bessel_k2_scaled23182
Ref: 6723268
Ref: gsl sf bessel_k2_scaled_e23268
Ref: 6823358
Ref: gsl sf bessel_kl_scaled23358
Ref: 6923451
Ref: gsl sf bessel_kl_scaled_e23451
Ref: 6a23548
Ref: gsl sf bessel_kl_scaled_array23548
Ref: 6b23656
Ref: gsl sf bessel_jnu23656
Ref: 6c23733
Ref: gsl sf bessel_jnu_e23733
Ref: 6d23814
Ref: gsl sf bessel_sequence_jnu_e23814
Ref: 6e23921
Ref: gsl sf bessel_ynu23921
Ref: 6f23998
Ref: gsl sf bessel_ynu_e23998
Ref: 7024079
Ref: gsl sf bessel_inu24079
Ref: 7124156
Ref: gsl sf bessel_inu_e24156
Ref: 7224237
Ref: gsl sf bessel_inu_scaled24237
Ref: 7324328
Ref: gsl sf bessel_inu_scaled_e24328
Ref: 7424423
Ref: gsl sf bessel_knu24423
Ref: 7524500
Ref: gsl sf bessel_knu_e24500
Ref: 7624579
Ref: gsl sf bessel_lnknu24579
Ref: 7724660
Ref: gsl sf bessel_lnknu_e24660
Ref: 7824745
Ref: gsl sf bessel_knu_scaled24745
Ref: 7924836
Ref: gsl sf bessel_knu_scaled_e24836
Ref: 7a24931
Ref: gsl sf bessel_zero_j024931
Ref: 7b25018
Ref: gsl sf bessel_zero_j0_e25018
Ref: 7c25109
Ref: gsl sf bessel_zero_j125109
Ref: 7d25196
Ref: gsl sf bessel_zero_j1_e25196
Ref: 7e25287
Ref: gsl sf bessel_zero_jnu25287
Ref: 7f25379
Ref: gsl sf bessel_zero_jnu_e25379
Node: Examples<3>25473
Ref: examples<3>25591
Ref: 8025591
Ref: id225591
Node: Clausen Functions31960
Ref: clausen functions32073
Ref: 8132073
Ref: clausen-functions32073
Ref: 8232118
Ref: gsl sf clausen32118
Ref: 8332186
Ref: gsl sf clausen_e32186
Node: Examples<4>32258
Ref: examples<4>32376
Ref: 8432376
Ref: id332376
Node: Colomb Functions32615
Ref: colomb functions32727
Ref: 8532727
Ref: colomb-functions32727
Ref: 8632948
Ref: gsl sf hydrogenicr_132948
Ref: 8733030
Ref: gsl sf hydrogenicr_1_e33030
Ref: 8833116
Ref: gsl sf hydrogenicr33116
Ref: 8933210
Ref: gsl sf hydrogenicr_e33210
Ref: 8a33308
Ref: gsl sf coulomb_wave_fg_e33308
Ref: 8b33411
Ref: gsl sf coulomb_wave_f_array33411
Ref: 8c33525
Ref: gsl sf coulomb_wave_fg_array33525
Ref: 8d33641
Ref: gsl sf coulomb_wave_fgp_array33641
Ref: 8e33759
Ref: gsl sf coulomb_wave_sphf_array33759
Ref: 8f33879
Ref: gsl sf coulomb_cl_e33879
Ref: 9033966
Ref: gsl sf coulomb_cl_array33966
Node: Examples<5>34069
Ref: examples<5>34191
Ref: 9134191
Ref: id434191
Node: Coupling Coefficients35384
Ref: coupling coefficients35501
Ref: 9235501
Ref: coupling-coefficients35501
Ref: 9335554
Ref: gsl sf coupling_3j35554
Ref: 9435733
Ref: gsl sf coupling_3j_e35733
Ref: 9535916
Ref: gsl sf coupling_6j35916
Ref: 9636095
Ref: gsl sf coupling_6j_e36095
Ref: 9736278
Ref: gsl sf coupling_9j36278
Ref: 9836441
Ref: gsl sf coupling_9j_e36441
Node: Examples<6>36608
Ref: examples<6>36729
Ref: 9936729
Ref: id536729
Node: Dawson Function37295
Ref: dawson function37406
Ref: 9a37406
Ref: dawson-function37406
Ref: 9b37449
Ref: gsl sf dawson37449
Ref: 9c37515
Ref: gsl sf dawson_e37515
Node: Examples<7>37585
Ref: examples<7>37700
Ref: 9d37700
Ref: id637700
Node: Debye Functions37883
Ref: debye functions37994
Ref: 9e37994
Ref: debye-functions37994
Ref: 9f38037
Ref: gsl sf debye_138037
Ref: a038105
Ref: gsl sf debye_1_e38105
Ref: a138177
Ref: gsl sf debye_238177
Ref: a238245
Ref: gsl sf debye_2_e38245
Ref: a338317
Ref: gsl sf debye_338317
Ref: a438385
Ref: gsl sf debye_3_e38385
Ref: a538457
Ref: gsl sf debye_438457
Ref: a638525
Ref: gsl sf debye_4_e38525
Ref: a738597
Ref: gsl sf debye_538597
Ref: a838665
Ref: gsl sf debye_5_e38665
Ref: a938737
Ref: gsl sf debye_638737
Ref: aa38805
Ref: gsl sf debye_6_e38805
Node: Examples<8>38877
Ref: examples<8>38988
Ref: ab38988
Ref: id738988
Node: Dilogarithm39709
Ref: dilogarithm39816
Ref: ac39816
Ref: ad39851
Ref: gsl sf dilog39851
Ref: ae40109
Ref: gsl sf dilog_e40109
Node: Examples<9>40342
Ref: examples<9>40450
Ref: af40450
Ref: id840450
Ref: b040807
Ref: gsl sf multiply_e40807
Ref: b140884
Ref: gsl sf multiply_err_e40884
Node: Examples<10>40974
Ref: examples<10>41062
Ref: b241062
Ref: id941062
Node: Matrices41277
Ref: matrices41383
Ref: b341383
Ref: module-gsl matrix41383
Ref: b441383
Ref: b542014
Ref: vectors-and-matrices42014
Ref: b642014
Ref: blas-support42014
Ref: b742014
Ref: linear-algebra42014
Node: Matrix Creation42112
Ref: matrix creation42213
Ref: b842213
Ref: matrix-creation42213
Ref: b942720
Ref: gsl matrix zeros42720
Ref: ba42980
Ref: gsl matrix izeros42980
Ref: bb43242
Ref: gsl matrix czeros43242
Ref: bc43506
Ref: gsl matrix ones43506
Ref: bd43762
Ref: gsl matrix iones43762
Ref: be44022
Ref: gsl matrix cones44022
Ref: bf44282
Ref: gsl matrix eye44282
Ref: c044502
Ref: gsl matrix ieye44502
Ref: c144726
Ref: gsl matrix ceye44726
Node: Matrix Operators and Functions44950
Ref: matrix operators and functions45088
Ref: c245088
Ref: matrix-operators-and-functions45088
Ref: c345329
Ref: +/gsl_matrix45329
Ref: c445477
Ref: -/gsl_matrix45477
Ref: c545797
Ref: */gsl_matrix45797
Ref: c646030
Ref: //gsl_matrix46030
Ref: c746408
Ref: \/gsl_matrix46408
Ref: c846473
Ref: div/gsl_matrix46473
Ref: c946931
Ref: mod/gsl_matrix46931
Ref: ca47404
Ref: not/gsl_matrix47404
Ref: cb47590
Ref: ^/gsl_matrix47590
Ref: cc47963
Ref: <</gsl_matrix47963
Ref: cd48267
Ref: >>/gsl_matrix48267
Ref: ce48571
Ref: and/gsl_matrix48571
Ref: cf48948
Ref: or/gsl_matrix48948
Ref: d049404
Ref: pow/gsl_matrix49404
Node: Singular Value Decomposition49599
Ref: singular value decomposition49713
Ref: d149713
Ref: singular-value-decomposition49713
Ref: d250391
Ref: gsl matrix svd50391
Ref: d350474
Ref: gsl matrix svd_mod50474
Ref: d450652
Ref: gsl matrix svd_jacobi50652
Ref: d550803
Ref: gsl matrix svd_solve50803
Ref: d651124
Ref: gsl matrix pinv51124
Node: Least-Squares Fitting51248
Ref: least-squares fitting51347
Ref: d751347
Ref: module-gsl fit51347
Ref: d851347
Ref: least-squares-fitting51347
Node: Routines<2>51706
Ref: routines<2>51798
Ref: d951798
Ref: id1051798
Ref: da51825
Ref: gsl fit linear51825
Ref: db52045
Ref: gsl fit wlinear52045
Ref: dc52285
Ref: gsl fit linear_est52285
Ref: dd52485
Ref: gsl fit mul52485
Ref: de52682
Ref: gsl fit wmul52682
Ref: df52890
Ref: gsl fit mul_est52890
Node: Examples<11>53035
Ref: examples<11>53127
Ref: e053127
Ref: id1153127
Node: Statistics55519
Ref: statistics55637
Ref: e155637
Ref: module-gsl stats55637
Ref: e255637
Node: Routines<3>55952
Ref: routines<3>56033
Ref: e356033
Ref: id1256033
Ref: e456060
Ref: gsl stats mean56060
Ref: e556174
Ref: gsl stats variance56174
Ref: e656430
Ref: gsl stats sd56430
Ref: e756540
Ref: gsl stats sd_m56540
Ref: e856659
Ref: gsl stats tss56659
Ref: e956771
Ref: gsl stats tss_m56771
Ref: ea56892
Ref: gsl stats variance_with_fixed_mean56892
Ref: eb57056
Ref: gsl stats sd_with_fixed_mean57056
Ref: ec57208
Ref: gsl stats absdev57208
Ref: ed57326
Ref: gsl stats absdev_m57326
Ref: ee57453
Ref: gsl stats skew57453
Ref: ef57572
Ref: gsl stats skew_m_sd57572
Ref: f057709
Ref: gsl stats kurtosis57709
Ref: f157831
Ref: gsl stats kurtosis_m_sd57831
Ref: f257976
Ref: gsl stats lag1_autocorrelation57976
Ref: f358127
Ref: gsl stats lag1_autocorrelation_m58127
Ref: f458287
Ref: gsl stats covariance58287
Ref: f558440
Ref: gsl stats covariance_m58440
Ref: f658609
Ref: gsl stats correlation58609
Ref: f758764
Ref: gsl stats wmean58764
Ref: f858895
Ref: gsl stats wvariance58895
Ref: f959039
Ref: gsl stats wvariance_m59039
Ref: fa59192
Ref: gsl stats wsd59192
Ref: fb59319
Ref: gsl stats wsd_m59319
Ref: fc59455
Ref: gsl stats wvariance_with_fixed_mean59455
Ref: fd59646
Ref: gsl stats wsd_with_fixed_mean59646
Ref: fe59825
Ref: gsl stats wtss59825
Ref: ff59954
Ref: gsl stats wtss_m59954
Ref: 10060092
Ref: gsl stats wabsdev60092
Ref: 10160227
Ref: gsl stats wabsdev_m60227
Ref: 10260376
Ref: gsl stats wskew60376
Ref: 10360507
Ref: gsl stats wskew_m_sd60507
Ref: 10460661
Ref: gsl stats wkurtosis60661
Ref: 10560805
Ref: gsl stats wkurtosis_m_sd60805
Ref: 10660959
Ref: gsl stats max60959
Ref: 10761071
Ref: gsl stats min61071
Ref: 10861183
Ref: gsl stats minmax61183
Ref: 10961351
Ref: gsl stats min_index61351
Ref: 10a61480
Ref: gsl stats max_index61480
Ref: 10b61609
Ref: gsl stats minmax_index61609
Ref: 10c61801
Ref: gsl stats median_from_sorted_data61801
Ref: 10d61958
Ref: gsl stats quantile_from_sorted_data61958
Node: Examples<12>62139
Ref: examples<12>62220
Ref: 10e62220
Ref: id1362220
Node: Random Number Distributions64744
Ref: random number distributions64848
Ref: 10f64848
Ref: module-gsl randist64848
Ref: 11064848
Ref: random-number-distributions64848
Node: Routines<4>65469
Ref: routines<4>65567
Ref: 11165567
Ref: id1465567
Ref: 11265594
Ref: gsl ran ugaussian_pdf65594
Ref: 11365672
Ref: gsl ran gaussian_pdf65672
Ref: 11465758
Ref: gsl ran gaussian_tail_pdf65758
Ref: 11565856
Ref: gsl ran ugaussian_tail_pdf65856
Ref: 11665950
Ref: gsl ran bivariate_gaussian_pdf65950
Ref: 11766052
Ref: gsl ran exponential_pdf66052
Ref: 11866141
Ref: gsl ran laplace_pdf66141
Ref: 11966221
Ref: gsl ran exppow_pdf66221
Ref: 11a66301
Ref: gsl ran cauchy_pdf66301
Ref: 11b66379
Ref: gsl ran rayleigh_pdf66379
Ref: 11c66465
Ref: gsl ran rayleigh_tail_pdf66465
Ref: 11d66563
Ref: gsl ran landau_pdf66563
Ref: 11e66639
Ref: gsl ran gamma_pdf66639
Ref: 11f66717
Ref: gsl ran flat_pdf66717
Ref: 12066793
Ref: gsl ran lognormal_pdf66793
Ref: 12166886
Ref: gsl ran chisq_pdf66886
Ref: 12266963
Ref: gsl ran fdist_pdf66963
Ref: 12367045
Ref: gsl ran tdist_pdf67045
Ref: 12467122
Ref: gsl ran beta_pdf67122
Ref: 12567198
Ref: gsl ran logistic_pdf67198
Ref: 12667280
Ref: gsl ran pareto_pdf67280
Ref: 12767360
Ref: gsl ran weibull_pdf67360
Ref: 12867442
Ref: gsl ran gumbel1_pdf67442
Ref: 12967524
Ref: gsl ran gumbel2_pdf67524
Ref: 12a67606
Ref: gsl ran dirichlet_pdf67606
Ref: 12b67714
Ref: gsl ran dirichlet_lnpdf67714
Ref: 12c67826
Ref: gsl ran discrete_preproc67826
Ref: 12d67948
Ref: gsl ran discrete_pdf67948
Ref: 12e68070
Ref: gsl ran discrete_free68070
Ref: 12f68160
Ref: gsl ran poisson_pdf68160
Ref: 13068246
Ref: gsl ran bernoulli_pdf68246
Ref: 13168335
Ref: gsl ran binomial_pdf68335
Ref: 13268429
Ref: gsl ran multinomial_pdf68429
Ref: 13368533
Ref: gsl ran multinomial_lnpdf68533
Ref: 13468641
Ref: gsl ran negative_binomial_pdf68641
Ref: 13568748
Ref: gsl ran pascal_pdf68748
Ref: 13668838
Ref: gsl ran geometric_pdf68838
Ref: 13768927
Ref: gsl ran hypergeometric_pdf68927
Ref: 13869047
Ref: gsl ran logarithmic_pdf69047
Ref: 13969140
Ref: gsl cdf ugaussian_p69140
Ref: 13a69218
Ref: gsl cdf ugaussian_q69218
Ref: 13b69296
Ref: gsl cdf ugaussian_pinv69296
Ref: 13c69380
Ref: gsl cdf ugaussian_qinv69380
Ref: 13d69464
Ref: gsl cdf gaussian_p69464
Ref: 13e69546
Ref: gsl cdf gaussian_q69546
Ref: 13f69628
Ref: gsl cdf gaussian_pinv69628
Ref: 14069716
Ref: gsl cdf guassian_qinv69716
Ref: 14169804
Ref: gsl cdf exponential_p69804
Ref: 14269889
Ref: gsl cdf exponential_q69889
Ref: 14369974
Ref: gsl cdf exponential_pinv69974
Ref: 14470065
Ref: gsl cdf exponential_qinv70065
Ref: 14570156
Ref: gsl cdf laplace_p70156
Ref: 14670232
Ref: gsl cdf laplace_q70232
Ref: 14770308
Ref: gsl cdf laplace_pinv70308
Ref: 14870390
Ref: gsl cdf laplace_qinv70390
Ref: 14970472
Ref: gsl cdf exppow_p70472
Ref: 14a70548
Ref: gsl cdf exppow_q70548
Ref: 14b70624
Ref: gsl cdf cauchy_p70624
Ref: 14c70698
Ref: gsl cdf cauchy_q70698
Ref: 14d70772
Ref: gsl cdf cauchy_pinv70772
Ref: 14e70852
Ref: gsl cdf cauchy_qinv70852
Ref: 14f70932
Ref: gsl cdf rayleigh_p70932
Ref: 15071014
Ref: gsl cdf rayleigh_q71014
Ref: 15171096
Ref: gsl cdf rayleigh_pinv71096
Ref: 15271184
Ref: gsl cdf rayleigh_qinv71184
Ref: 15371272
Ref: gsl cdf gamma_p71272
Ref: 15471346
Ref: gsl cdf gamma_q71346
Ref: 15571420
Ref: gsl cdf gamma_pinv71420
Ref: 15671500
Ref: gsl cdf gamma_qinv71500
Ref: 15771580
Ref: gsl cdf flat_p71580
Ref: 15871652
Ref: gsl cdf flat_q71652
Ref: 15971724
Ref: gsl cdf flat_pinv71724
Ref: 15a71802
Ref: gsl cdf flat_qinv71802
Ref: 15b71880
Ref: gsl cdf lognormal_p71880
Ref: 15c71969
Ref: gsl cdf lognormal_q71969
Ref: 15d72058
Ref: gsl cdf lognormal_pinv72058
Ref: 15e72153
Ref: gsl cdf lognormal_qinv72153
Ref: 15f72248
Ref: gsl cdf chisq_p72248
Ref: 16072321
Ref: gsl cdf chisq_q72321
Ref: 16172394
Ref: gsl cdf chisq_pinv72394
Ref: 16272473
Ref: gsl cdf chisq_qinv72473
Ref: 16372552
Ref: gsl cdf fdist_p72552
Ref: 16472630
Ref: gsl cdf fdist_q72630
Ref: 16572708
Ref: gsl cdf fdist_pinv72708
Ref: 16672792
Ref: gsl cdf fdist_qinv72792
Ref: 16772876
Ref: gsl cdf tdist_p72876
Ref: 16872949
Ref: gsl cdf tdist_q72949
Ref: 16973022
Ref: gsl cdf tdist_pinv73022
Ref: 16a73101
Ref: gsl cdf tdist_qinv73101
Ref: 16b73180
Ref: gsl cdf beta_p73180
Ref: 16c73252
Ref: gsl cdf beta_q73252
Ref: 16d73324
Ref: gsl cdf beta_pinv73324
Ref: 16e73402
Ref: gsl cdf beta_qinv73402
Ref: 16f73480
Ref: gsl cdf logistic_p73480
Ref: 17073558
Ref: gsl cdf logistic_q73558
Ref: 17173636
Ref: gsl cdf logistic_pinv73636
Ref: 17273720
Ref: gsl cdf logistic_qinv73720
Ref: 17373804
Ref: gsl cdf pareto_p73804
Ref: 17473880
Ref: gsl cdf pareto_q73880
Ref: 17573956
Ref: gsl cdf pareto_pinv73956
Ref: 17674038
Ref: gsl cdf pareto_qinv74038
Ref: 17774120
Ref: gsl cdf weibull_p74120
Ref: 17874198
Ref: gsl cdf weibull_q74198
Ref: 17974276
Ref: gsl cdf weibull_pinv74276
Ref: 17a74360
Ref: gsl cdf weibull_qinv74360
Ref: 17b74444
Ref: gsl cdf gumbel1_p74444
Ref: 17c74522
Ref: gsl cdf gumbel1_q74522
Ref: 17d74600
Ref: gsl cdf gumbel1_pinv74600
Ref: 17e74684
Ref: gsl cdf gumbel1_qinv74684
Ref: 17f74768
Ref: gsl cdf gumbel2_p74768
Ref: 18074846
Ref: gsl cdf gumbel2_q74846
Ref: 18174924
Ref: gsl cdf gumbel2_pinv74924
Ref: 18275008
Ref: gsl cdf gumbel2_qinv75008
Ref: 18375092
Ref: gsl cdf poisson_p75092
Ref: 18475174
Ref: gsl cdf poisson_q75174
Ref: 18575256
Ref: gsl cdf binomial_p75256
Ref: 18675346
Ref: gsl cdf binomial_q75346
Ref: 18775436
Ref: gsl cdf negative_binomial_p75436
Ref: 18875539
Ref: gsl cdf negative_binomial_q75539
Ref: 18975642
Ref: gsl cdf pascal_p75642
Ref: 18a75728
Ref: gsl cdf pascal_q75728
Ref: 18b75814
Ref: gsl cdf geometric_p75814
Ref: 18c75899
Ref: gsl cdf geometric_q75899
Ref: 18d75984
Ref: gsl cdf hypergeometric_p75984
Ref: 18e76100
Ref: gsl cdf hypergeometric_q76100
Node: Examples<13>76216
Ref: examples<13>76314
Ref: 18f76314
Ref: id1576314
Node: Sorting83163
Ref: sorting83262
Ref: 19083262
Ref: module-gsl sort83262
Ref: 19183262
Node: Routines<5>83564
Ref: routines<5>83642
Ref: 19283642
Ref: id1683642
Ref: 19383669
Ref: gsl sort_vector83669
Ref: 19483799
Ref: gsl sort_vector_index83799
Node: Examples<14>83947
Ref: examples<14>84025
Ref: 19584025
Ref: id1784025
Node: Index84273
Ref: index84336

End Tag Table


Local Variables:
coding: utf-8
End:
