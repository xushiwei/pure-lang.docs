\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename pure-mpfr.info
@documentencoding UTF-8
@copying
Generated by Sphinx
@end copying
@settitle pure-mpfr
@defindex ge
@paragraphindent 2
@exampleindent 4
@afourlatex
@dircategory Pure Language and Library Documentation
@direntry
* pure-mpfr: (pure-mpfr.info).    pure-mpfr
@end direntry

@c %**end of header

@titlepage
@title pure-mpfr
@author Albert Gr√§f (Editor)
@end titlepage
@contents

@c %** start of user preamble

@c %** end of user preamble

@ifnottex
@node Top
@top pure-mpfr
@end ifnottex

@c %**start of body
@geindex mpfr module
Version 0.2, October 31, 2011

Albert Graef <@email{Dr.Graef@@t-online.de}>

The @uref{http://www.mpfr.org/,GNU MPFR} library is a C library for multiple-precision floating-point
computations with correct rounding. It is based on @uref{http://gmplib.org,GMP} which Pure also uses
for its bigint support.

@anchor{0}@anchor{gmp}@anchor{1}@anchor{gnu-mpfr}This module makes the MPFR multiprecision floats (henceforth referred to as
@code{mpfr} numbers or values) available in Pure, so that they work with the
other types of Pure numbers in an almost seamless fashion. Pure @code{mpfr}
values are represented as pointers which can readily be passed as arguments to
the MPFR functions, so the representation only involves minimal overhead on
the Pure side.

The module defines the type of @code{mpfr} values as an instance of Pure's
@code{real} type, so that it becomes a well-behaved citizen of Pure's numeric
tower. Memory management of these values is automatic. You can create an
@code{mpfr} value from any other kind of Pure real value (@code{int}, @code{bigint} or
@code{double}), or from a string in decimal notation, using the @code{mpfr}
function. Back conversions are provided from @code{mpfr} to @code{int}, @code{bigint},
@code{double} and @code{string} (the latter by means of a custom pretty-printer
installed by this module, so that mpfr values are printed in a format similar
to the @code{printf %g} format). Integration with Pure's @code{complex} type is
provided as well.

Please note that this module needs more testing and the API hasn't been
finalized yet, but it should be perfectly usable already. As usual, please
report any bugs on the Pure issue tracker, on the Pure mailing list, or
directly to the author, see @indicateurl{http://pure-lang.googlecode.com/}.


@menu
* Copying::
* Installation::
* Usage::
* Examples::
* Index::

@detailmenu
 --- The Detailed Node Listing ---

Usage

* Precision and Rounding::
* MPFR Numbers::
* Conversions::
* Arithmetic::
* Math Functions::
* Complex Number Support::
@end detailmenu
@end menu


@node Copying,Installation,Top,Top
@anchor{copying}@anchor{2}@anchor{module-mpfr}@anchor{3}@anchor{4}
@chapter Copying
Copyright (c) 2011 by Albert Graef.

pure-mpfr is free software: you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option) any
later version.

pure-mpfr is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
details.

You should have received a copy of the GNU Lesser General Public License along
with this program.  If not, see <@indicateurl{http://www.gnu.org/licenses/}>.


@node Installation,Usage,Copying,Top
@anchor{installation}@anchor{5}
@chapter Installation
Get the latest source from
@indicateurl{http://pure-lang.googlecode.com/files/pure-mpfr-0.2.tar.gz}.

Run @code{make} to compile the module and @code{make install} (as root) to install
it in the Pure library directory. This requires GNU make, and of course you
need to have Pure and libmpfr installed.

@code{make} tries to guess your Pure installation directory and platform-specific
setup. If it gets this wrong, you can set some variables manually, please
check the Makefile for details.


@cartouche
@quotation Note
This module requires Pure 0.49 or later and libmpfr 3.x (3.0.0 has
been tested). Older libmpfr versions (2.x) probably require some work.
@end quotation
@end cartouche


@node Usage,Examples,Installation,Top
@anchor{usage}@anchor{6}
@chapter Usage
After installation, you can use the operations of this module by placing the
following import declaration in your Pure programs:

@example
using mpfr;
@end example

@noindent

@cartouche
@quotation Note
This also pulls in the @code{math} standard library module, whose
operations are overloaded by the @code{mpfr} module in order to provide
support for @code{mpfr} values. Thus you don't need to explicitly import the
@code{math} module when using the @code{mpfr} module.

If you use both the @pxref{2,,mpfr} module and the @code{pointers} standard
library module in your script, make sure that you import the @code{pointers}
module @emph{after} @code{mpfr}, so that the definitions of pointer arithmetic in
the @code{pointers} module do not interfere with the overloading of arithmetic
operations in the @code{mpfr} module.
@end quotation
@end cartouche


@menu
* Precision and Rounding::
* MPFR Numbers::
* Conversions::
* Arithmetic::
* Math Functions::
* Complex Number Support::
@end menu


@node Precision and Rounding,MPFR Numbers,,Usage
@anchor{precision and rounding}@anchor{7}@anchor{precision-and-rounding}
@section Precision and Rounding
The following operations of the MPFR library are provided to inspect and
change the default precision and rounding modes used by MPFR.

@geindex mpfr_get_default_prec function
@geindex mpfr_set_default_prec function
@anchor{8}@anchor{mpfr_get_default_prec}
@deffn {Function} mpfr_get_default_prec
@anchor{9}@anchor{mpfr_set_default_prec}
@deffnx {Function} mpfr_set_default_prec prec

Get and set the default precision in terms of number of bits in the
mantissa, including the sign. MPFR initially sets this to 53 (matching the
mantissa size of @code{double} values). It can be changed to any desired value
not less than 2.
@end deffn

@geindex mpfr_get_prec function
@anchor{a}@anchor{mpfr_get_prec}
@deffn {Function} mpfr_get_prec x

Get the precision of an @code{mpfr} number @code{x}. Note that @code{mpfr} numbers
always keep the precision they were created with, but it is possible to
create a new @code{mpfr} number with any given precision from an existing
@code{mpfr} number using the @pxref{b,,mpfr} function, see below.
@end deffn

@geindex mpfr_get_default_rounding_mode function
@geindex mpfr_set_default_rounding_mode function
@anchor{c}@anchor{mpfr_get_default_rounding_mode}
@deffn {Function} mpfr_get_default_rounding_mode
@anchor{d}@anchor{mpfr_set_default_rounding_mode}
@deffnx {Function} mpfr_set_default_rounding_mode rnd

Get and set the default rounding mode, which is used for all arithmetic
operations and mathematical functions provided by this module. The given
rounding mode @code{rnd} must be one of the supported rounding modes listed
below.
@end deffn

@geindex MPFR_RNDN constant
@geindex MPFR_RNDZ constant
@geindex MPFR_RNDU constant
@geindex MPFR_RNDD constant
@geindex MPFR_RNDA constant
@anchor{e}@anchor{mpfr_rndn}
@deffn {constant} MPFR_RNDN // round to nearest, with ties to even
@anchor{f}@anchor{mpfr_rndz}
@deffnx {constant} MPFR_RNDZ // round toward zero
@anchor{10}@anchor{mpfr_rndu}
@deffnx {constant} MPFR_RNDU // round toward +Inf
@anchor{11}@anchor{mpfr_rndd}
@deffnx {constant} MPFR_RNDD // round toward -Inf
@anchor{12}@anchor{mpfr_rnda}
@deffnx {constant} MPFR_RNDA // round away from zero

Supported rounding modes. Please check the MPFR documentation for details.
@end deffn

In addition, the following operations enable you to control the precision in
textual representations of @code{mpfr} values. This information is used by the
custom pretty-printer for @code{mpfr} values installed by the module.

@geindex mpfr_get_print_prec function
@geindex mpfr_set_print_prec function
@anchor{13}@anchor{mpfr_get_print_prec}
@deffn {Function} mpfr_get_print_prec
@anchor{14}@anchor{mpfr_set_print_prec}
@deffnx {Function} mpfr_set_print_prec prec

Get and set the precision (number of decimal digits in the mantissa) used
by the pretty-printer.
@end deffn


@node MPFR Numbers,Conversions,Precision and Rounding,Usage
@anchor{mpfr numbers}@anchor{15}@anchor{mpfr-numbers}
@section MPFR Numbers
The module defines the following data type for representing @code{mpfr} values,
which is a subtype of the Pure @code{real} type:

@geindex mpfr type
@anchor{16}@anchor{mpfr/type}
@deffn {type} mpfr

This is a tagged pointer type (denoted @code{mpfr*} in Pure extern
declarations) which is compatible with the @code{mpfr_t} and @code{mpfr_ptr} data
types of the MPFR C library. Members of this type are "cooked" pointers,
which are allocated dynamically and freed automatically when they are
garbage-collected (by means of a corresponding Pure sentry).
@end deffn

@geindex mpfrp function
@anchor{17}@anchor{mpfrp}
@deffn {Function} mpfrp x

Type predicate checking for @code{mpfr} values.
@end deffn


@node Conversions,Arithmetic,MPFR Numbers,Usage
@anchor{conversions}@anchor{18}
@section Conversions
The following operations are provided to convert between @code{mpfr} numbers and
other kinds of Pure @code{real} values.

@geindex mpfr function
@geindex mpfr function
@geindex mpfr function
@anchor{b}@anchor{mpfr}
@deffn {Function} mpfr x
@anchor{19}@anchor{mpfr/2}
@deffnx {Function} mpfr (x,prec)
@anchor{1a}@anchor{mpfr/3}
@deffnx {Function} mpfr (x,prec,rnd)

This function converts any real number (@code{int},
@code{bigint}, @code{double}, @code{rational},
@pxref{16,,mpfr}) to an @code{mpfr} value.

Optionally, it is possible to specify a precision (number of bits in the
mantissa) @code{prec} and a rounding mode @code{rnd} (one of the @code{MPFR_RND}
constants), otherwise MPFR's default precision and rounding mode are used
(see @pxref{7,,Precision and Rounding} above). Note that this function may also be
used to convert an @code{mpfr} to a new @code{mpfr} number, possibly with a
different precision and rounding.

The argument @code{x} can also be a string denoting a floating point number in
decimal notation with optional sign, decimal point and/or scaling factor,
which is parsed and converted to an @code{mpfr} number using the corresponding
MPFR function.
@end deffn

@geindex int function
@geindex bigint function
@geindex double function
@anchor{1b}@anchor{int/mpfr}
@deffn {Function} int x
@anchor{1c}@anchor{bigint/mpfr}
@deffnx {Function} bigint x
@anchor{1d}@anchor{double/mpfr}
@deffnx {Function} double x

Convert an @code{mpfr} number x to the corresponding type of real number.
Please note that there is no @code{rational} conversion, as MPFR does not
provide such an operation, but if you need this then you can first convert
@code{x} to a @code{double} and then apply the standard library @code{rational}
function to it (this may loose precision, of course).
@end deffn

@geindex str function
@anchor{1e}@anchor{str/mpfr}
@deffn {Function} str x

By virtue of the custom pretty-printer provided by this module, the
standard library @code{str} function can be used to obtain a printable
representation of an @code{mpfr} number @code{x} in decimal notation. The result
is a string.
@end deffn

@geindex floor function
@geindex ceil function
@geindex round function
@geindex trunc function
@geindex frac function
@anchor{1f}@anchor{floor/mpfr}
@deffn {Function} floor x
@anchor{20}@anchor{ceil/mpfr}
@deffnx {Function} ceil x
@anchor{21}@anchor{round/mpfr}
@deffnx {Function} round x
@anchor{22}@anchor{trunc/mpfr}
@deffnx {Function} trunc x
@anchor{23}@anchor{frac/mpfr}
@deffnx {Function} frac x

Rounding and truncation functions. These all take and yield @code{mpfr}
numbers. @pxref{23,,frac} returns the fractional part of an @code{mpfr}
number, i.e., @code{x-trunc x}.
@end deffn


@node Arithmetic,Math Functions,Conversions,Usage
@anchor{arithmetic}@anchor{24}
@section Arithmetic
The following standard operators (see the @code{purelib}) are overloaded to
provide @code{mpfr} arithmetic and comparisons. These all handle mixed
@code{mpfr}/@code{real} operands.

@geindex - prefix function
@geindex + infix function
@geindex * infix function
@geindex / infix function
@geindex ^ infix function
@anchor{25}@anchor{-/mpfr}
@deffn {Function} - x
@anchor{26}@anchor{+/mpfr}
@deffnx {Function} x + y

@deffnx {Function} x - y
@anchor{27}@anchor{*/mpfr}
@deffnx {Function} x * y
@anchor{28}@anchor{//mpfr}
@deffnx {Function} x / y
@anchor{29}@anchor{^/mpfr}
@deffnx {Function} x ^ y

Arithmetic operations.
@end deffn

@geindex == infix function
@geindex ~= infix function
@geindex <= infix function
@geindex >= infix function
@geindex < infix function
@geindex > infix function
@anchor{2a}@anchor{==/mpfr}
@deffn {Function} x == y
@anchor{2b}@anchor{~=/mpfr}
@deffnx {Function} x ~= y
@anchor{2c}@anchor{<=/mpfr}
@deffnx {Function} x <= y
@anchor{2d}@anchor{>=/mpfr}
@deffnx {Function} x >= y
@anchor{2e}@anchor{</mpfr}
@deffnx {Function} x < y
@anchor{2f}@anchor{>/mpfr}
@deffnx {Function} x > y

Comparisons.
@end deffn


@node Math Functions,Complex Number Support,Arithmetic,Usage
@anchor{math functions}@anchor{30}@anchor{math-functions}
@section Math Functions
The following functions from the @code{math} module are overloaded to provide
support for @code{mpfr} values. Note that it is also possible to invoke the
corresponding functions from the MPFR library in a direct fashion, using the
same function names with an additional @code{_mpfr} suffix. These functions also
accept other kinds of @code{real} arguments which are converted to @code{mpfr}
before applying the MPFR function.

@geindex abs function
@anchor{31}@anchor{abs/mpfr}
@deffn {Function} abs x

Absolute value (this is implemented directly, so there's no corresponding
@code{_mpfr} function for this).
@end deffn

@geindex sqrt function
@geindex exp function
@geindex ln function
@geindex log function
@anchor{32}@anchor{sqrt/mpfr}
@deffn {Function} sqrt x
@anchor{33}@anchor{exp/mpfr}
@deffnx {Function} exp x
@anchor{34}@anchor{ln/mpfr}
@deffnx {Function} ln x
@anchor{35}@anchor{log/mpfr}
@deffnx {Function} log x

Square root, exponential and logarithms.
@end deffn

@geindex sin function
@geindex cos function
@geindex tan function
@geindex asin function
@geindex acos function
@geindex atan function
@geindex atan2 function
@anchor{36}@anchor{sin/mpfr}
@deffn {Function} sin x
@anchor{37}@anchor{cos/mpfr}
@deffnx {Function} cos x
@anchor{38}@anchor{tan/mpfr}
@deffnx {Function} tan x
@anchor{39}@anchor{asin/mpfr}
@deffnx {Function} asin x
@anchor{3a}@anchor{acos/mpfr}
@deffnx {Function} acos x
@anchor{3b}@anchor{atan/mpfr}
@deffnx {Function} atan x
@anchor{3c}@anchor{atan2/mpfr}
@deffnx {Function} atan2 y x

Trigonometric functions.
@end deffn

@geindex sinh function
@geindex cosh function
@geindex tanh function
@geindex asinh function
@geindex acosh function
@geindex atanh function
@anchor{3d}@anchor{sinh/mpfr}
@deffn {Function} sinh x
@anchor{3e}@anchor{cosh/mpfr}
@deffnx {Function} cosh x
@anchor{3f}@anchor{tanh/mpfr}
@deffnx {Function} tanh x
@anchor{40}@anchor{asinh/mpfr}
@deffnx {Function} asinh x
@anchor{41}@anchor{acosh/mpfr}
@deffnx {Function} acosh x
@anchor{42}@anchor{atanh/mpfr}
@deffnx {Function} atanh x

Hyperbolic trigonometric functions.
@end deffn


@node Complex Number Support,,Math Functions,Usage
@anchor{complex number support}@anchor{43}@anchor{complex-number-support}
@section Complex Number Support
The following functions from the @code{math} module are overloaded to provide
support for complex values involving @code{mpfr} numbers:

@geindex complex function
@geindex polar function
@geindex rect function
@geindex cis function
@geindex arg function
@geindex re function
@geindex im function
@geindex conj function
@anchor{44}@anchor{complex/mpfr}
@deffn {Function} complex x
@anchor{45}@anchor{polar/mpfr}
@deffnx {Function} polar x
@anchor{46}@anchor{rect/mpfr}
@deffnx {Function} rect x
@anchor{47}@anchor{cis/mpfr}
@deffnx {Function} cis x
@anchor{48}@anchor{arg/mpfr}
@deffnx {Function} arg x
@anchor{49}@anchor{re/mpfr}
@deffnx {Function} re x
@anchor{4a}@anchor{im/mpfr}
@deffnx {Function} im x
@anchor{4b}@anchor{conj/mpfr}
@deffnx {Function} conj x
@end deffn


@node Examples,Index,Usage,Top
@anchor{examples}@anchor{4c}
@chapter Examples
Import the module and set the default precision:

@example
> using mpfr;
> mpfr_set_default_prec 64; // extended precision (long double on x86)
()
@end example

@noindent
Calculate pi with the current precision. Note that mixed arithmetic works with
any combination of real and mpfr numbers.

@example
> let Pi = 4*atan (mpfr 1);
> pi; Pi; abs (Pi-pi);
3.14159265358979
3.14159265358979323851
1.22514845490862001043e-16

> let Pi2 = Pi^2;
> Pi2; sqrt Pi2; sqrt Pi2 == Pi;
9.86960440108935861941
3.14159265358979323851
1
@end example

@noindent
You can also query the precision of a number and change it on the fly:

@example
> Pi; mpfr_get_prec Pi;
3.14159265358979323851
64
> let Pi1 = mpfr (Pi,53); Pi1; mpfr_get_prec Pi1;
3.1415926535897931
53
@end example

@noindent
Complex @code{mpfr} numbers work, too:

@example
> let z = mpfr 2^(1/i); z;
0.769238901363972126565+:-0.638961276313634801184
> let z = ln z/ln (mpfr 2); z;
0.0+:-1.0
> abs z, arg z;
1.0,-1.57079632679489661926
> polar z;
1.0<:-1.57079632679489661926
@end example

@noindent

@node Index,,Examples,Top
@anchor{index}
@unnumbered Index
@printindex ge

@c %**end of body
@bye
