\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename pure-readline.info
@documentencoding UTF-8
@copying
Generated by Sphinx
@end copying
@settitle pure-readline
@defindex ge
@paragraphindent 2
@exampleindent 4
@afourlatex
@dircategory Pure Language and Library Documentation
@direntry
* pure-readline: (pure-readline.info).    pure-readline
@end direntry

@c %**end of header

@titlepage
@title pure-readline
@author Albert Gr√§f (Editor)
@end titlepage
@contents

@c %** start of user preamble

@c %** end of user preamble

@ifnottex
@node Top
@top pure-readline
@end ifnottex

@c %**start of body
@geindex readline module
Version 0.2, January 01, 2013

Albert Graef <@email{Dr.Graef@@t-online.de}>

Get the latest source from
@indicateurl{http://pure-lang.googlecode.com/files/pure-readline-0.2.tar.gz}.

This is a trivial wrapper around GNU readline, which gives Pure scripts access
to the most important facilities of the readline interface. This includes
support for the @code{readline} function itself (without custom completion at
present) and basic history management. The wrapper can also be used with the
BSD editline a.k.a. libedit library, a readline replacement licensed under the
3-clause BSD license. You can find these at:

@itemize -
@item
GNU readline: @indicateurl{http://tiswww.tis.case.edu/~chet/readline/rltop.html}
@item
BSD editline/libedit: @indicateurl{http://www.thrysoee.dk/editline}
@end itemize

We recommend GNU readline because it's easier to use and has full UTF-8
support, but in some situations BSD editline/libedit may be preferable for
license reasons or because it's what the operating system provides. Note that
in either case Pure programs using this module are subject to the license
terms of the library that you use (GPLv3+ in case of GNU readline, BSD license
in the case of BSD editline/libedit).

Normally, you should choose the same library that you use with the Pure
interpreter, to avoid having two different versions of the library linked into
your program. (This doesn't matter if you only use this module with
batch-compiled scripts, though, since the Pure runtime doesn't depend on
readline in any way.) By default, the module will be built with GNU readline.
To select editline/libedit instead, you only have to uncomment a line at the
beginning of the Makefile. Also, you might want to check the beginning of
readline.c for the proper location of the corresponding header files.

The module provides the following functions:

@geindex readline function
@anchor{0}@anchor{readline}
@deffn {Function} readline prompt

Read a line of input from the user, with prompting and command line
editing. Returns the input line (with the trailing newline removed), or
@code{NULL} when reaching end of file.
@end deffn

@geindex add_history function
@anchor{1}@anchor{add_history}
@deffn {Function} add_history line

Adds the given line (a string) to the command history.
@end deffn

@geindex clear_history function
@anchor{2}@anchor{clear_history}
@deffn {Function} clear_history

Clears the command history.
@end deffn

@geindex read_history function
@anchor{3}@anchor{read_history}
@deffn {Function} read_history fname

Reads the command history from the given file. Note that this in fact
@emph{adds} the contents of the history file to the current history, so you may
want to call @pxref{2,,clear_history} beforehand if this function is called
multiple times.
@end deffn

@geindex write_history function
@anchor{4}@anchor{write_history}
@deffn {Function} write_history fname

Writes the current command history to the given file.
@end deffn

Example:

@example
> readline "input> ";
input> Hello, world!
"Hello, world!"
> add_history ans;
()
> readline "input> ";
input> <EOF>
#<pointer 0>
> write_history "history"; // save the history
0
> clear_history;
> read_history "history"; // read the history
0
@end example

@noindent

@menu
* Index::
@end menu


@node Index,,Top,Top
@anchor{index}@anchor{5}@anchor{module-readline}@anchor{6}
@unnumbered Index
@printindex ge

@c %**end of body
@bye
