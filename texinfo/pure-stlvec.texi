\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename pure-stlvec.info
@documentencoding UTF-8
@copying
Generated by Sphinx
@end copying
@settitle pure-stlvec
@defindex ge
@paragraphindent 2
@exampleindent 4
@afourlatex
@dircategory Pure Language and Library Documentation
@direntry
* pure-stlvec: (pure-stlvec.info).    pure-stlvec
@end direntry

@c %**end of header

@titlepage
@title pure-stlvec
@author Albert Gr√§f (Editor)
@end titlepage
@contents

@c %** start of user preamble

@c %** end of user preamble

@ifnottex
@node Top
@top pure-stlvec
@end ifnottex

@c %**start of body
@geindex stlvec module
Version 0.1, October 08, 2011

@display
Peter Summerland <@email{p.summerland@@gmail.com}>@w{ }
@end display
Pure's interface to C++ vectors, specialized to hold pointers to arbitrary
Pure expressions, and the C++ Standard Template Library algorithms that act on
them.

@anchor{0}@anchor{pure}
@menu
* Copying::
* Installation::
* Overview::
* Error Handling::
* Operations Included in the stlvec Module::
* STL Nonmodifying Algorithms::
* STL Modifying Algorithms::
* STL Sort Algorithms::
* STL Merge Algorithms::
* STL Heap Algorithms::
* Min/Max STL Algorithms::
* STL Numeric Algorithms::
* Trace Mode::
* Index::

@detailmenu
 --- The Detailed Node Listing ---

Overview

* Modules::
* Simple Examples::
* Members and Sequences of Members::
* STL Iterators and Value Semantics::
* Iterator Tuples::
* Predefined Iterator Tuple Indexes::
* Back Insert Iterators::
* Data Structure::
* Types::
* Copy-On-Write Semantics::
* Documentation::
* Parameter Names::

Error Handling

* Exception Symbols::
* Examples::

Operations Included in the stlvec Module

* Imports::
* Operations in the Global Namespace::
* Operations in the stl Namespace::
* Examples: Examples<2>.

STL Nonmodifying Algorithms

* Imports: Imports<2>.
* Operations::
* Examples: Examples<3>.

STL Modifying Algorithms

* Imports: Imports<3>.
* Operations: Operations<2>.
* Examples: Examples<4>.

STL Sort Algorithms

* Imports: Imports<4>.
* Operations: Operations<3>.
* Examples: Examples<5>.

STL Merge Algorithms

* Imports: Imports<5>.
* Operations: Operations<4>.
* Examples: Examples<6>.

STL Heap Algorithms

* Imports: Imports<6>.
* Operations: Operations<5>.
* Examples: Examples<7>.

Min/Max STL Algorithms

* Imports: Imports<7>.
* Operations: Operations<6>.
* Examples: Examples<8>.

STL Numeric Algorithms

* Imports: Imports<8>.
* Operations: Operations<7>.
* Examples: Examples<9>.
@end detailmenu
@end menu


@node Copying,Installation,Top,Top
@anchor{copying}@anchor{1}@anchor{module-stlvec}@anchor{2}@anchor{3}
@chapter Copying

@display
Copyright (c) 2011 by Peter Summerland <@email{p.summerland@@gmail.com}>.@w{ }
@end display
All rights reserved.

pure-stlvec is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE.

pure-stlvec is distributed under a BSD-style license, see the COPYING file
for details.


@node Installation,Overview,Copying,Top
@anchor{installation}@anchor{4}
@chapter Installation
@email{pure-stlvec-@@version} requires at least Pure 0.48. The latest version of Pure
is available at @indicateurl{http://code.google.com/p/pure-lang/downloads/list}.

The latest version of the source code for pure-stlvec can be downloaded from
@indicateurl{http://pure-lang.googlecode.com/files/pure-stlvec-0.1.tar.gz}.

To install pure-stlvec (on Linux), extract the source code (e.g., tar -xzf
pure-stlvec-0.1.tar.gz), cd to the pure-stlvec-0.1 directory, and
run @code{make}. After this you can (and should) also run @code{make test} to run a
few unit tests to make sure that pure-stlvec works properly on your system. If
@code{make test} works, run @code{sudo make install} to install pure-stlvec on your
system.  @code{make} tries to guess your Pure installation directory and
platform-specific setup. If it gets this wrong, you can set some variables
manually. In particular, @code{make install prefix=/usr} sets the installation
prefix. Please see the Makefile for details.


@node Overview,Error Handling,Installation,Top
@anchor{overview}@anchor{5}
@chapter Overview
The C++ Standard Template Library ("STL") is a library of generic containers
(data structures designed for storing other objects) and a rich set of generic
algorithms that operate on them. pure-stlvec provides an interface to one of
its most useful containers, "vector", adopted to hold pointers to Pure
expressions. The interface provides Pure programmers with a mutable container
"stlvec", that, like the STL's vector, holds a sequence of objects that can be
accessed in constant time according to their position in the sequence.


@menu
* Modules::
* Simple Examples::
* Members and Sequences of Members::
* STL Iterators and Value Semantics::
* Iterator Tuples::
* Predefined Iterator Tuple Indexes::
* Back Insert Iterators::
* Data Structure::
* Types::
* Copy-On-Write Semantics::
* Documentation::
* Parameter Names::
@end menu


@node Modules,Simple Examples,,Overview
@anchor{modules}@anchor{6}
@section Modules
The usual operations for creating, accessing and modifying stlvecs are
provided by the stlvec module. Most of the operations are similar in name and
function to those provided by the Pure Library for other containers. As is the
case for their Pure Library counterparts, these operations are in the global
namespace. There are a few operations that have been placed in the stl
namespace usually because they do not have Pure Library counterparts.

In addition to the stlvec module, pure-stlvec provides a group of modules,
stlvec::modifying, stlvec::nonmodifying, stlvec::sort, stlvec::merge,
stlvec::heap, stlvec::minmax and stlvec::numeric, that are straight wrappers
the STL algorithms (specialized to work with STL vectors of pointers to Pure
expressions). This grouping of the STL algorithms follows that found at
http://www.cplusplus.com/reference/algorithm/. This web page contains a table
that summarizes of all of the algorithms in one place.

pure-stlvec provides an "umbrella" module, stlvec::algorithms, that pulls in
all of the STL algorithm interface modules in one go. The STL algorithm
wrapper functions reside in the stl namespace and have the same names as their
counterparts in the STL.


@node Simple Examples,Members and Sequences of Members,Modules,Overview
@anchor{simple examples}@anchor{7}@anchor{simple-examples}
@section Simple Examples
Here are some examples that use the basic operations provided by the
stlvec module.

@example
> using stlvec;

> let sv1 = stlvec (0..4); members sv1;
[0,1,2,3,4]

> insert (sv1,stl::svend) (5..7); members sv1;
STLVEC #<pointer 0xaf4d2c0>
[0,1,2,3,4,5,6,7]

> sv1!3;
3

> sv1!![2,4,6];
[2,4,6]

> update sv1 3 33; members sv1;
STLVEC #<pointer 0xaf4d2c0>
[0,1,2,33,4,5,6,7]

> stl::erase (sv1,2,5); members sv1;
STLVEC #<pointer 0xaf4d2c0>
[0,1,5,6,7]

> insert (sv1,2) [2,3,4];  members sv1;
STLVEC #<pointer 0xaf4d2c0>
[0,1,2,3,4,5,6,7]

> let pure_vector = stl::vector (sv1,1,5); pure_vector;
@{1,2,3,4@}

> stlvec pure_vector;
STLVEC #<pointer 0x9145a38>

> members ans;
[1,2,3,4]

 > map (+10) sv1;
[10,11,12,13,14,15,16,17]

> map (+10) (sv1,2,5);
[12,13,14]

> foldl (+) 0 sv1;
28

> [x+10 | x = sv1; x mod 2];
[11,13,15,17]

> @{x+10 | x = (sv1,2,6); x mod 2@};
@{13,15@}
@end example

@noindent
Here are some examples that use STL algorithms.

@example
> using stlvec::algorithms;

> stl::reverse (sv1,2,6); members sv1;
()
[0,1,5,4,3,2,6,7]

> stl::stable_sort sv1 (>); members sv1;
()
[7,6,5,4,3,2,1,0]

> stl::random_shuffle sv1; members sv1;
()
[1,3,5,4,0,7,6,2]

> stl::partition sv1 (<3); members (sv1,0,ans); members sv1;
3
[1,2,0]
[1,2,0,4,5,7,6,3]

> stl::transform sv1 (sv1,0) (*2); members sv1;
-1
[2,4,0,8,10,14,12,6]

> let sv2 = emptystlvec;

> stl::transform sv1 (sv2,stl::svback) (div 2); members sv2;
-1
[1,2,0,4,5,7,6,3]
@end example

@noindent
Many more examples can be found in the pure-stlvec/ut directory.


@node Members and Sequences of Members,STL Iterators and Value Semantics,Simple Examples,Overview
@anchor{members and sequences of members}@anchor{8}@anchor{members-and-sequences-of-members}
@section Members and Sequences of Members
Throughout the documentation for pure-stlvec, the member of a stlvec that is
at the nth position in the sequence of expressions stored in the stlvec is
referred to as its nth member or nth element. The nth member of a stlvec, sv,
is sometimes denoted by sv!n.  The sequence of members of sv starting at
position i up to but not including j is denoted by sv[i,j). There is a
"past-the-end" symbol, stl::svend, that denotes the position after that
occupied by the last member contained by a stlvec.

For example, if sv contains the sequence "a", "b", "c" "d" and "e", sv!0 is
"a", sv[1,3) is the sequence consisting of "b" followed by "c" and
v[3,stl::svend) denotes the sequence consisting of "d" followed by "e".


@node STL Iterators and Value Semantics,Iterator Tuples,Members and Sequences of Members,Overview
@anchor{stl iterators and value semantics}@anchor{9}@anchor{stl-iterators-and-value-semantics}
@section STL Iterators and Value Semantics
In C++ a programmer accesses a STL container's elements by means of
"iterators", which can be thought of as pointers to the container's
elements. A single iterator can be used to access a specific element, and a
pair of iterators can be used to access a "range" of elements. By convention,
such a range includes the member pointed to by the first iterator and all
succeeding members up to but not including the member pointed to by the second
iterator. Each container has a past-the-end iterator that can be used to
specifiy ranges that include the container's last member.

In the case of vectors there is an obvious correspondence between an iterator
that points to an element and the element's position (starting at zero) in the
vector.  pure-stlvec uses this correspondence to designate a stlvec's members
in a way that makes it relatively easy to see how pure-stlvec's functions are
acting on the stlvec's underlying STL vector by referencing the STL's
documentation. Thus, if sv is a stlvec, and j is an int, "update sv j x" uses
the STL to replace the element pointed to by the iterator for position j of
sv's underlying STL vector. If, in addition, k is an int, stl::sort (sv,j,k)
(<) uses the STL to sort the elements in the range designated by the "jth" and
"kth" iterators for sv's underlying STL vector. This range, written as
sv[j,k), is the subsequence of sv that begins with the element at position j
and ends with the element at position (k-1).

Besides iterators, another cornerstone of the STL is its "value semantics",
i.e., all of the STL containers are mutable and if a container is copied, all
of its elements are copied. pure-stlvec deals with the STL's value semantics
by introducing mutable and nonmutable stlvecs, and by storing smart pointers
to objects (which have cheap copies) rather than the actual objects.


@node Iterator Tuples,Predefined Iterator Tuple Indexes,STL Iterators and Value Semantics,Overview
@anchor{iterator tuples}@anchor{a}@anchor{iterator-tuples}
@section Iterator Tuples
As mentioned in the previous section, in C++ ranges are specified by a pair
of STL iterators.

In pure-stlvec ranges of elements in a stlvec are specified by "iterator
tuples" rather than, say, actual pointers to STL iterators. Iterator tuples
consist of the name of a stlvec followed by one of more ints that indicate
positions (starting from zero) of the stlvec's elements.

To illustrate how iterator tuples are used, consider the STL stable_sort
function, which sorts objects in the range [first, last) in the order imposed
by comp. Its C++ signature looks like this:

@quotation
void stable_sort ( RandomAccessIterator first, RandomAccessIterator last, Compare comp )
@end quotation

The corresponding pure-stlvec function, from the stlvec::sort module, looks like
this:

@quotation
stable_sort (msv, first, last) comp
@end quotation

where msv is a mutable stlvec, and first and last are ints. The first thing
that the Pure stable_sort does is create a pair of C++ iterators that point to
the elements in msv's underlying STL vector that occupy the positions
designated by first and last.  Next it wraps the Pure comp function in a C++
function object that, along with the two iterators, is passed to the C++
stable_sort function.

For convenience, (sv,stl::svbeg, stl::svend) can be written simply as
sv. Thus, if first were stl::svbeg (or 0), and last were stl::svend (or #msv,
the number of elements in msv), the last Pure call could be written:

@quotation
stable_sort msv comp
@end quotation

It should be noted that often the STL library provides a default version of its
functions, which like stable_sort, use a comparator or other callback function
provided by the caller. E.g., the C++ stable_sort has a default version that
assumes the "<" operator can be used on the elements held by the container in
question:

@quotation
void stable_sort ( RandomAccessIterator first, RandomAccessIterator last)
@end quotation

The corresponding functions provided by the pure-stlvec modules rarely, if
ever, supply a default version. A typical example is stlvec::sort's stable_sort
which must be called with a comparator callback function:

@quotation
stable_sort msv (<);
@end quotation

Note also that the comparator (e.g., (<)), or other function being passed to a
pure-stlvec algorithm wrapper is almost always the last parameter. This
is the opposite of what is required for similar Pure functions, but is
consistent with the STL calling conventions.


@node Predefined Iterator Tuple Indexes,Back Insert Iterators,Iterator Tuples,Overview
@anchor{predefined iterator tuple indexes}@anchor{b}@anchor{predefined-iterator-tuple-indexes}
@section Predefined Iterator Tuple Indexes
The following integer constants are defined in the stl namespace for use
in iterator tuples.

@geindex stl svbeg constant
@geindex stl svend constant
@geindex stl svback constant
@anchor{c}@anchor{stl svbeg}
@deffn {constant} stl::svbeg = 0
@anchor{d}@anchor{stl svend}
@deffnx {constant} stl::svend = -1
@anchor{e}@anchor{stl svback}
@deffnx {constant} stl::svback = -2
@end deffn

@code{svend} corresponds to STL's past-end iterator for STL vectors. It makes it
possible to specify ranges that include the last element of an stlvec. I.e.,
the iterator tuple (sv,stl::svbeg,stl::svend) would specify sv[0,n), where n
is the number of elements in sv. In order to understand the purpose of
@code{svback}, it is necessary to understand a bit about STL's "back insert
iterators."


@node Back Insert Iterators,Data Structure,Predefined Iterator Tuple Indexes,Overview
@anchor{back insert iterators}@anchor{f}@anchor{back-insert-iterators}
@section Back Insert Iterators
Many of the STL algorithms insert members into a target range designated by an
iterator that points to the first member of the target range. Consistent with
raw C usage, it is ok to copy over existing elements the target
stlvec. E.g.,:

@example
> using stlvec::modifying;

> let v1 = stlvec (0..2);

> let v2 = stlvec ("a".."g");

> stl::copy v1 (v2,2) $$ members v2;
["a","b",0,1,2,"f","g"]
@end example

@noindent
This is great for C++ programmers, but for Pure programmers it is almost
always preferable to append the copied items to the end of a target stlvec,
rather than overwriting all or part or part of it. This can be accomplished
using stl::svback. E.g.,:

@example
> stl::copy v1 (v2,stl::svback) $$ members v2;
["a","b",0,1,2,"f","g",0,1,2]
@end example

@noindent
In short, when a pure-stlvec function detects "stl::svback" in a target
iterator tuple, it constructs a STL "back inserter iterator" and passes it on
to the corresponding wrapped STL function.


@node Data Structure,Types,Back Insert Iterators,Overview
@anchor{data structure}@anchor{10}@anchor{data-structure}
@section Data Structure
Currently, stlvecs are of the form (STLVEC x) or (CONST_STLVEC x), where
STLVEC AND CONST_STLVEC are defined as nonfix symbols in the global namespace
and x is a pointer to the underlying STL vector. stlvec module defines
corresponding type tags, stlvec and const_stlvec, so the programmer never
needs to worry about the underlying representaton.

This representation may change in the future, and must not be relied upon
by client modules. In particular, one must never attempt to use the
embedded pointer directly.

As the names suggest, stlvecs are mutable and const_stlvecs are
immutable. Functions that modify a stlvec will simply fail unless the stlvec
is mutable.

@example
> let v = const_stlvec $ stlvec (0..3); v2;
CONST_STLVEC #<pointer 0x8c1dbf0>

> update v 0 100; // fails
update (CONST_STLVEC #<pointer 0x9f07690>) 0 100
@end example

@noindent

@node Types,Copy-On-Write Semantics,Data Structure,Overview
@anchor{types}@anchor{11}
@section Types
pure-stlvec introduces six type tags, all of which are in the global namespace:

@geindex mutable_stlvec type
@anchor{12}@anchor{mutable_stlvec/type}
@deffn {type} mutable_stlvec

The type for a mutable stlvec.
@end deffn

@geindex const_stlvec type
@anchor{13}@anchor{const_stlvec/type}
@deffn {type} const_stlvec

The type for an immutable stlvec.
@end deffn

@geindex stlvec type
@anchor{14}@anchor{stlvec/type}
@deffn {type} stlvec

The type for a stlvec, mutable or immutable.
@end deffn

@geindex mutable_svit type
@anchor{15}@anchor{mutable_svit/type}
@deffn {type} mutable_svit

The type for an iterator tuple whose underlying stlvec is mutable.
@end deffn

@geindex const_svit type
@anchor{16}@anchor{const_svit/type}
@deffn {type} const_svit

The type for an iterator tuple whose underlying stlvec is immutable.
@end deffn

@geindex svit type
@anchor{17}@anchor{svit/type}
@deffn {type} svit

The type for an iterator tuple. The underlying stlvec can be mutable
or immutable.
@end deffn


@node Copy-On-Write Semantics,Documentation,Types,Overview
@anchor{copy-on-write semantics}@anchor{18}@anchor{copy-on-write-semantics}
@section Copy-On-Write Semantics
The pure-stlvec module functions do not implement automatic copy-on-write
semantics. Functions that modify stlvec parameters will simply fail if they
are passed a const_stlvec when they expect a mutable_stlvec.

For those that prefer immutable data structures, stlvecs can be converted to
const_stlvecs (usually after they have been created and modified within a
function) by the @code{const_stlvec} function. This function converts a mutable
stlvec to an immutable stlvec without changing the underlying STL vector.

Typically, a "pure" function that "updates" a stlvec passed to it as an
argument will first copy the input stlvec to a new locally scoped (mutable)
stlvec using the stlvec function. It will then modify the new stlvec and use
const_stlvec to make the new stlvec immutable before it is returned. It should
be noted that several of the STL algorithms have "copy" versions which place
their results directly into a new stlvec, which can eliminate the need to copy
the input stlvec. E.g.:

@example
> let sv1 = stlvec ("a".."e");

> let sv2 = emptystlvec;

> stl::reverse_copy sv1 (sv2,stl::svback) $$ members sv2;
["e","d","c","b","a"]
@end example

@noindent
Without reverse_copy, one would have had to copy sv1 into sv2 and then reverse
sv2.

If desired, in Pure it is easy to write functions that have automatic
copy-on-write semantics. E.g.,

@example
> my_update csv::const_stlvec i x = my_update (stlvec csv) i x;
> my_update sv::stlvec i x = update sv i x;
@end example

@noindent

@node Documentation,Parameter Names,Copy-On-Write Semantics,Overview
@anchor{documentation}@anchor{19}
@section Documentation
The documentation of the functions provided by the stlvec module are
reasonably complete.  In contrast, the descriptions of functions provided by
the STL algorithm modules are purposely simplified (and may not, therefore, be
technically accurate). This reflects that fact that the functions provided by
pure-stlvec have an obvious correspondence to the functions provided by the
STL, and the STL is extremely well documented. Furthermore, using the Pure
interpreter, it is very easy to simply play around with with any of the
pure-stlvec functions if there are doubts, especially with respect to "corner
cases."  Often this leads to a deeper understanding compared to reading a
precise technical description.

A good book on the STL is STL Tutorial and Reference Guide, Second Edition, by
David R. Musser, Gillmer J. Derge and Atul Saini. A summary of all of the STL
algorithms can be found at @indicateurl{http://www.cplusplus.com/reference/stl/}.


@node Parameter Names,,Documentation,Overview
@anchor{parameter names}@anchor{1a}@anchor{parameter-names}
@section Parameter Names
In the descriptions of functions that follow, parameter names used in
function descriptions represent specific types of Pure objects:


@table @asis
@item sv
stlvec (mutable or immutable)

@item csv
const (i.e., immutable) stlvec

@item msv
mutable stlvec

@item x
an arbitrary Pure expression

@item xs
a list of arbitrary Pure expressions

@item count, sz, n
whole numbers to indicate a number of elements, size of a vector, etc

@item i,j
whole numbers used to designate indexes into a stlvec

@item f,m,l
whole numbers (or stl::beg or stl::svend) designating the "first", "middle"
or "last" iterators in a stlvec iterator tuple

@item p
a whole number (or other iterator constant such as stl::svend or
stl::svback) used in a two element iterator tuple (e.g., (sv,p))

@item (sv,p)
an iterator tuple that will be mapped to an iterator that points
to the pth position of sv's underlying STL vector, v, (or to a
back iterator on v if p is stl::svback)

@item (sv,f,l)
an iterator tuple that will be mapped to the pair of iterators
that are designated by (sv,f) and (sv,l)

@item (sv,f,m,l)
an iterator tuple that will be mapped to the iterators that
are designated by (sv,f), (sv,m) and (sv,l)

@item sv[f,l)
the range of members beginning with that at (sv,f) up to but not
including that at (con,l)

@item comp
a function that accepts two objects and returns true if the
first argument is less than the second (in the strict
weak ordering defined by comp), and false otherwise

@item unary_pred
a function that accepts one object and returns true or false

@item bin_pred
a function that accepts two objects and returns true or false

@item unary_fun
a function that accepts one objects and returns another

@item bin_fun
a function that accepts two objects and returns another

@item gen_fun
a function of one parameter that produces a sequence of objects, one
for each call
@end table

For readability, and to correspond with the STL documentation, the words
"first", "middle", and "last", or variants such as "first1" are often used
instead of f,m,l.


@node Error Handling,Operations Included in the stlvec Module,Overview,Top
@anchor{error handling}@anchor{1b}@anchor{error-handling}
@chapter Error Handling
The functions provided this module handle errors by throwing exceptions.


@menu
* Exception Symbols::
* Examples::
@end menu


@node Exception Symbols,Examples,,Error Handling
@anchor{exception symbols}@anchor{1c}@anchor{exception-symbols}
@section Exception Symbols

@geindex bad_argument constructor
@anchor{1d}@anchor{bad_argument}
@deffn {constructor} bad_argument

This exception is thrown when a function is passed an unexpected value. A
subtle error to watch for is a malformed iterator tuple (e.g., one with
the wrong number of elements).
@end deffn

@geindex bad_function constructor
@anchor{1e}@anchor{bad_function}
@deffn {constructor} bad_function

This exception is thrown when a purported Pure call-back function is not
even callable.
@end deffn

@geindex failed_cond constructor
@anchor{1f}@anchor{failed_cond/stlvec}
@deffn {constructor} failed_cond

This exception is thrown when a Pure call-back predicate returns a value
that is not an int.
@end deffn

@geindex out_of_bounds constructor
@anchor{20}@anchor{out_of_bounds/stlvec}
@deffn {constructor} out_of_bounds

This exception is thrown if the specified index is out of bounds.
@end deffn

@geindex range_overflow constructor
@anchor{21}@anchor{range_overflow}
@deffn {constructor} range_overflow

This exception is thrown by functions that write over part of a target
stlvec (e.g., copy) when the target range too small to accommodate the
result.
@end deffn

@geindex range_overlap constructor
@anchor{22}@anchor{range_overlap}
@deffn {constructor} range_overlap

This exception is thrown by algorithm functions that write over part of a
target stlvec when the target and source ranges overlap in a way that is
not allowed.
@end deffn

In addition, any exception thrown by a Pure callback function passed to a
pure-stlvec function will be caught and be rethrown by the pure-stlvec
function.


@node Examples,,Exception Symbols,Error Handling
@anchor{examples}@anchor{23}
@section Examples

@example
> using stlvec, stlvec::modifying;

> let sv1 = stlvec (0..4); members sv1;
[0,1,2,3,4]

> let sv2 = stlvec ("a".."e"); members sv2;
["a","b","c","d","e"]

> sv1!10;
<stdin>, line 25: unhandled exception 'out_of_bounds' ...

> stl::copy sv1 (sv2,10);
<stdin>, line 26: unhandled exception 'out_of_bounds' ...

> stl::copy sv1 (sv2,2,3); // sb (sv2,pos)
<stdin>, line 22: unhandled exception 'bad_argument' ...

> stl::copy sv1 (sv2,2);
<stdin>, line 23: unhandled exception 'range_overflow' ...

> stl::copy sv2 (sv2,2);
<stdin>, line 24: unhandled exception 'range_overlap' ...

> stl::copy (sv1,1,3) (sv2,0); members sv2; // ok
2
[1,2,"c","d","e"]

> stl::sort sv2 (>); // apples and oranges
<stdin>, line 31: unhandled exception 'failed_cond'

> listmap (\x->throw DOA) sv1; // callback function throws exception
<stdin>, line 34: unhandled exception 'DOA' ...
@end example

@noindent

@node Operations Included in the stlvec Module,STL Nonmodifying Algorithms,Error Handling,Top
@anchor{operations included in the stlvec module}@anchor{24}@anchor{operations-included-in-the-stlvec-module}
@chapter Operations Included in the stlvec Module
The stlvec module provides functions for creating, accessing and modifying
stlvecs. In general, operations that have the same name as a corresponding
function in the Pure standard library are in the global namespace. The
remaining functions, which are usually specific to stlvecs, are in the stl
namespace.

Please note that "stlvec to stlvec" functions are provided by the pure-stl
algorithm modules. Thus, for example, the stlvec module does not provide a
function that maps one stlvec onto a new stlvec. That functionality, and more,
is provided by stl::transform, which can be found in the stlvec::modifying
module.


@menu
* Imports::
* Operations in the Global Namespace::
* Operations in the stl Namespace::
* Examples: Examples<2>.
@end menu


@node Imports,Operations in the Global Namespace,,Operations Included in the stlvec Module
@anchor{imports}@anchor{25}
@section Imports
To use the operations of this module, add the following import declaration
to your program:

@example
using stlvec;
@end example

@noindent

@node Operations in the Global Namespace,Operations in the stl Namespace,Imports,Operations Included in the stlvec Module
@anchor{operations in the global namespace}@anchor{26}@anchor{operations-in-the-global-namespace}
@section Operations in the Global Namespace
When reading the function descriptions that follow, please bear in mind that
whenever a function is passed an iterator tuple of the form (sv,first, last),
first and last can be dropped, leaving (sv), or simply sv. The function will
treat the "unary" iterator tuple (sv) as (sv, stl::svbeg, stl::svend).

@geindex emptystlvec function
@anchor{27}@anchor{emptystlvec}
@deffn {Function} emptystlvec

return an empty stlvec
@end deffn

@geindex stlvec function
@anchor{28}@anchor{stlvec}
@deffn {Function} stlvec source

create a new stlvec that contains the elements of source; source can be
a stlvec, an iterator tuple(sv,first,last), a list or a vector (i.e.,
a matrix consisting of a single row or column). The underlying STL vector
is always a new STL vector. I.e., if source is a stlvec the new stlvec does
not share source's underlying STL vector.
@end deffn

@geindex mkstlvec function
@anchor{29}@anchor{mkstlvec}
@deffn {Function} mkstlvec x count

create a new stlvec consisting of count x's.
@end deffn

@geindex const_stlvec function
@anchor{2a}@anchor{const_stlvec}
@deffn {Function} const_stlvec source

create a new const_stlvec that contains the elements of source; source can
be a stlvec, an iterator tuple(sv,first,last), a list or a vector (i.e., a
matrix consisting of a single row or column). If source is a stlvec
(mutable or const), the new const_stlvec shares source's underlying STL
vector.
@end deffn

@geindex # prefix function
@anchor{2b}@anchor{#/stlvec}
@deffn {Function} # sv

return the number of elements in sv.
@end deffn

Note that # applied to an iterator tuple like (sv,b,e) will just return the
number of elements in the tuple. Use stl::bounds if you need to know the
number of elements in the range denoted by an iterator tuple.

@geindex null function
@anchor{2c}@anchor{null/stlvec}
@deffn {Function} null sv

test whether sv is empty
@end deffn

@geindex infix function
@anchor{2d}@anchor{!/stlvec}
@deffn {Function} sv ! i

return the ith member of sv
@end deffn

Note that !k applied to an iterator tuple like (sv,b,e) will just return the
kth element of the tuple. In addition, in stlvec, integers used to denote
postions (as in !k) or in iterators, @emph{always}, are relative to the beginning
of the underlying vector. So it makes no sense to apply ! to an iterator
tuple.

@geindex first function
@geindex last function
@anchor{2e}@anchor{first/stlvec}
@deffn {Function} first sv
@anchor{2f}@anchor{last/stlvec}
@deffnx {Function} last sv

first and last member of sv
@end deffn

@geindex members function
@anchor{30}@anchor{members/stlvec}
@deffn {Function} members (sv, first, last)

return a list of values stored in sv[first,last)
@end deffn

@geindex list function
@anchor{31}@anchor{list/stlvec}
@deffn {Function} list sv

return a list of values stored in sv.
@end deffn

Note that if list is applied to an iterator tuple, it will return a list
holding the elements of the tuple not the elements of the range denoted by the
tuple. It is recommended that you use members instead.

@geindex update function
@anchor{32}@anchor{update/stlvec}
@deffn {Function} update msv i x

@deffnx {Function} update csv i x

replace the ith member of msv by x and return msv; copy the immutable
stlvec, csv a new stlvec, sv, replace the ith member of sv by x, convert
sv to an immutable stlvec and return the new immutable stlvec
@end deffn

@geindex append function
@anchor{33}@anchor{append/stlvec}
@deffn {Function} append sv x

append x to the end of sv
@end deffn

@geindex insert function
@geindex insert function
@anchor{34}@anchor{insert/stlvec}
@deffn {Function} insert (msv,p) xs
@anchor{35}@anchor{insert}
@deffnx {Function} insert (msv,p) (sv,first,last)

insert members of the list xs or the range sv[first, last)
into msv, all preceding the pth member of msv. Members are shifted
to make room for the inserted members
@end deffn

@geindex rmfirst function
@geindex rmlast function
@anchor{36}@anchor{rmfirst/stlvec}
@deffn {Function} rmfirst msv
@anchor{37}@anchor{rmlast/stlvec}
@deffnx {Function} rmlast msv

remove the first or last member from msv
@end deffn

@geindex == infix function
@geindex ~= infix function
@anchor{38}@anchor{==/stlvec}
@deffn {Function} sv1 == sv2
@anchor{39}@anchor{~=/stlvec}
@deffnx {Function} sv1 ~= sv2

(x == y) is the same as stl::allpairs (==) x y and x ~= y is simply
~(allpairs (==) x y)
@end deffn

Note that @code{==} and @code{~==} are not defined for iterator tuples (the rules
would never be executed because == is defined on tuples in the Prelude).

The stlvec module provides convenience functions that apply map, catmap,
foldl, etc, to directly access Pure expressions stored in a stlvec.

@geindex map function
@anchor{3a}@anchor{map/stlvec}
@deffn {Function} map unary_fun (sv, first, last)

one pass equivalent of map unary_fun $ members (sv, first,
last)
@end deffn

@geindex listmap function
@anchor{3b}@anchor{listmap/stlvec}
@deffn {Function} listmap unary_fun (sv, first, last)

same as map, used in list comprehensions
@end deffn

@geindex catmap function
@anchor{3c}@anchor{catmap/stlvec}
@deffn {Function} catmap unary_fun (sv, first, last)

one pass equivalent of catmap unary_fun $ members (sv, first,
last)
@end deffn

@geindex do function
@anchor{3d}@anchor{do/stlvec}
@deffn {Function} do unary_fun (sv, first, last)

one pass equivalent of do unary_fun $ members (sv, first,
last)
@end deffn

@geindex foldl function
@anchor{3e}@anchor{foldl/stlvec}
@deffn {Function} foldl bin_fun x (sv, first, last)

one pass equivalent of foldl bin_fun x $ members (sv,
first, last)
@end deffn

@geindex foldl1 function
@anchor{3f}@anchor{foldl1/stlvec}
@deffn {Function} foldl1 bin_fun (sv, first, last)

one pass equivalent of foldl1 bin_fun $ members (sv, first,
last)
@end deffn

@geindex filter function
@anchor{40}@anchor{filter/stlvec}
@deffn {Function} filter unary_pred (sv, first, last)

one pass equivalent of filter unary_pred $ members (sv, first,
last)
@end deffn

The following four functions map (or catmap) stlvecs onto row and col
matrixes, primarily for use in matrix comprehensions.

@geindex rowmap function
@anchor{41}@anchor{rowmap/stlvec}
@deffn {Function} rowmap unary_fun (sv, first, last)
@end deffn

@geindex rowcatmap function
@anchor{42}@anchor{rowcatmap/stlvec}
@deffn {Function} rowcatmap unary_fun (sv, first, last)
@end deffn

@geindex colmap function
@anchor{43}@anchor{colmap/stlvec}
@deffn {Function} colmap unary_fun (sv, first, last)
@end deffn

@geindex colcatmap function
@anchor{44}@anchor{colcatmap/stlvec}
@deffn {Function} colcatmap unary_fun (sv, first, last)
@end deffn


@node Operations in the stl Namespace,Examples<2>,Operations in the Global Namespace,Operations Included in the stlvec Module
@anchor{operations in the stl namespace}@anchor{45}@anchor{operations-in-the-stl-namespace}
@section Operations in the stl Namespace

@geindex stl vector function
@anchor{46}@anchor{stl vector}
@deffn {Function} stl::vector (sv,first,last)

create a Pure vector that contains the members of sv[first,last)
@end deffn

@geindex stl erase function
@anchor{47}@anchor{stl erase}
@deffn {Function} stl::erase (msv,first,last)

@deffnx {Function} stl::erase (msv,p)

@deffnx {Function} stl::erase msv

remove msv[first,last) from msv, remove msv!p from msv, or make msv
empty. Members are shifted to occupy vacated slots
@end deffn

@geindex stl allpairs function
@anchor{48}@anchor{stl allpairs}
@deffn {Function} stl::allpairs bin_pred (sv1, first1, last1) (sv2, first2, last2)

returns true if bin_pred is true for all corresponding members of
sv1[first1, last1) and sv2[first2, last2)
@end deffn

@geindex stl bounds function
@anchor{49}@anchor{stl bounds}
@deffn {Function} stl::bounds (sv,first,last)

throws out-of-bounds if first or last is out of bounds. returns the tuple
(sv,first,last) except that if first is stl::begin it will be replaced by 0
and if last is stl::svend it will be replaced by the number of elements in
sv.
@end deffn

@geindex stl reserve function
@anchor{4a}@anchor{stl reserve}
@deffn {Function} stl::reserve msv count

modify the underlying STL vector to have at least count slots, useful for
packing data into a fixed size vector and possibly to speed up the addition
of new members
@end deffn

@geindex stl capacity function
@anchor{4b}@anchor{stl capacity}
@deffn {Function} stl::capacity sv

return the number of slots (as opposed to the number of elements) held by
the underlying STL vector
@end deffn


@node Examples<2>,,Operations in the stl Namespace,Operations Included in the stlvec Module
@anchor{examples<2>}@anchor{4c}@anchor{id1}
@section Examples
See ut_stlvec.pure and ut_global_stlvec.pure in the pure-stlvec/ut directory.


@node STL Nonmodifying Algorithms,STL Modifying Algorithms,Operations Included in the stlvec Module,Top
@anchor{stl nonmodifying algorithms}@anchor{4d}@anchor{stl-nonmodifying-algorithms}
@chapter STL Nonmodifying Algorithms
The stlvec::nonmodifying module provides an interface to the STL's
non-modifying sequence operations.


@menu
* Imports: Imports<2>.
* Operations::
* Examples: Examples<3>.
@end menu


@node Imports<2>,Operations,,STL Nonmodifying Algorithms
@anchor{imports<2>}@anchor{4e}@anchor{id2}
@section Imports
To use the operations of this module, add the following import declaration
to your program:

@example
using stlvec::nonmodifying;
@end example

@noindent
All of the functions are in the stl namespace.


@node Operations,Examples<3>,Imports<2>,STL Nonmodifying Algorithms
@anchor{operations}@anchor{4f}
@section Operations

@geindex stl for_each function
@anchor{50}@anchor{stl for_each}
@deffn {Function} stl::for_each (sv, first, last) unary_fun

applies unary_fun to each of the elements in sv[first,last)
@end deffn

@geindex stl find function
@anchor{51}@anchor{stl find}
@deffn {Function} stl::find (sv, first, last) x

returns the position of the first element in sv[first,last)
for which (==x) is true (or stl::svend if not found)
@end deffn

@geindex stl find_if function
@anchor{52}@anchor{stl find_if}
@deffn {Function} stl::find_if (sv, first, last) unary_pred

returns the position of the first element in sv[first,last)
for which unary_pred is true (or stl::svend if not found)
@end deffn

@geindex stl find_first_of function
@anchor{53}@anchor{stl find_first_of}
@deffn {Function} stl::find_first_of (sv1, first1, last1) (sv2, first2, last2) bin_pred

Returns the position of the first element, x, in
sv1[first1,last1) for which there exists y in
sv2[first2,last2) and (bin_pred x y) is true (or stl::svend if
no such x exists).
@end deffn

@geindex stl adjacent_find function
@anchor{54}@anchor{stl adjacent_find}
@deffn {Function} stl::adjacent_find (sv, first, last) bin_pred

search sv[first,last) for the first occurrence of two
consecutive elements (x,y) for which (bin_pred x y) is
true. Returns the position of x, if found, or stl::svend if not found)
@end deffn

@geindex stl count function
@anchor{55}@anchor{stl count}
@deffn {Function} stl::count (sv, first, last) x

returns the number of elements in the range sv[first,last) for
which (x==) is true
@end deffn

@geindex stl count_if function
@anchor{56}@anchor{stl count_if}
@deffn {Function} stl::count_if (sv, first, last) unary_pred

returns the number of elements in the range sv[first,last) for
which unary_pred is true
@end deffn

@geindex stl mismatch function
@anchor{57}@anchor{stl mismatch}
@deffn {Function} stl::mismatch (sv1, first1, last1) (sv2, first2) bin_pred

applies bin_pred pairwise to the elements of
sv1[first1,last1) and (sv2,first2,first2 + n), with
n equal to last1-first1 until it finds i and j such
that bin_pred (sv1!i) (sv2!j) is false and returns
(i,j). If bin_pred is true for all of the pairs of elements,
i will be stl::svend and j will be first2 + n (or stl::svend)
@end deffn

@geindex stl equal function
@anchor{58}@anchor{stl equal}
@deffn {Function} stl::equal (sv1, first1, last1) (sv2, first2) bin_pred

applies bin_pred pairwise to the elements of
sv1[first1,last1) and (sv2,first2,first2 + n), with
n equal to last1-first1, and returns true if bin_pred is
true for each pair
@end deffn

@geindex stl search function
@anchor{59}@anchor{stl search}
@deffn {Function} stl::search (sv1, first1, last1) (sv2, first2) bin_pred

using bin_pred to determine equality of the elements, searches
sv1[first1,last1) for the first occurrence of the sequence
defined by sv2[first2,last2), and returns the position in sv1
of its first element (or stl::svend if not found)
@end deffn

@geindex stl search_n function
@anchor{5a}@anchor{stl search_n}
@deffn {Function} stl::search_n (sv, first, last) count x bin_pred

using bin_pred to determine equality of the elements, searches
sv[first,last) for a sequence of count elements that equal
x. If such a sequence is found, it returns the position of the
first of its elements, otherwise it returns stl::svend
@end deffn

@geindex stl find_end function
@anchor{5b}@anchor{stl find_end}
@deffn {Function} stl::find_end (sv1, first1, last1) (sv2, first2, last2) bin_pred

using bin_pred to determine equality of the elements, searches
sv1[first1,last1) for the last occurrence of
sv2[first2,last2). Returns the position of the first element in
sv1 of the occurrence (or stl::svend if not found).
@end deffn


@node Examples<3>,,Operations,STL Nonmodifying Algorithms
@anchor{examples<3>}@anchor{5c}@anchor{id3}
@section Examples
See ut_nonmodifying.pure in the pure-stlvec/ut directory.


@node STL Modifying Algorithms,STL Sort Algorithms,STL Nonmodifying Algorithms,Top
@anchor{stl modifying algorithms}@anchor{5d}@anchor{stl-modifying-algorithms}
@chapter STL Modifying Algorithms
The stlvec::modifying module provides an interface to the STL's modifying
algorithms.


@menu
* Imports: Imports<3>.
* Operations: Operations<2>.
* Examples: Examples<4>.
@end menu


@node Imports<3>,Operations<2>,,STL Modifying Algorithms
@anchor{imports<3>}@anchor{5e}@anchor{id4}
@section Imports
To use the operations of this module, add the following import declaration
to your program:

@example
using stlvec::modifying;
@end example

@noindent
All of the functions are in the stl namespace.


@node Operations<2>,Examples<4>,Imports<3>,STL Modifying Algorithms
@anchor{operations<2>}@anchor{5f}@anchor{id5}
@section Operations

@geindex stl copy function
@anchor{60}@anchor{stl copy}
@deffn {Function} stl::copy (sv, first1, last1) (msv, first2)

copies the elements in sv[first1,last1) into the range whose
first element is (msv,first2)
@end deffn

@geindex stl copy_backward function
@anchor{61}@anchor{stl copy_backward}
@deffn {Function} stl::copy_backward (sv,first1,last1) (msv,last2)

copies the elements in sv[first1,last1), moving backward from
(last1), into the range msv[first2,last2) where first2 is
last2 minus the number of elements in sv[first1,last1)
@end deffn

@geindex stl swap_ranges function
@anchor{62}@anchor{stl swap_ranges}
@deffn {Function} stl::swap_ranges (sv,first,last) (msv, p)

exchanges the elements in sv[first, last) with those in
msv[p, p+n) where n is last - first
@end deffn

@geindex stl transform function
@anchor{63}@anchor{stl transform}
@deffn {Function} stl::transform (sv,first,last) (msv, p) unary_fun

applies unary_fun to the elements of sv[first,last) and
places the resulting sequence in msv[p, p+n) where n is
last - first. If sv is mutable, msv and sv can be the
same stlvec. Returns (msv,p+n)
@end deffn

@geindex stl transform_2 function
@anchor{64}@anchor{stl transform_2}
@deffn {Function} stl::transform_2 (sv1,first1,last1) (sv2,first2) (msv, p) bin_fun

applies bin_fun to corresponding pairs of elements of
sv1[first1,last1) sv2[first2,n) and and places the
resulting sequence in msv[p, p+n) where n is last1 -
first1. Returns (msv,p+n)
@end deffn

@geindex stl replace function
@anchor{65}@anchor{stl replace}
@deffn {Function} stl::replace (msv,first,last) x y

same as @pxref{66,,replace_if} (msv,first,last) (x==) y
@end deffn

@geindex stl replace_if function
@anchor{66}@anchor{stl replace_if}
@deffn {Function} stl::replace_if (msv,first,last) unary_pred x

replace the elements of msv[first,last) that satistfy
unary_pred with x
@end deffn

@geindex stl replace_copy function
@anchor{67}@anchor{stl replace_copy}
@deffn {Function} stl::replace_copy (sv,first,last) (msv,p) x y

same as @pxref{65,,replace} (msv,first,last) x y except that
the modified sequence is placed in msv[p,p+last-first)
@end deffn

@geindex stl replace_copy_if function
@anchor{68}@anchor{stl replace_copy_if}
@deffn {Function} stl::replace_copy_if (sv,first,last) (msv,p) unary_pred x

same as @pxref{66,,replace_if} except that the modified sequence is placed in
msv[p,p+last-first)
@end deffn

@geindex stl fill function
@anchor{69}@anchor{stl fill}
@deffn {Function} stl::fill (msv,first,last) x

replace all elements in msv[first,last) with x
@end deffn

@geindex stl fill_n function
@anchor{6a}@anchor{stl fill_n}
@deffn {Function} stl::fill_n (msv,first) n x

replace the elements of msv[first,first+n) with x
@end deffn

@geindex stl generate function
@anchor{6b}@anchor{stl generate}
@deffn {Function} stl::generate (msv,first,last) gen_fun

replace the elements in msv[first,last) with the sequence generated by
successive calls to gen_fun (), e.g.,

@example
> let count = ref 0;

> g _ = n when n = get count + 1; put count n; end;

> let sv = mkstlvec 0 10;

> stl::generate sv g $$ members sv;
[1,2,3,4,5,6,7,8,9,10]
@end example

@noindent
@end deffn

@geindex stl generate_n function
@anchor{6c}@anchor{stl generate_n}
@deffn {Function} stl::generate_n (msv,first) n gen_fun

replace all elements in msv[first,first+n) with the sequence
generated by successive calls to gen_fen
@end deffn

@geindex stl remove function
@anchor{6d}@anchor{stl remove}
@deffn {Function} stl::remove (msv,first,last) x

same as @pxref{6e,,remove_if} (msv,first,last) (==x).
@end deffn

@geindex stl remove_if function
@anchor{6e}@anchor{stl remove_if}
@deffn {Function} stl::remove_if (msv,first,last) unary_pred

remove elements in msv[first,last) that satisfy unary_pred. If n elements
do not satisfy unary_pred, they are moved to msv[first,first+n), preserving
their relative order. The content of msv[first+n,svend) is
undefined. Returns first+n, or stl::svend if first+n is greater than the
number of elements in msv
@end deffn

@geindex stl remove_copy function
@anchor{6f}@anchor{stl remove_copy}
@deffn {Function} stl::remove_copy (sv,first,last) (msv,first) x

same as @pxref{6d,,remove} except that the purged sequence is copied to
(msv,first) and sv[first,last) is not changed
@end deffn

@geindex stl remove_copy_if function
@anchor{70}@anchor{stl remove_copy_if}
@deffn {Function} stl::remove_copy_if (sv,first,last) (msv,first) unary_pred

same as @pxref{6e,,remove_if} except that the purged sequence is copied to
(msv,first) and sv[first,last) is not changed
@end deffn

@geindex stl unique function
@anchor{71}@anchor{stl unique}
@deffn {Function} stl::unique (msv,first,last) bin_pred

eliminates consecutive duplicates from sv[first,last), using
bin_pred to test for equality. The purged sequence is moved to
sv[first,first+n) preserving their relative order, where n
is the size of the purged sequence. Returns first+n or stl::svend if
first+n is greater than the number of elements in msv
@end deffn

@geindex stl unique_copy function
@anchor{72}@anchor{stl unique_copy}
@deffn {Function} stl::unique_copy (sv,first,last) (msv,first) bin_pred

same as @pxref{71,,unique} except that the purged sequence is copied to
(msv,first) and sv[first,last) is not changed
@end deffn

@geindex stl reverse function
@anchor{73}@anchor{stl reverse}
@deffn {Function} stl::reverse (msv,first,last)

Reverses the order of the elements in sv[first,last).
@end deffn

@geindex stl reverse_copy function
@anchor{74}@anchor{stl reverse_copy}
@deffn {Function} stl::reverse_copy (sv,first,last) (msv,first)

same as @pxref{73,,reverse} except that the reversed sequence is copied to
(msv,first) and sv[first,last) is not changed.
@end deffn

@geindex stl rotate function
@anchor{75}@anchor{stl rotate}
@deffn {Function} stl::rotate (msv,first,middle,last)

rotates the elements of msv[first,middle,last] so that
middle becomes the first element of msv[first,last].
@end deffn

@geindex stl rotate_copy function
@anchor{76}@anchor{stl rotate_copy}
@deffn {Function} stl::rotate_copy (msv,first,middle,last) (msv,first)

same as rotate except that the rotated sequence is copied to
(msv,first) and sv[first,last) is not changed.
@end deffn

@geindex stl random_shuffle function
@anchor{77}@anchor{stl random_shuffle}
@deffn {Function} stl::random_shuffle (msv,first,last)

randomly reorders the elements in msv[first,last)
@end deffn

@geindex stl partition function
@anchor{78}@anchor{stl partition}
@deffn {Function} stl::partition (msv,first,last) unary_pred

places the elements in msv[first,last) that satisfy unary_pred
before those that don't. Returns middle, where msv
[first,middle) contains all of the elements that satisfy unary_pre,
and msv [middle, last) contains those that do not
@end deffn

@geindex stl stable_partition function
@anchor{79}@anchor{stl stable_partition}
@deffn {Function} stl::stable_partition (msv,first,last) unary_pred

same as partition except that the relative positions of the elements in
each group are preserved
@end deffn


@node Examples<4>,,Operations<2>,STL Modifying Algorithms
@anchor{examples<4>}@anchor{7a}@anchor{id6}
@section Examples
See ut_modifying.pure in the pure-stlvec/ut directory.


@node STL Sort Algorithms,STL Merge Algorithms,STL Modifying Algorithms,Top
@anchor{stl sort algorithms}@anchor{7b}@anchor{stl-sort-algorithms}
@chapter STL Sort Algorithms
The stlvec::sort module provides an interface to the STL's sorting and binary
search algorithms.


@menu
* Imports: Imports<4>.
* Operations: Operations<3>.
* Examples: Examples<5>.
@end menu


@node Imports<4>,Operations<3>,,STL Sort Algorithms
@anchor{imports<4>}@anchor{7c}@anchor{id7}
@section Imports
To use the operations of this module, add the following import declaration
to your program:

@example
using stlvec::sort;
@end example

@noindent
All of the functions are in the stl namespace.


@node Operations<3>,Examples<5>,Imports<4>,STL Sort Algorithms
@anchor{operations<3>}@anchor{7d}@anchor{id8}
@section Operations
All of the functions in this module require the caller to supply an ordering
function, comp. The functions (<) and (>) are commonly passed as comp.

@geindex stl sort function
@anchor{7e}@anchor{stl sort}
@deffn {Function} stl::sort (msv, first, last) comp

sorts msv[first, last)
@end deffn

@geindex stl stable_sort function
@anchor{7f}@anchor{stl stable_sort}
@deffn {Function} stl::stable_sort (msv, first, last) comp

sorts msv[first, last), preserving the relative order of equal
members
@end deffn

@geindex stl partial_sort function
@anchor{80}@anchor{stl partial_sort}
@deffn {Function} stl::partial_sort (msv, first, middle, last) comp

fills msv[first, middle) with the elements of msv[first,last) that would
appear there if msv[first,last) were sorted using comp and fills
msv[middle,last) with the remaining elements in unspecified order
@end deffn

@geindex stl partial_sort_copy function
@anchor{81}@anchor{stl partial_sort_copy}
@deffn {Function} stl::partial_sort_copy (sv, first1, last1) (msv, first2, last2) comp

let n be the number of elements in sv[first1, last1) and r be the number of
elements in msv[first2, last2). If r < n, @pxref{81,,partial_sort_copy} fills
msv[first2, last2) with the first r elements of what sv[first1, last1)
would be if it had been sorted. If r >= n, it fills msv[first2, first2+n)
with the elements of sv[first1, last1) in sorted order. sv[first1,last1) is
unchanged
@end deffn

@geindex stl nth_element function
@anchor{82}@anchor{stl nth_element}
@deffn {Function} stl::nth_element (msv, first, middle, last) comp

rearranges the elements of msv[first, last) as follows. Let n be middle -
first, and let x be the nth smallest element of msv[first, last). After the
function is called, sv!middle will be x. All of the elements of msv[first,
middle) will be less than x and all of the elements of msv[middle+1, last)
will be greater than x
@end deffn

The next four functions assume that sv[first, last) is ordered by comp.

@geindex stl lower_bound function
@anchor{83}@anchor{stl lower_bound}
@deffn {Function} stl::lower_bound (sv, first, last) x comp

returns an int designating the first position into which x can be inserted
into sv[first, last) while maintaining the sorted ordering
@end deffn

@geindex stl upper_bound function
@anchor{84}@anchor{stl upper_bound}
@deffn {Function} stl::upper_bound (sv, first, last) x comp

returns an int designating the last position into which x can be inserted
into sv[first, last) while maintaining the sorted ordering
@end deffn

@geindex stl equal_range function
@anchor{85}@anchor{stl equal_range}
@deffn {Function} stl::equal_range (sv, first, last) x comp

returns a pair of ints, (lower, upper) where lower and upper would have
been returned by separate calls to lower_bound and upper_bound.
@end deffn

@geindex stl binary_search function
@anchor{86}@anchor{stl binary_search}
@deffn {Function} stl::binary_search (sv, first, last) x comp

returns true if x is an element of sv[first, last)
@end deffn


@node Examples<5>,,Operations<3>,STL Sort Algorithms
@anchor{examples<5>}@anchor{87}@anchor{id9}
@section Examples
See ut_sort.pure in the pure-stlvec/ut directory.


@node STL Merge Algorithms,STL Heap Algorithms,STL Sort Algorithms,Top
@anchor{stl merge algorithms}@anchor{88}@anchor{stl-merge-algorithms}
@chapter STL Merge Algorithms
The stlvec::merge module provides an interface to the STL's merge
algorithms. These algorithms operate on sorted ranges.


@menu
* Imports: Imports<5>.
* Operations: Operations<4>.
* Examples: Examples<6>.
@end menu


@node Imports<5>,Operations<4>,,STL Merge Algorithms
@anchor{imports<5>}@anchor{89}@anchor{id10}
@section Imports
To use the operations of this module, add the following import declaration
to your program:

@example
using stlvec::merge;
@end example

@noindent
All of the functions are in the stl namespace.


@node Operations<4>,Examples<6>,Imports<5>,STL Merge Algorithms
@anchor{operations<4>}@anchor{8a}@anchor{id11}
@section Operations
All of the functions in this module require the caller to supply an ordering
function, comp (as for the Pure library sort function). They only work
properly on input ranges that have been previously sorted using comp. The set
operations generally do not check for range overflow because it is not
generally possible to determine the length of the result of a set operation
until after it is completed. In most cases you will get a nasty segmentation
fault if the result is bigger than the target range. The best way to avoid
this possibility it to use a back iterator to specifify the target range.

See parameter naming conventions at ..

@geindex stl merge function
@anchor{8b}@anchor{stl merge}
@deffn {Function} stl::merge (sv1,first1,last1) (sv2,first2,last2) (msv,p) comp

merges the two sorted ranges into the sorted range msv[p,p+n) where n is
the total length of the merged sequence
@end deffn

@geindex stl inplace_merge function
@anchor{8c}@anchor{stl inplace_merge}
@deffn {Function} stl::inplace_merge (msv,first, middle, last) comp

merges msv[first,middle) and msv[middle,last) into the sorted range
msv[first,last)
@end deffn

@geindex stl includes function
@anchor{8d}@anchor{stl includes}
@deffn {Function} stl::includes (sv1,first1,last1) (sv2,first2,last2) comp

returns true if every element of sv2[first2,last2) is an element
of sv1[first1,last1)
@end deffn

@geindex stl set_union function
@anchor{8e}@anchor{stl set_union}
@deffn {Function} stl::set_union (sv1,first1,last1) (sv2,first2,last2) (msv,p) comp

places the sorted union of sv1[first1,last1) and
sv2[first2,last2) into msv[p,p+n) where n is the number
of elements in the sorted union, and returns the past-the-end position of
the sorted union
@end deffn

@geindex stl set_intersection function
@anchor{8f}@anchor{stl set_intersection}
@deffn {Function} stl::set_intersection (sv1,first1,last1) (sv2,first2,last2) (msv,p) comp

places the sorted intersection of sv1[first1,last1) and sv2[first2,last2)
into msv[p,p+n) where n is the number of elements in the sorted
intersection, and returns p+n (or stl::svend, if applicable)
@end deffn

@geindex stl set_difference function
@anchor{90}@anchor{stl set_difference}
@deffn {Function} stl::set_difference (sv1,first1,last1) (sv2,first2,last2) (msv,p) comp

places the sorted difference of sv1[first1,last1) and sv2[first2,last2)
into msv[p,p+n) where n is the number of elements in the sorted difference,
and returns p+n (or stl::svend, if applicable)
@end deffn

@geindex stl set_symmetric_difference function
@anchor{91}@anchor{stl set_symmetric_difference}
@deffn {Function} stl::set_symmetric_difference (sv1,first1,last1) (sv2,first2,last2) (msv,p) comp

places the sorted symmetric_difference of sv1[first1,last1) and
sv2[first2,last2) into msv[p,p+n) where n is the number of elements in the
sorted symmetric_difference, and returns returns p+n (or stl::svend, if
applicable)
@end deffn


@node Examples<6>,,Operations<4>,STL Merge Algorithms
@anchor{examples<6>}@anchor{92}@anchor{id12}
@section Examples
See ut_merge.pure in the pure-stlvec/ut directory.


@node STL Heap Algorithms,Min/Max STL Algorithms,STL Merge Algorithms,Top
@anchor{stl heap algorithms}@anchor{93}@anchor{stl-heap-algorithms}
@chapter STL Heap Algorithms
The stlvec::heap module provides an interface to the STL's heap operations.


@menu
* Imports: Imports<6>.
* Operations: Operations<5>.
* Examples: Examples<7>.
@end menu


@node Imports<6>,Operations<5>,,STL Heap Algorithms
@anchor{imports<6>}@anchor{94}@anchor{id13}
@section Imports
To use the operations of this module, add the following import declaration
to your program:

@example
using stlvec::heap;
@end example

@noindent
All of the functions are in the stl namespace.


@node Operations<5>,Examples<7>,Imports<6>,STL Heap Algorithms
@anchor{operations<5>}@anchor{95}@anchor{id14}
@section Operations
All of the functions in this module require the caller to supply an ordering
function, comp (as for the Pure library sort function). The functions (<)
and (>) are commonly passed as comp.

@geindex stl make_heap function
@anchor{96}@anchor{stl make_heap}
@deffn {Function} stl::make_heap (msv,first,last) comp

rearranges the elements of msv[first,last) so that they are a
heap, i.e., after this msv!first will be the largest element in
msv[first,last), and push_heap and pop_heap will work properly
@end deffn

@geindex stl push_heap function
@anchor{97}@anchor{stl push_heap}
@deffn {Function} stl::push_heap (msv,first,last) comp

makes msv[first,last) a heap (assuming that msv[first,last-1) was a heap)
@end deffn

@geindex stl pop_heap function
@anchor{98}@anchor{stl pop_heap}
@deffn {Function} stl::pop_heap (msv,first,last) comp

swaps msv!first with msv!(last-1), and makes msv[first,last-1) a heap
(assuming that msv[first,last) was a heap)
@end deffn

@geindex stl sort_heap function
@anchor{99}@anchor{stl sort_heap}
@deffn {Function} stl::sort_heap (msv,first,last) comp

sorts the elements in msv[first,last)
@end deffn


@node Examples<7>,,Operations<5>,STL Heap Algorithms
@anchor{examples<7>}@anchor{9a}@anchor{id15}
@section Examples
See ut_heap.pure in the pure-stlvec/ut directory.


@node Min/Max STL Algorithms,STL Numeric Algorithms,STL Heap Algorithms,Top
@anchor{min/max stl algorithms}@anchor{9b}@anchor{min-max-stl-algorithms}
@chapter Min/Max STL Algorithms
The stlvec::minmax module provides an interface to a few additional STL
algorithms.


@menu
* Imports: Imports<7>.
* Operations: Operations<6>.
* Examples: Examples<8>.
@end menu


@node Imports<7>,Operations<6>,,Min/Max STL Algorithms
@anchor{imports<7>}@anchor{9c}@anchor{id16}
@section Imports
To use the operations of this module, add the following import declaration
to your program:

@example
using stlvec::minmax;
@end example

@noindent
All of the functions are in the stl namespace.


@node Operations<6>,Examples<8>,Imports<7>,Min/Max STL Algorithms
@anchor{operations<6>}@anchor{9d}@anchor{id17}
@section Operations
All of the functions in this module require the caller to supply an ordering
function, comp (as for the Pure library sort function). The functions (<)
and (>) are commonly passed as comp.

@geindex stl min_element function
@anchor{9e}@anchor{stl min_element}
@deffn {Function} stl::min_element (sv,first,last) comp

returns the position of the minimal element of sv[first,last) under the
ordering defined by comp
@end deffn

@geindex stl max_element function
@anchor{9f}@anchor{stl max_element}
@deffn {Function} stl::max_element (sv,first,last) comp

returns the position of the maximal element of sv[first,last) under the
ordering defined by comp
@end deffn

@geindex stl lexicographical_compare function
@anchor{a0}@anchor{stl lexicographical_compare}
@deffn {Function} stl::lexicographical_compare (sv1,first1,last1) (sv2,first2,last2) comp

compares sv1[first1,last1) and sv2[first2,last2) element by element
according to the ordering defined by comp, and returns true if the first
sequence is less than the second
@end deffn

Algorithms are provided for stepping through all the permutations the elements
of a stlvec. For these purposes, the first permutation has the elements of
msv[first,last) sorted in ascending order and the last has the elements sorted
in descending order.

@geindex stl next_permutation function
@anchor{a1}@anchor{stl next_permutation}
@deffn {Function} stl::next_permutation (msv,first,last) comp

rearranges msv[first,last) to produce the next permutation, in
the ordering imposed by comp. If msv[first,last) is not the
last permutation, change msv[first,last) to the next
permutation and return true. Otherwise, change it to the first
permutation and return true
@end deffn

@geindex stl prev_permutation function
@anchor{a2}@anchor{stl prev_permutation}
@deffn {Function} stl::prev_permutation (msv,first,last) comp

next_permutation in reverse
@end deffn


@node Examples<8>,,Operations<6>,Min/Max STL Algorithms
@anchor{examples<8>}@anchor{a3}@anchor{id18}
@section Examples
See ut_minmax.pure in the pure-stlvec/ut directory.


@node STL Numeric Algorithms,Trace Mode,Min/Max STL Algorithms,Top
@anchor{stl numeric algorithms}@anchor{a4}@anchor{stl-numeric-algorithms}
@chapter STL Numeric Algorithms
The stlvec::numeric module provides an interface to the STL's numeric
algorithms.


@menu
* Imports: Imports<8>.
* Operations: Operations<7>.
* Examples: Examples<9>.
@end menu


@node Imports<8>,Operations<7>,,STL Numeric Algorithms
@anchor{imports<8>}@anchor{a5}@anchor{id19}
@section Imports
To use the operations of this module, add the following import declaration
to your program:

@example
using stlvec::numeric;
@end example

@noindent
All of the functions are in the stl namespace.


@node Operations<7>,Examples<9>,Imports<8>,STL Numeric Algorithms
@anchor{operations<7>}@anchor{a6}@anchor{id20}
@section Operations

@geindex stl accumulate function
@anchor{a7}@anchor{stl accumulate}
@deffn {Function} stl::accumulate (sv,first,last) x bin_fun

accumulate bin_fun over x and the members of sv[first,last), like foldl
@end deffn

@geindex stl inner_product function
@anchor{a8}@anchor{stl inner_product}
@deffn {Function} stl::inner_product (sv1,first1,last1) (sv2,first2,last2) x bin_fun1 bin_fun2

initialize ret with x. Traverse pairs of elements of sv1[first1,last1) and
sv2[first2,last2), denoted by (e1, e2), replacing ret with (bin_fun1 ret $
bin_fun2 e1 e2). The number pairs traversed is equal to the size of
sv1[first1,last1)
@end deffn

@geindex stl partial_sum function
@anchor{a9}@anchor{stl partial_sum}
@deffn {Function} stl::partial_sum (sv,first,last) (msv, p) bin_fun

accumulate bin_fun f over the elements of sv1[first1,last1), placing
itermediate results in msv[p,p+n), where n is last - first, and returns q
where m is q - n and msv[m,q) is the intermediate sequence
@end deffn

@geindex stl adjacent_difference function
@anchor{aa}@anchor{stl adjacent_difference}
@deffn {Function} stl::adjacent_difference (sv,first,last) (msv, p) bin_fun

produce a sequence of new elements by applying bin_fun to adjacent elements
of sv[first,last), placing the new elements in msv[p,p+n), where n is last
- first, with the intermediate results, and returns q where m is q - n and
msv[m,q) is the new sequence
@end deffn


@node Examples<9>,,Operations<7>,STL Numeric Algorithms
@anchor{examples<9>}@anchor{ab}@anchor{id21}
@section Examples
See ut_numeric.pure in the pure-stlvec/ut directory.


@node Trace Mode,Index,STL Numeric Algorithms,Top
@anchor{trace mode}@anchor{ac}@anchor{trace-mode}
@chapter Trace Mode
If the pure-stlvec dlls are built using 'make debug' (as opposed to 'make',
'make all' or 'make dlls'), the pure-stlvec tracing functions will be
enabled. These functions, all of which are defined in the stl namespace, can
be used to trace the creation and deletion of stlvecs as well as the changes
in ref counts that occur as Pure objects are moved and copied. In addition to
being useful for maintaining the pure-stlvec modules, these functions can be
used to observe STL copy semantics.

@geindex stl set_sv_trace function
@anchor{ad}@anchor{stl set_sv_trace}
@deffn {Function} stl::set_sv_trace on_off::int

enables or disables tracing the creation and deletion of stlvecs
@end deffn

@geindex stl sv_trace_enabled function
@anchor{ae}@anchor{stl sv_trace_enabled}
@deffn {Function} stl::sv_trace_enabled

returns 1 if stlvec tracing is enabled, else 0
@end deffn

@geindex stl set_px_trace function
@anchor{af}@anchor{stl set_px_trace}
@deffn {Function} stl::set_px_trace on_off::int

enables or disables tracing 'copying' of Pure expressions
@end deffn

@geindex stl px_trace_enabled function
@anchor{b0}@anchor{stl px_trace_enabled}
@deffn {Function} stl::px_trace_enabled

returns 1 if Pure expression tracing is enabled, else 0
@end deffn

In addition, the following function, also in the stl namespace, is available
whether or not debug is passed to make.

@geindex stl refc function
@anchor{b1}@anchor{stl refc}
@deffn {Function} stl::refc x

returns the x's reference count (maintained by the Pure runtime for
garbage collection purposes)
@end deffn


@node Index,,Trace Mode,Top
@anchor{index}
@unnumbered Index
@printindex ge

@c %**end of body
@bye
