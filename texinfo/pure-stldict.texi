\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename pure-stldict.info
@documentencoding UTF-8
@copying
Generated by Sphinx
@end copying
@settitle pure-stldict
@defindex ge
@paragraphindent 2
@exampleindent 4
@afourlatex
@dircategory Pure Language and Library Documentation
@direntry
* pure-stldict: (pure-stldict.info).    pure-stldict
@end direntry

@c %**end of header

@titlepage
@title pure-stldict
@author Albert Gr√§f (Editor)
@end titlepage
@contents

@c %** start of user preamble

@c %** end of user preamble

@ifnottex
@node Top
@top pure-stldict
@end ifnottex

@c %**start of body
@geindex stldict module
@anchor{0}@anchor{module-hashdict}
@geindex hashdict module
@anchor{1}@anchor{module-orddict}
@geindex orddict module
Version 0.3, December 21, 2011

Albert Graef <@email{Dr.Graef@@t-online.de}>

This package provides a light-weight, no frills interface to the C++
dictionary containers @code{map} and @code{unordered_map}. The @pxref{2,,stldict} module
makes these data structures available in Pure land and equips them with a
(more or less) idiomatic Pure container interface.

The C++ containers are part of the standard C++ library, see the @uref{http://en.cppreference.com/w/cpp,C++ standard library documentation} for details. They were originally based on the
@uref{http://www.sgi.com/tech/stl/,Standard Template Library}, so they are also sometimes referred to as "STL
containers"; hence the name of this package.

@anchor{3}@anchor{c-standard-library-documentation}@anchor{4}@anchor{standard-template-library}
@menu
* Copying::
* Installation::
* Usage::
* Types::
* Operations::
* Examples::
* Index::

@detailmenu
 --- The Detailed Node Listing ---

Operations

* Basic Operations::
* Comparisons::
* Set-Like Operations::
* List-Like Operations::
* Iterators::
* Low-Level Operations::
* Pretty-Printing::
@end detailmenu
@end menu


@node Copying,Installation,Top,Top
@anchor{copying}@anchor{2}@anchor{module-stldict}@anchor{5}@anchor{6}
@chapter Copying
Copyright (c) 2011 by Albert Graef.

pure-stldict is free software: you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option) any
later version.

pure-stldict is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
details.

You should have received a copy of the GNU Lesser General Public License along
with this program.  If not, see <@indicateurl{http://www.gnu.org/licenses/}>.


@node Installation,Usage,Copying,Top
@anchor{installation}@anchor{7}
@chapter Installation
Get the latest source from
@indicateurl{http://pure-lang.googlecode.com/files/pure-stldict-0.3.tar.gz}.

Run @code{make} to compile the modules and @code{make install} (as root) to install
them in the Pure library directory. This requires GNU make, and of course you
need to have Pure (and a C++ library which includes the STL) installed.

@code{make} tries to guess your Pure installation directory and platform-specific
setup. If it gets this wrong, you can set some variables manually, please
check the Makefile for details.


@cartouche
@quotation Note
This module requires Pure 0.50 or later and a recent version of the
C++ library (GNU libstdc++ v3 has been tested). All proper C++11 libraries
should work out of the box, while (recent) C++0x implementations may
require some fiddling with the sources and/or the compilation options. Pre
C++0x library versions surely require considerably more work, especially in
the hashdict module.
@end quotation
@end cartouche


@node Usage,Types,Installation,Top
@anchor{usage}@anchor{8}
@chapter Usage
After installation, you can use the operations of this package by placing the
following import declaration in your Pure programs:

@example
using stldict;
@end example

@noindent
This imports the whole shebang. If you only need either the hashed or the
ordered dictionaries, you can also import the corresponding modules
separately, i.e.:

@example
using hashdict;
@end example

@noindent
or:

@example
using orddict;
@end example

@noindent

@node Types,Operations,Usage,Top
@anchor{types}@anchor{9}
@chapter Types
In Pure land, the C++ @code{map} and @code{unordered_map} containers and their
@code{multimap} variants are made available as a collection of four data
structures:

@geindex hashdict type
@geindex hashmdict type
@anchor{a}@anchor{hashdict/type}
@deffn {type} hashdict
@anchor{b}@anchor{hashmdict/type}
@deffnx {type} hashmdict

Hashed (unordered) dictionary data structures. These work with arbitrary key
(and value) types, like the hashed dictionary and set data structures in the
standard library, and can be found in the @code{hashdict.pure} module.
@end deffn

@geindex orddict type
@geindex ordmdict type
@anchor{c}@anchor{orddict/type}
@deffn {type} orddict
@anchor{d}@anchor{ordmdict/type}
@deffnx {type} ordmdict

Ordered dictionary data structures. These require the keys to be ordered by
the standard @code{<} predicate, like the ordered dictionary and set data
structures in the standard library, and can be found in the @code{orddict.pure}
module.
@end deffn

Note that @pxref{a,,hashdict} and @pxref{b,,hashmdict} differ in that the
former has exactly one key-value association for each key in the dictionary,
while the latter is a "multidict" which allows multiple values to be
associated with a key. The same applies to the @pxref{c,,orddict} and
@pxref{d,,ordmdict} types.

In addition, there are various supertypes which correspond to different unions
of the hashed and ordered dictionary types. These are:

@geindex hashxdict type
@geindex ordxdict type
@anchor{e}@anchor{hashxdict/type}
@deffn {type} hashxdict
@anchor{f}@anchor{ordxdict/type}
@deffnx {type} ordxdict

Denotes any kind of hashed or ordered dictionary, respectively.
@end deffn

@geindex stldict type
@geindex stlmdict type
@anchor{10}@anchor{stldict/type}
@deffn {type} stldict
@anchor{11}@anchor{stlmdict/type}
@deffnx {type} stlmdict

Denotes any kind of singled-valued or multi-valued dictionary,
respectively.
@end deffn

@geindex stlxdict type
@anchor{12}@anchor{stlxdict/type}
@deffn {type} stlxdict

Denotes any kind of dictionary.
@end deffn

For instance, you can use @pxref{e,,hashxdict} to match both
@pxref{a,,hashdict} and @pxref{b,,hashmdict} values. Likewise,
@pxref{11,,stlmdict} matches both @pxref{b,,hashmdict} and
@pxref{d,,ordmdict} values. To match any kind of dictionary, use the
@pxref{12,,stlxdict} type.

These data structures are very thin wrappers around the C++ container types;
in fact, they are just pointers to the C++ containers. Memory management of
these objects is automatic, and customizable @pxref{13,,pretty-printing} is provided as
well.

All data structures offer most of the usual Pure container interface (as well
as some extensions). In contrast to the standard library dictionaries, they
can be used both as dictionaries (holding key => value pairs) and sets
(holding only keys, without associated values), even at the same time.

The other important difference to the standard library containers is that the
stldict containers are @emph{mutable} data structures; inserting and deleting
members really modifies the underlying C++ containers. (However, it is
possible to take copies of the containers in situations where it's necessary
to preserve value semantics.)


@node Operations,Examples,Types,Top
@anchor{operations}@anchor{14}
@chapter Operations
All types of dictionaries are simply pointers to the corresponding C++
containers which hold key-value associations where both keys and values may be
arbitrary Pure expressions. The @pxref{15,,basic operations} described below can be
used to create, query and modify these objects. @pxref{16,,Comparisons} of dictionaries
are implemented as well, and the @pxref{17,,set-like operations} let you combine
dictionaries in different ways. These operations provide an interface similar
to the usual Pure container API.

In addition, the @pxref{2,,stldict} module provides some @pxref{18,,list-like operations}
on dictionaries, so that the member data can be processed and aggregated in a
convenient fashion (including the ability to use dictionaries as generators in
list and matrix comprehensions), and there's also an interface to C++
@pxref{19,,iterators} which enables you to traverse, inspect and modify the containers in
a more C++-like way. Some @pxref{1a,,low-level operations} are available to access
information about the underlying hash table of a hashed dictionary. Last but
not least, the module also offers some operations to customize the
@pxref{13,,pretty-printing} of dictionary values.

When working with these data structures, please note the following special
properties of this implementation:

@itemize *
@item
All dictionary types are @emph{mutable}. Inserting and deleting members really
modifies the underlying C++ data structure as a side effect of the
operation. If you need value semantics, you should probably use one of the
dictionary or set data structures from the standard Pure library
instead. Another possibility is to take a copy of a hashdict using the
@pxref{1b,,copy} function if you need to preserve the original value.
@item
Keys in a hashed dictionary may be stored in an apparently random order (not
necessarily in the order in which they were inserted), while they are
guaranteed to be in ascending order (by key) for ordered dictionaries.
However, note that even in the latter case, the order of different members
for the same key in a multi-valued dictionary is not specified. This must be
taken into account when comparing dictionaries, see below. The order of
members in a dictionary also matters when listing data from a container
using, e.g., the @pxref{1c,,members}, @pxref{1d,,keys} and
@pxref{1e,,vals} operations.
@item
Two dictionaries are considered syntactically equal iff they contain the
same elements in exactly the same order, using syntactic equality on both
the keys and the associated values. This test can always be done in linear
time, but is of limited usefulness for most kinds of dictionaries, since the
exact order of members in the dictionary may vary depending on how the
dictionary was constructed. Semantic equality operations are provided which
check (albeit at the cost of increased running time) whether two containers
contain the same members irrespective of element order, using semantic
equality on the members. Various subset comparisons are provided as well,
please check the @pxref{16,,Comparisons} section for details.
@item
Values in a dictionary can be omitted, so that a dictionary can be also used
as a set data structure. This obviates the need for a separate set data
structure at the cost of some (small) increase in memory usage. Also note
that you can't really have a hash pair @code{x=>y} as a member of a set, since
it always denotes a key-value association. As a remedy, you may use ordinary
pairs @code{(x,y)} instead.
@end itemize


@menu
* Basic Operations::
* Comparisons::
* Set-Like Operations::
* List-Like Operations::
* Iterators::
* Low-Level Operations::
* Pretty-Printing::
@end menu


@node Basic Operations,Comparisons,,Operations
@anchor{basic operations}@anchor{15}@anchor{basic-operations}
@section Basic Operations

@geindex hashdict function
@geindex hashmdict function
@geindex orddict function
@geindex ordmdict function
@anchor{1f}@anchor{hashdict}
@deffn {Function} hashdict xs
@anchor{20}@anchor{hashmdict}
@deffnx {Function} hashmdict xs
@anchor{21}@anchor{orddict}
@deffnx {Function} orddict xs
@anchor{22}@anchor{ordmdict}
@deffnx {Function} ordmdict xs

Create a dictionary of the corresponding type from a list, tuple or vector
of its members. Members can be specified as hash pairs @code{x=>y} to denote a
key-value association. Any other kind of value denotes a singleton key
without associated value. Note that the ordered dictionaries require that
the keys be ordered, i.e., the @code{<} predicate must be defined on them.

The same operations can also be used to construct a dictionary from another
dictionary of any type. If the given dictionary is already of the
corresponding type, this is a no-op (if you want to copy the dictionary
instead, use the @pxref{1b,,copy} function below). Otherwise the given
dictionary is converted to a new dictionary of the desired target type.
@end deffn

@geindex mkhashdict function
@geindex mkhashmdict function
@geindex mkorddict function
@geindex mkordmdict function
@anchor{23}@anchor{mkhashdict}
@deffn {Function} mkhashdict y xs
@anchor{24}@anchor{mkhashmdict}
@deffnx {Function} mkhashmdict y xs
@anchor{25}@anchor{mkorddict}
@deffnx {Function} mkorddict y xs
@anchor{26}@anchor{mkordmdict}
@deffnx {Function} mkordmdict y xs

Create a dictionary from a list of keys and a constant value. The resulting
dictionary has the given keys and @code{y} as the value for each key.
@end deffn

@geindex copy function
@anchor{1b}@anchor{copy/stldict}
@deffn {Function} copy m

Create a new dictionary with the same type and content as @code{m}. This is
useful if you want to preserve value semantics when using destructive
update operations such as @pxref{27,,insert} and @pxref{28,,delete}.
In such a case, @pxref{1b,,copy} can be used to take a copy of the
dictionary beforehand, so that the original dictionary remains unmodified.


@cartouche
@quotation Note
This operation needs linear time with respect to the size of the
dictionary (i.e., its number of members). If logarithmic update times
are needed while still preserving value semantics, you should use the
dictionary and set data structures from the standard library instead.
@end quotation
@end cartouche
@end deffn

@geindex hashdictp function
@geindex hashmdictp function
@geindex orddictp function
@geindex ordmdictp function
@anchor{29}@anchor{hashdictp}
@deffn {Function} hashdictp m
@anchor{2a}@anchor{hashmdictp}
@deffnx {Function} hashmdictp m
@anchor{2b}@anchor{orddictp}
@deffnx {Function} orddictp m
@anchor{2c}@anchor{ordmdictp}
@deffnx {Function} ordmdictp m

Check whether the argument is a dictionary of the corresponding type.
@end deffn

@geindex hashxdictp function
@geindex ordxdictp function
@geindex stldictp function
@geindex stlmdictp function
@geindex stlxdictp function
@anchor{2d}@anchor{hashxdictp}
@deffn {Function} hashxdictp m
@anchor{2e}@anchor{ordxdictp}
@deffnx {Function} ordxdictp m
@anchor{2f}@anchor{stldictp}
@deffnx {Function} stldictp m
@anchor{30}@anchor{stlmdictp}
@deffnx {Function} stlmdictp m
@anchor{31}@anchor{stlxdictp}
@deffnx {Function} stlxdictp m

Check whether the argument is a dictionary of the corresponding supertype.
@end deffn

@geindex # prefix function
@anchor{32}@anchor{#/stldict}
@deffn {Function} # m

The size of a dictionary (the number of members it contains).
@end deffn

@geindex infix function
@anchor{33}@anchor{!/stldict}
@deffn {Function} m ! x

Get the value stored under key @code{x} in the dictionary @code{m}. This may be
@code{x} itself if @code{x} is a member of @code{m} but has no associated value. In
the case of a multidict this actually returns a list of values (which may
be empty if @code{m} doesn't contain @code{x}). Otherwise an
@code{out_of_bounds} exception is thrown if @code{m} doesn't contain @code{x}.
@end deffn

@geindex null function
@anchor{34}@anchor{null/stldict}
@deffn {Function} null m

Test whether @code{m} is empty, i.e., has zero members.
@end deffn

@geindex member function
@anchor{35}@anchor{member/stldict}
@deffn {Function} member m x

Test whether @code{m} contains a member with key @code{x}.
@end deffn

@geindex members function
@geindex list function
@anchor{1c}@anchor{members/stldict}
@deffn {Function} members m
@anchor{36}@anchor{list/stldict}
@deffnx {Function} list m

Return the list of members of @code{m}. The member list will be in an
apparently random order in the hashed dictionary case, while it is
guaranteed to be in ascending order (by key) for ordered dictionaries. The
same order is also used for the other inspection operations below.
@end deffn

@geindex stream function
@anchor{37}@anchor{stream/stldict}
@deffn {Function} stream m

Like @pxref{36,,list}, but the member list is returned as a lazy list
(cf. @emph{Lazy Evaluation and Streams}) whose members will be computed on
the fly as the list is being traversed; cf. @pxref{19,,Iterators}.
@end deffn

@geindex tuple function
@geindex vector function
@anchor{38}@anchor{tuple/stldict}
@deffn {Function} tuple m
@anchor{39}@anchor{vector/stldict}
@deffnx {Function} vector m

Return the members as a tuple or vector.
@end deffn

@geindex keys function
@anchor{1d}@anchor{keys/stldict}
@deffn {Function} keys m

Return the list of keys in the dictionary.
@end deffn

@geindex vals function
@anchor{1e}@anchor{vals/stldict}
@deffn {Function} vals m

Return the list of corresponding values. In the case of a singleton key
@code{x} without associated value, @code{x} itself is returned instead.
@end deffn

As already mentioned, the following modification operations are destructive,
i.e., they actually modify the underlying dictionary data structure. If this
is not desired, you'll first have to take a copy of the target dictionary, see
@pxref{1b,,copy}.

@geindex insert function
@geindex insert function
@geindex update function
@anchor{27}@anchor{insert/stldict}
@deffn {Function} insert m x
@anchor{3a}@anchor{insert/stldict2}
@deffnx {Function} insert m (x=>y)
@anchor{3b}@anchor{update/stldict}
@deffnx {Function} update m x y

Insert a singleton key @code{x} or a key-value pair @code{x=>y} into @code{m} and
return the modified dictionary. This always adds a new member in a
multidict, otherwise it replaces an existing value if there is
one. @pxref{3b,,update} is provided as a fully curried version of
@pxref{3a,,insert}, so @code{update m x y} behaves exactly like @code{insert
m (x=>y)}.
@end deffn

@geindex delete function
@geindex delete function
@anchor{28}@anchor{delete/stldict}
@deffn {Function} delete m x
@anchor{3c}@anchor{delete/stldict2}
@deffnx {Function} delete m (x=>y)

Remove the key @code{x} or the specific key-value pair @code{x=>y} from @code{m} (if
present) and return the modified dictionary. In the multidict case, only
the first member with the given key @code{x} or key-value pair @code{x=>y} is
removed.
@end deffn

@geindex clear function
@anchor{3d}@anchor{clear/stldict}
@deffn {Function} clear m

Remove all members from @code{m}, making @code{m} an empty dictionary.
Returns @code{()}.
@end deffn


@node Comparisons,Set-Like Operations,Basic Operations,Operations
@anchor{comparisons}@anchor{16}
@section Comparisons
The usual comparison predicates (@code{==}, @code{~=}, @code{<=}, @code{<}
etc.) are defined on all dictionary types, where two dictionaries are
considered "equal" (@code{m1==m2}) if they both contain the same @code{key=>value}
pairs, and @code{m1<=m2} means that @code{m1} is a sub-dictionary of @code{m2}, i.e.,
all @code{key=>value} pairs of @code{m1} are also contained in @code{m2} (taking into
account multiplicities in the multidict case). Ordered dictionaries compare
keys using equality (assuming two keys @code{a} and @code{b} to be equal if neither
@code{a<b} nor @code{b<a} holds), while hashed dictionaries check for syntactical
equality (using @code{===}). The associated values are compared using the
@code{==} predicate if it is defined, falling back to syntactic equality
otherwise.

The module also defines syntactic equality on all dictionary types, so that
two dictionaries of the same type are considered syntactically equal iff they
contain the same (syntactically equal) members in the same order. This is
always guaranteed if two dictionaries are "identical" (the same C++ pointer),
but generally the member order will depend on how the dictionary was
constructed. Thus if you need to check that two dictionaries contain the same
members irrespective of the order in which the members are listed, the
semantic equality operation @code{==} should be used instead; this will also
handle the case of mixed operand types.

Note that if you really need to check whether two dictionaries are the same
object rather than just syntactically equal, you'll have to cast them to
generic C pointers before comparing them with @code{===}. This can be done
with the following little helper function:

@example
same_dict x y = pointer_cast "void*" x === pointer_cast "void*" y;
@end example

@noindent

@node Set-Like Operations,List-Like Operations,Comparisons,Operations
@anchor{set-like operations}@anchor{17}@anchor{set-like-operations}
@section Set-Like Operations
These operations work with mixed operand types, promoting less general types
to more general ones (i.e., ordered to hashed, and single-valued to
multi-valued dictionaries). The result is always a new dictionary, leaving the
operands unmodified.

@geindex + infix function
@anchor{3e}@anchor{+/stldict}
@deffn {Function} m1 + m2

Sum: @code{m1+m2} adds the members of @code{m2} to @code{m1}.
@end deffn

@geindex - infix function
@anchor{3f}@anchor{-/stldict}
@deffn {Function} m1 - m2

Difference: @code{m1-m2} removes the members of @code{m2} from @code{m1}.
@end deffn

@geindex * infix function
@anchor{40}@anchor{*/stldict}
@deffn {Function} m1 * m2

Intersection: @code{m1*m2} removes the members @emph{not} in @code{m2} from @code{m1}.
@end deffn


@node List-Like Operations,Iterators,Set-Like Operations,Operations
@anchor{list-like operations}@anchor{18}@anchor{list-like-operations}
@section List-Like Operations
The following operations are all overloaded so that they work like their list
counterparts, treating their dictionary argument as if it was the member list
of the dictionary:

@itemize *
@item
@code{do}, @code{map}, @code{catmap}, @code{listmap}, @code{rowmap},
@code{rowcatmap}, @code{colmap}, @code{colcatmap}
@item
@code{all}, @code{any}, @code{filter}, @code{foldl}, @code{foldl1},
@code{foldr}, @code{foldr1}, @code{scanl}, @code{scanl1}, @code{scanr},
@code{scanr1}, @code{sort}
@end itemize

Note that this includes the generic comprehension helpers @code{listmap},
@code{catmap} et al, so that dictionaries can be used as generators in list
and matrix comprehensions as usual (see below for some @pxref{41,,examples}).


@node Iterators,Low-Level Operations,List-Like Operations,Operations
@anchor{iterators}@anchor{19}
@section Iterators
These operations give direct access to C++ iterators on dictionaries which let
you query the elements and do basic manipulations of the container. The
operations are available in the @code{stldict} namespace.

The iterator concept is somewhat alien to Pure and there are some pitfalls
(most notably, destructive updates may render iterators invalid), but the
operations described here are still useful in some situations, especially if
you need to speed up sequential accesses to large containers or modify values
stored in a container in a direct way. They are also used internally to
compute lazy member lists of containers (@pxref{37,,stream} function).

You should only use these directly if you know what you are doing. In
particular, make sure to consult the @uref{http://en.cppreference.com/w/cpp,C++ standard library documentation} for
further details on C++ iterator usage.

The following operations are provided to create an iterator for a given
dictionary.

@geindex stldict begin function
@geindex stldict end function
@anchor{42}@anchor{stldict begin}
@deffn {Function} stldict::begin m
@anchor{43}@anchor{stldict end}
@deffnx {Function} stldict::end m

Return iterators pointing to the beginning and the end of the container.
(Note that @pxref{43,,stldict end} @emph{must} always be specified in qualified
form since @code{end} is a keyword in the Pure language.)
@end deffn

@geindex stldict find function
@anchor{44}@anchor{stldict find}
@deffn {Function} stldict::find m x

Locates a key or specific key=>value pair @code{x} in the container and
returns an iterator pointing to the corresponding member (or @code{stldict::end
m} if @code{m} doesn't contain @code{x}).
@end deffn

Note that these operations return a new iterator object for each invocation.
Also, the created iterator object keeps track of the container it belongs to,
so that the container isn't garbage-collected while the iterator is still
being used. However, removing a member from the container (using either
@pxref{28,,delete} or @pxref{45,,stldict erase}) invalidates all iterators
pointing to that member; the result of trying to access such an invalidated
iterator is undefined (most likely your program will crash).

Similar caveats also apply to the @pxref{37,,stream} function which, as
already mentioned, uses iterators internally to implement lazy list traversal
of the members of a dictionary. Thus, if you delete a member of a dictionary
while traversing it using @pxref{37,,stream}, you better make sure that
this member is not the next stream element remaining to be visited; otherwise
bad things will happen.

The following operations on iterators let you query and modify the contents
of the underlying container:

@geindex stldict dict function
@anchor{46}@anchor{stldict dict}
@deffn {Function} stldict::dict i

Return the dictionary to which @code{i} belongs.
@end deffn

@geindex stldict endp function
@anchor{47}@anchor{stldict endp}
@deffn {Function} stldict::endp i

Check whether the iterator @code{i} points to the end of the container (i.e.,
past the last element).
@end deffn

@geindex stldict next function
@anchor{48}@anchor{stldict next}
@deffn {Function} stldict::next i

Advance the iterator to the next element. Note that for convenience, in
contrast to the corresponding C++ operation this operation is
non-destructive. Thus it actually creates a @emph{new} iterator object, leaving
the original iterator @code{i} unmodified. The operation fails if @code{i} is
already at the end of the container.
@end deffn

@geindex stldict get function
@anchor{49}@anchor{stldict get}
@deffn {Function} stldict::get i

Retrieve the key=>val pair stored in the member pointed to by @code{i} (or
just the key if there is no associated value). The operation fails if @code{i}
is at the end of the container.
@end deffn

@geindex stldict put function
@anchor{4a}@anchor{stldict put}
@deffn {Function} stldict::put i y

Change the value associated with the member pointed to by @code{i} to @code{y},
and return the new value @code{y}. The operation fails if @code{i} is at the end
of the container. Note that @pxref{4a,,stldict put} only allows you to set the
associated value, @emph{not} the key of the member.
@end deffn

@geindex stldict erase function
@anchor{45}@anchor{stldict erase}
@deffn {Function} stldict::erase i

Remove the member pointed to by @code{i} (this invalidates @code{i} and all other
iterators pointing to this member). The operation fails if @code{i} is at the
end of the container.
@end deffn

@geindex == infix function
@geindex ~= infix function
@anchor{4b}@anchor{==/stldict_iterator}
@deffn {Function} i == j
@anchor{4c}@anchor{~=/stldict_iterator}
@deffnx {Function} i ~= j

Semantic equality of iterators. Two iterators are considered equal (@code{i ==
j}) if @code{i} and @code{j} point to the same element in the same container,
and unequal (@code{i ~= j}) if they don't. (In contrast, note that iterators
are in fact just pointers to a corresponding C++ data structure, and thus
@emph{syntactical} equality (@code{i === j}) holds only if two iterators are the
same object.)
@end deffn


@node Low-Level Operations,Pretty-Printing,Iterators,Operations
@anchor{low-level operations}@anchor{1a}@anchor{low-level-operations}
@section Low-Level Operations
The @pxref{0,,hashdict} module also provides a few specialized low-level
operations dealing with the layouts of buckets and the hash policy of the
@pxref{a,,hashdict} and @pxref{b,,hashmdict} containers, such as
@code{bucket_count}, @code{load_factor}, @code{rehash} etc. These operations, which are
all kept in their own separate @code{hashdict} namespace, are useful to obtain
performance-related information and modify the setup of the underlying hash
table. Please check the @code{hashdict.pure} module and the @uref{http://en.cppreference.com/w/cpp,C++ standard library documentation} for further details.


@node Pretty-Printing,,Low-Level Operations,Operations
@anchor{pretty-printing}@anchor{13}
@section Pretty-Printing
By default, dictionaries are pretty-printed in the format @code{somedict xs},
where @code{somedict} is the actual construction function such as @code{hashdict},
@code{orddict}, etc., and @code{xs} is the member list of the dictionary. This is
usually convenient, as the printed expression will evaluate to an equal
container when reentered as Pure code. However, it is also possible to define
your own custom pretty-printing with the following function.

@geindex hashdict_symbol function
@geindex hashmdict_symbol function
@geindex orddict_symbol function
@geindex ordmdict_symbol function
@anchor{4d}@anchor{hashdict_symbol}
@deffn {Function} hashdict_symbol f
@anchor{4e}@anchor{hashmdict_symbol}
@deffnx {Function} hashmdict_symbol f
@anchor{4f}@anchor{orddict_symbol}
@deffnx {Function} orddict_symbol f
@anchor{50}@anchor{ordmdict_symbol}
@deffnx {Function} ordmdict_symbol f

Makes the pretty-printer use the format @code{f xs} (where @code{xs} is the
member list) for printing the corresponding type of dictionary.
@end deffn

Note that @code{f} may also be an operator symbol (nonfix and unary symbols work
best). In the case of an outfix symbol the list brackets around the members
are removed; this makes it possible to render the container in a format
similar to Pure's list syntax. For instance:

@example
> using stldict;
> outfix @{$ $@};
> orddict_symbol (@{$ $@});
()
> orddict (1..5);
@{$1,2,3,4,5$@}
@end example

@noindent
See @code{orddict_examp.pure} included in the distribution for a complete example
which also discusses how to make such a custom print representation reparsable.


@node Examples,Index,Operations,Top
@anchor{examples}@anchor{41}
@chapter Examples
Some basic examples showing @pxref{a,,hashdict} in action:

@example
> using stldict;
> let m = hashdict [foo=>99, bar=>bar 4711L, baz=>1..5]; m;
hashdict [foo=>99,bar=>bar 4711L,baz=>[1,2,3,4,5]]
> m!bar;
bar 4711L
> keys m;
[foo,bar,baz]
> vals m;
[99,bar 4711L,[1,2,3,4,5]]
> list m;
[foo=>99,bar=>bar 4711L,baz=>[1,2,3,4,5]]
> member m foo, member m bar;
1,1
@end example

@noindent
Hashed multidicts (@pxref{b,,hashmdict}):

@example
> let m = hashmdict [foo=>99,baz=>1..5,baz=>bar 4711L]; m;
hashmdict [foo=>99,baz=>[1,2,3,4,5],baz=>bar 4711L]
> m!baz;
[[1,2,3,4,5],bar 4711L]
> m!foo;
[99]
@end example

@noindent
The following example illustrates how to employ ordered dictionaries
(@pxref{c,,orddict}) as a set data structure:

@example
> let m1 = orddict [5,1,3,11,3];
> let m2 = orddict (3..6);
> m1;m2;
orddict [1,3,5,11]
orddict [3,4,5,6]
> m1+m2;
orddict [1,3,4,5,6,11]
> m1-m2;
orddict [1,11]
> m1*m2;
orddict [3,5]
> m1*m2 <= m1, m1*m2 <= m2;
1,1
> m1 < m1+m2, m2 < m1+m2;
1,1
@end example

@noindent
Of course, the same works with ordered multidicts (@pxref{d,,ordmdict}):

@example
> let m1 = ordmdict [5,1,3,11,3];
> let m2 = ordmdict (3..6);
> m1;m2;
ordmdict [1,3,3,5,11]
ordmdict [3,4,5,6]
> m1+m2;
ordmdict [1,3,3,3,4,5,5,6,11]
> m1-m2;
ordmdict [1,3,11]
> m1*m2;
ordmdict [3,5]
> m1*m2 <= m1, m1*m2 <= m2;
1,1
> m1 < m1+m2, m2 < m1+m2;
1,1
@end example

@noindent
In fact, the binary operations (comparisons as well as the set operations
@code{+}, @code{-} and @code{*}) work with any combination of dictionary operands:

@example
> let m1 = hashdict (1..5);
> let m2 = ordmdict (3..7);
> m1+m2;
hashmdict [1,2,3,3,4,4,5,5,6,7]
@end example

@noindent
Note that the operands are always promoted to the more general operand type,
where hashed beats ordered and multi-valued beats single-valued dictionaries.
If this is not what you want, you can also specify the desired conversions
explicitly:

@example
> m1+orddict m2;
hashdict [1,2,3,4,5,6,7]
> orddict m1+m2;
ordmdict [1,2,3,3,4,4,5,5,6,7]
@end example

@noindent
Also note that the "set" operations not only work with proper sets, but also
with general dictionaries:

@example
> hashdict [i=>i+1|i=1..4]+hashdict [i=>i-1|i=3..5];
hashdict [1=>2,2=>3,3=>2,4=>3,5=>4]
@end example

@noindent
All dictionary containers can be used as generators in list and matrix
comprehensions:

@example
> let m = hashmdict [foo=>99,baz=>1..5,baz=>bar 4711L];
> [x y | x=>y = m];
[foo 99,baz [1,2,3,4,5],baz (bar 4711L)]
> @{@{x;y@} | x=>y = m@};
@{foo,baz,baz;99,[1,2,3,4,5],bar 4711L@}
@end example

@noindent
Note that in the current implementation this always computes the full member
list of the dictionary as an intermediate value, which will need considerable
extra memory in the case of large dictionaries. As a remedy, you can also use
the @pxref{37,,stream} function to convert the dictionary to a lazy list
instead. This will often be slower, but in the case of big dictionaries the
tradeoff between memory usage and execution speed might be worth
considering. For instance:

@example
> let m = hashdict [foo i => i | i = 1..10000];
> stream m;
(foo 1512=>1512):#<thunk 0x7fa1718350a8>
> stats -m
> #list m;
10000
0.01s, 40001 cells
> #stream m;
10000
0.1s, 16 cells
> #[y | x=>y = m; gcd y 767~=1];
925
0.05s, 61853 cells
> #[y | x=>y = stream m; gcd y 767~=1];
925
0.15s, 10979 cells
@end example

@noindent

@node Index,,Examples,Top
@anchor{index}
@unnumbered Index
@printindex ge

@c %**end of body
@bye
