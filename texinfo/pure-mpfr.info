This is pure-mpfr.info, produced by makeinfo version 4.13 from
pure-mpfr.texi.

Generated by Sphinx

INFO-DIR-SECTION Pure Language and Library Documentation
START-INFO-DIR-ENTRY
* pure-mpfr: (pure-mpfr.info).    pure-mpfr
END-INFO-DIR-ENTRY


File: pure-mpfr.info,  Node: Top,  Next: Copying,  Up: (dir)

pure-mpfr
*********

  Version 0.1, October 09, 2011

  Albert Graef <<Dr.Graef@t-online.de>>

  The GNU MPFR (http://www.mpfr.org/) library is a C library for
multiple-precision floating-point computations with correct rounding.
It is based on GMP (http://gmplib.org) which Pure also uses for its
bigint support.

  This module makes the MPFR multiprecision floats (henceforth referred
to as `mpfr' numbers or values) available in Pure, so that they work
with the other types of Pure numbers in an almost seamless fashion.
Pure `mpfr' values are represented as pointers which can readily be
passed as arguments to the MPFR functions, so the representation only
involves minimal overhead on the Pure side.

  The module defines the type of `mpfr' values as an instance of Pure's
`real' type, so that it becomes a well-behaved citizen of Pure's numeric
tower. Memory management of these values is automatic. You can create an
`mpfr' value from any other kind of Pure real value (`int', `bigint' or
`double'), or from a string in decimal notation, using the `mpfr'
function. Back conversions are provided from `mpfr' to `int', `bigint',
`double' and `string' (the latter by means of a custom pretty-printer
installed by this module, so that mpfr values are printed in a format
similar to the `printf %e' format). Integration with Pure's `complex'
type is provided as well.

  Please note that this module needs more testing and the API hasn't
been finalized yet, but it should be perfectly usable already. As
usual, please report any bugs on the Pure issue tracker, on the Pure
mailing list, or directly to the author, see
<http://pure-lang.googlecode.com/>.

* Menu:

* Copying::
* Installation::
* Usage::
* Index::

 --- The Detailed Node Listing ---

Usage

* Precision and Rounding::
* MPFR Numbers::
* Conversions::
* Arithmetic::
* Math Functions::
* Examples::


File: pure-mpfr.info,  Node: Copying,  Next: Installation,  Prev: Top,  Up: Top

1 Copying
*********

Copyright (c) 2011 by Albert Graef.

  pure-mpfr is free software: you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

  pure-mpfr is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
License along with this program.  If not, see
<<http://www.gnu.org/licenses/>>.


File: pure-mpfr.info,  Node: Installation,  Next: Usage,  Prev: Copying,  Up: Top

2 Installation
**************

Get the latest source from
<http://pure-lang.googlecode.com/files/pure-mpfr-0.1.tar.gz>.

  Run `make' to compile the module and `make install' (as root) to
install it in the Pure library directory. This requires GNU make, and
of course you need to have Pure and libmpfr installed.

  `make' tries to guess your Pure installation directory and
platform-specific setup. If it gets this wrong, you can set some
variables manually, please check the Makefile for details.

  NOTE: This module requires Pure 0.48 or later and libmpfr 3.x (3.0.0
has been tested). Older libmpfr versions (2.x) probably require some
work.


File: pure-mpfr.info,  Node: Usage,  Next: Index,  Prev: Installation,  Up: Top

3 Usage
*******

After installation, you can use the operations of this module by
placing the following import declaration in your Pure programs:

    using mpfr;


     Note: This also pulls in the `math' standard library module, whose
     operations are overloaded by the `mpfr' module in order to provide
     support for `mpfr' values. Thus you don't need to explicitly
     import the `math' module when using the `mpfr' module.

     If you use both the *note mpfr: 2. module and the `pointers'
     standard library module in your script, make sure that you import
     the `pointers' module _after_ `mpfr', so that the definitions of
     pointer arithmetic in the `pointers' module do not interfere with
     the overloading of arithmetic operations in the `mpfr' module.

* Menu:

* Precision and Rounding::
* MPFR Numbers::
* Conversions::
* Arithmetic::
* Math Functions::
* Examples::


File: pure-mpfr.info,  Node: Precision and Rounding,  Next: MPFR Numbers,  Up: Usage

3.1 Precision and Rounding
==========================

The following operations of the MPFR library are provided to inspect and
change the default precision and rounding modes used by MPFR.

 -- Function: mpfr_get_default_prec
 -- Function: mpfr_set_default_prec prec
     Get and set the default precision in terms of number of bits in the
     mantissa, including the sign. MPFR initially sets this to 53
     (matching the mantissa size of `double' values). It can be changed
     to any desired value not less than 2.

 -- Function: mpfr_get_prec x
     Get the precision of an `mpfr' number `x'. Note that `mpfr' numbers
     always keep the precision they were created with, but it is
     possible to create a new `mpfr' number with any given precision
     from an existing `mpfr' number using the *note mpfr: b. function,
     see below.

 -- Function: mpfr_get_default_rounding_mode
 -- Function: mpfr_set_default_rounding_mode rnd
     Get and set the default rounding mode, which is used for all
     arithmetic operations and mathematical functions provided by this
     module. The given rounding mode `rnd' must be one of the supported
     rounding modes listed below.

 -- constant: MPFR_RNDN // round to nearest, with ties to even
 -- constant: MPFR_RNDZ // round toward zero
 -- constant: MPFR_RNDU // round toward +Inf
 -- constant: MPFR_RNDD // round toward -Inf
 -- constant: MPFR_RNDA // round away from zero
     Supported rounding modes. Please check the MPFR documentation for
     details.

  In addition, the following operations enable you to control the
precision in textual representations of `mpfr' values. This information
is used by the custom pretty-printer for `mpfr' values installed by the
module.

 -- Function: mpfr_get_print_prec
 -- Function: mpfr_set_print_prec prec
     Get and set the precision (number of decimal digits in the
     mantissa) used by the pretty-printer.


File: pure-mpfr.info,  Node: MPFR Numbers,  Next: Conversions,  Prev: Precision and Rounding,  Up: Usage

3.2 MPFR Numbers
================

The module defines the following data type for representing `mpfr'
values, which is a subtype of the Pure `real' type:

 -- type: mpfr
     This is a tagged pointer type (denoted `mpfr*' in Pure extern
     declarations) which is compatible with the `mpfr_t' and `mpfr_ptr'
     data types of the MPFR C library. Members of this type are
     "cooked" pointers, which are allocated dynamically and freed
     automatically when they are garbage-collected (by means of a
     corresponding Pure sentry).

 -- Function: mpfrp x
     Type predicate checking for `mpfr' values.


File: pure-mpfr.info,  Node: Conversions,  Next: Arithmetic,  Prev: MPFR Numbers,  Up: Usage

3.3 Conversions
===============

The following operations are provided to convert between `mpfr' numbers
and other kinds of Pure `real' values.

 -- Function: mpfr x
 -- Function: mpfr (x,prec)
 -- Function: mpfr (x,prec,rnd)
     This function converts any real number (`int', `bigint', `double',
     `rational', *note mpfr: 16.) to an `mpfr' value.

     Optionally, it is possible to specify a precision (number of bits
     in the mantissa) `prec' and a rounding mode `rnd' (one of the
     `MPFR_RND' constants), otherwise MPFR's default precision and
     rounding mode are used (see *note Precision and Rounding: 7.
     above). Note that this function may also be used to convert an
     `mpfr' to a new `mpfr' number, possibly with a different precision
     and rounding.

     The argument `x' can also be a string denoting a floating point
     number in decimal notation with optional sign, decimal point
     and/or scaling factor, which is parsed and converted to an `mpfr'
     number using the corresponding MPFR function.

 -- Function: int x
 -- Function: bigint x
 -- Function: double x
     Convert an `mpfr' number x to the corresponding type of real
     number.  Please note that there is no `rational' conversion, as
     MPFR does not provide such an operation, but if you need this then
     you can first convert `x' to a `double' and then apply the
     standard library `rational' to it (this will loose precision, of
     course).

 -- Function: str x
     By virtue of the custom pretty-printer provided by this module, the
     standard library `str' function can be used to obtain a printable
     representation of an `mpfr' number `x' in decimal notation. The
     result is a string.

 -- Function: floor x
 -- Function: ceil x
 -- Function: round x
 -- Function: trunc x
 -- Function: frac x
     Rounding and truncation functions. These all take and yield `mpfr'
     numbers. *note frac: 23. returns the fractional part of an `mpfr'
     number, i.e., `x-trunc x'.


File: pure-mpfr.info,  Node: Arithmetic,  Next: Math Functions,  Prev: Conversions,  Up: Usage

3.4 Arithmetic
==============

The following standard operators (see the `purelib') are overloaded to
provide `mpfr' arithmetic and comparisons. These all handle mixed
`mpfr'/`real' operands.

 -- Function: - x
 -- Function: x + y
 -- Function: x - y
 -- Function: x * y
 -- Function: x / y
 -- Function: x ^ y
     Arithmetic operations.

 -- Function: x == y
 -- Function: x ~= y
 -- Function: x <= y
 -- Function: x >= y
 -- Function: x < y
 -- Function: x > y
     Comparisons.


File: pure-mpfr.info,  Node: Math Functions,  Next: Examples,  Prev: Arithmetic,  Up: Usage

3.5 Math Functions
==================

The following functions from the `math' module are overloaded to provide
support for `mpfr' values. Note that it is also possible to invoke the
corresponding functions from the MPFR library in a direct fashion,
using the same function names with an additional `_mpfr' suffix. These
functions also accept other kinds of `real' arguments which are
converted to `mpfr' before applying the MPFR function.

 -- Function: abs x
     Absolute value (this is implemented directly, so there's no
     corresponding `_mpfr' function for this).

 -- Function: sqrt x
 -- Function: exp x
 -- Function: ln x
 -- Function: log x
     Square root, exponential and logarithms.

 -- Function: sin x
 -- Function: cos x
 -- Function: tan x
 -- Function: asin x
 -- Function: acos x
 -- Function: atan x
 -- Function: atan2 y x
     Trigonometric functions.

 -- Function: sinh x
 -- Function: cosh x
 -- Function: tanh x
 -- Function: asinh x
 -- Function: acosh x
 -- Function: atanh x
     Hyperbolic trigonometric functions.

 -- Function: complex x
 -- Function: polar x
 -- Function: rect x
 -- Function: cis x
 -- Function: arg x
 -- Function: re x
 -- Function: im x
 -- Function: conj x
     Complex operations.


File: pure-mpfr.info,  Node: Examples,  Prev: Math Functions,  Up: Usage

3.6 Examples
============

Import the module and set the default precision:

    > using mpfr;
    > mpfr_set_default_prec 64; // extended precision (long double on x86)
    ()

Calculate pi with the current precision. Note that mixed arithmetic
works with any combination of real and mpfr numbers.

    > let Pi = 4*atan (mpfr 1);
    > pi; Pi; abs (Pi-pi);
    3.14159265358979
    3.14159265358979323851
    1.22514845490862001043e-16

    > let Pi2 = Pi^2;
    > Pi2; sqrt Pi2; sqrt Pi2 == Pi;
    9.86960440108935861941
    3.14159265358979323851
    1

You can also query the precision of a number and change it on the fly:

    > Pi; mpfr_get_prec Pi;
    3.14159265358979323851
    64
    > let Pi1 = mpfr (Pi,53); Pi1; mpfr_get_prec Pi1;
    3.1415926535897931
    53

Complex `mpfr' numbers work, too:

    > let z = mpfr 2^(1/i); z;
    7.69238901363972126565e-1+:-6.38961276313634801184e-1
    > let z = ln z/ln (mpfr 2); z;
    0.0+:-1.0
    > abs z, arg z;
    1.0,-1.57079632679489661926
    > polar z;
    1.0<:-1.57079632679489661926



File: pure-mpfr.info,  Node: Index,  Prev: Usage,  Up: Top

Index
*****

 [index ]
* Menu:

* * infix function:                      Arithmetic.           (line 10)
* + infix function:                      Arithmetic.           (line 10)
* - prefix function:                     Arithmetic.           (line 10)
* / infix function:                      Arithmetic.           (line 10)
* < infix function:                      Arithmetic.           (line 18)
* <= infix function:                     Arithmetic.           (line 18)
* == infix function:                     Arithmetic.           (line 18)
* > infix function:                      Arithmetic.           (line 18)
* >= infix function:                     Arithmetic.           (line 18)
* ^ infix function:                      Arithmetic.           (line 10)
* abs function:                          Math Functions.       (line 13)
* acos function:                         Math Functions.       (line 23)
* acosh function:                        Math Functions.       (line 32)
* arg function:                          Math Functions.       (line 40)
* asin function:                         Math Functions.       (line 23)
* asinh function:                        Math Functions.       (line 32)
* atan function:                         Math Functions.       (line 23)
* atan2 function:                        Math Functions.       (line 23)
* atanh function:                        Math Functions.       (line 32)
* bigint function:                       Conversions.          (line 28)
* ceil function:                         Conversions.          (line 44)
* cis function:                          Math Functions.       (line 40)
* complex function:                      Math Functions.       (line 40)
* conj function:                         Math Functions.       (line 40)
* cos function:                          Math Functions.       (line 23)
* cosh function:                         Math Functions.       (line 32)
* double function:                       Conversions.          (line 28)
* exp function:                          Math Functions.       (line 17)
* floor function:                        Conversions.          (line 44)
* frac function:                         Conversions.          (line 44)
* im function:                           Math Functions.       (line 40)
* int function:                          Conversions.          (line 28)
* ln function:                           Math Functions.       (line 17)
* log function:                          Math Functions.       (line 17)
* mpfr function:                         Conversions.          (line  9)
* mpfr module:                           Top.                  (line  6)
* mpfr type:                             MPFR Numbers.         (line  9)
* mpfr_get_default_prec function:        Precision and Rounding.
                                                               (line  9)
* mpfr_get_default_rounding_mode function: Precision and Rounding.
                                                               (line 23)
* mpfr_get_prec function:                Precision and Rounding.
                                                               (line 16)
* mpfr_get_print_prec function:          Precision and Rounding.
                                                               (line 43)
* MPFR_RNDA constant:                    Precision and Rounding.
                                                               (line 30)
* MPFR_RNDD constant:                    Precision and Rounding.
                                                               (line 30)
* MPFR_RNDN constant:                    Precision and Rounding.
                                                               (line 30)
* MPFR_RNDU constant:                    Precision and Rounding.
                                                               (line 30)
* MPFR_RNDZ constant:                    Precision and Rounding.
                                                               (line 30)
* mpfr_set_default_prec function:        Precision and Rounding.
                                                               (line  9)
* mpfr_set_default_rounding_mode function: Precision and Rounding.
                                                               (line 23)
* mpfr_set_print_prec function:          Precision and Rounding.
                                                               (line 43)
* mpfrp function:                        MPFR Numbers.         (line 17)
* polar function:                        Math Functions.       (line 40)
* re function:                           Math Functions.       (line 40)
* rect function:                         Math Functions.       (line 40)
* round function:                        Conversions.          (line 44)
* sin function:                          Math Functions.       (line 23)
* sinh function:                         Math Functions.       (line 32)
* sqrt function:                         Math Functions.       (line 17)
* str function:                          Conversions.          (line 38)
* tan function:                          Math Functions.       (line 23)
* tanh function:                         Math Functions.       (line 32)
* trunc function:                        Conversions.          (line 44)
* ~= infix function:                     Arithmetic.           (line 18)



Tag Table:
Node: Top243
Ref: 0622
Ref: gmp622
Ref: 1622
Ref: gnu-mpfr622
Node: Copying2175
Ref: copying2258
Ref: 22258
Ref: module-mpfr2258
Ref: 32258
Ref: 42258
Node: Installation2952
Ref: installation3037
Ref: 53037
Node: Usage3684
Ref: usage3767
Ref: 63767
Node: Precision and Rounding4667
Ref: precision and rounding4755
Ref: 74755
Ref: precision-and-rounding4755
Ref: 84946
Ref: mpfr_get_default_prec4946
Ref: 94982
Ref: mpfr_set_default_prec4982
Ref: a5278
Ref: mpfr_get_prec5278
Ref: c5603
Ref: mpfr_get_default_rounding_mode5603
Ref: d5648
Ref: mpfr_set_default_rounding_mode5648
Ref: e5941
Ref: mpfr_rndn5941
Ref: f6004
Ref: mpfr_rndz6004
Ref: 106049
Ref: mpfr_rndu6049
Ref: 116094
Ref: mpfr_rndd6094
Ref: 126139
Ref: mpfr_rnda6139
Ref: 136492
Ref: mpfr_get_print_prec6492
Ref: 146526
Ref: mpfr_set_print_prec6526
Node: MPFR Numbers6673
Ref: mpfr numbers6781
Ref: 156781
Ref: mpfr-numbers6781
Ref: 166936
Ref: mpfr/type6936
Ref: 177320
Ref: mpfrp7320
Node: Conversions7391
Ref: conversions7487
Ref: 187487
Ref: b7632
Ref: mpfr7632
Ref: 197653
Ref: mpfr/27653
Ref: 1a7681
Ref: mpfr/37681
Ref: 1b8529
Ref: int/mpfr8529
Ref: 1c8549
Ref: bigint/mpfr8549
Ref: 1d8572
Ref: double/mpfr8572
Ref: 1e8951
Ref: str/mpfr8951
Ref: 1f9210
Ref: floor/mpfr9210
Ref: 209232
Ref: ceil/mpfr9232
Ref: 219253
Ref: round/mpfr9253
Ref: 229275
Ref: trunc/mpfr9275
Ref: 239297
Ref: frac/mpfr9297
Node: Arithmetic9494
Ref: arithmetic9592
Ref: 249592
Ref: 259785
Ref: -/mpfr9785
Ref: 269803
Ref: +/mpfr9803
Ref: 279843
Ref: */mpfr9843
Ref: 289863
Ref: //mpfr9863
Ref: 299883
Ref: ^/mpfr9883
Ref: 2a9932
Ref: ==/mpfr9932
Ref: 2b9953
Ref: ~=/mpfr9953
Ref: 2c9974
Ref: <=/mpfr9974
Ref: 2d9995
Ref: >=/mpfr9995
Ref: 2e10016
Ref: </mpfr10016
Ref: 2f10036
Ref: >/mpfr10036
Node: Math Functions10075
Ref: math functions10170
Ref: 3010170
Ref: math-functions10170
Ref: 3110611
Ref: abs/mpfr10611
Ref: 3210744
Ref: sqrt/mpfr10744
Ref: 3310765
Ref: exp/mpfr10765
Ref: 3410785
Ref: ln/mpfr10785
Ref: 3510804
Ref: log/mpfr10804
Ref: 3610871
Ref: sin/mpfr10871
Ref: 3710891
Ref: cos/mpfr10891
Ref: 3810911
Ref: tan/mpfr10911
Ref: 3910931
Ref: asin/mpfr10931
Ref: 3a10952
Ref: acos/mpfr10952
Ref: 3b10973
Ref: atan/mpfr10973
Ref: 3c10994
Ref: atan2/mpfr10994
Ref: 3d11049
Ref: sinh/mpfr11049
Ref: 3e11070
Ref: cosh/mpfr11070
Ref: 3f11091
Ref: tanh/mpfr11091
Ref: 4011112
Ref: asinh/mpfr11112
Ref: 4111134
Ref: acosh/mpfr11134
Ref: 4211156
Ref: atanh/mpfr11156
Ref: 4311220
Ref: complex/mpfr11220
Ref: 4411244
Ref: polar/mpfr11244
Ref: 4511266
Ref: rect/mpfr11266
Ref: 4611287
Ref: cis/mpfr11287
Ref: 4711307
Ref: arg/mpfr11307
Ref: 4811327
Ref: re/mpfr11327
Ref: 4911346
Ref: im/mpfr11346
Ref: 4a11365
Ref: conj/mpfr11365
Node: Examples11412
Ref: examples11488
Ref: 4b11488
Node: Index12541
Ref: index12603

End Tag Table


Local Variables:
coding: utf-8
End:
