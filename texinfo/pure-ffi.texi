\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename pure-ffi.info
@documentencoding UTF-8
@copying
Generated by Sphinx
@end copying
@settitle pure-ffi
@defindex ge
@paragraphindent 2
@exampleindent 4
@afourlatex
@dircategory Pure Language and Library Documentation
@direntry
* pure-ffi: (pure-ffi.info).    pure-ffi
@end direntry

@c %**end of header

@titlepage
@title pure-ffi
@author Albert Gr√§f (Editor)
@end titlepage
@contents

@c %** start of user preamble

@c %** end of user preamble

@ifnottex
@node Top
@top pure-ffi
@end ifnottex

@c %**start of body
@geindex ffi module
Version 0.11, January 18, 2011

Albert Graef <@email{Dr.Graef@@t-online.de}>

The libffi library provides a portable, high level programming interface to
various calling conventions. This allows a programmer to call any function
specified by a call interface description at run time. libffi should be
present on most gcc-based systems, but it is also available as a standalone
package at @indicateurl{http://sourceware.org/libffi/}.

This module provides an interface to libffi which enables you to call C
functions from Pure and vice versa. It goes beyond Pure's built-in C interface
in that it also handles C structs and makes Pure functions callable from C.
Moreover, depending on the libffi implementation, it may also be possible to
call foreign languages other than C.


@menu
* Copying::
* Installation::
* Usage::
* TODO::
* Index::
@end menu


@node Copying,Installation,Top,Top
@anchor{copying}@anchor{0}@anchor{module-ffi}@anchor{1}@anchor{2}
@chapter Copying
Copyright (c) 2008, 2009 by Albert Graef.

pure-ffi is free software: you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option) any
later version.

pure-ffi is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
details.

You should have received a copy of the GNU Lesser General Public License along
with this program.  If not, see <@indicateurl{http://www.gnu.org/licenses/}>.


@node Installation,Usage,Copying,Top
@anchor{installation}@anchor{3}
@chapter Installation
Get the latest source from
@indicateurl{http://pure-lang.googlecode.com/files/pure-ffi-0.11.tar.gz}.

Run @code{make} to compile the module and @code{make install} (as root) to install
it in the Pure library directory. This requires GNU make, and of course you
need to have Pure and libffi installed.

@code{make} tries to guess your Pure installation directory and platform-specific
setup. If it gets this wrong, you can set some variables manually. In
particular, @code{make install prefix=/usr} sets the installation prefix, and
@code{make PIC=-fPIC} or some similar flag might be needed for compilation on 64
bit systems. Please see the Makefile for details.

NOTE: This module requires libffi 3.x (3.0.8 has been tested). Old libffi
versions (2.x) do not appear to work (closures are broken). Patches are
welcome.


@node Usage,TODO,Installation,Top
@anchor{usage}@anchor{4}
@chapter Usage
The module exposes a simplified interface to libffi tailored to the Pure
language. Call interfaces are described using the desired ABI, return type and
tuple of argument types. The ABI is specified using one of the @code{FFI_*}
constants defined by the module; for most purposes, @code{FFI_DEFAULT_ABI} is all
that's needed. C types are specified using special descriptors @code{void_t},
@code{uint_t} etc., see ffi.pure for details. You can also get a list of these
values using @code{show -g FFI_* *_t} after importing the ffi module.

The primary interface for calling C from Pure and vice versa is as follows:

@geindex fcall function
@anchor{5}@anchor{fcall}
@deffn {Function} fcall name abi rtype atypes

Creates a Pure function from a C function with the given name, specified as
a string. This makes the C function callable in Pure, no matter whether it
is already declared as an @code{extern} or not. But note that if the function
resides in a shared library, you still have to import that library using a
Pure @code{using} declaration, see the Pure manual for details.
@end deffn

@geindex fclos function
@anchor{6}@anchor{fclos}
@deffn {Function} fclos fn abi rtype atypes

Creates a pointer to a C function from the given Pure function @code{fn}. The
resulting pointer can then be passed to other C functions expecting
functions as arguments. This allows you to create C callbacks from Pure
functions without writing a single line of C code. (This functionality
might not be available on some platforms.)
@end deffn

Note that in difference to @code{extern} functions, arguments to functions
created with libffi are always passed in uncurried form, as a Pure tuple.
E.g.:

@example
> using ffi;
> let fmod = fcall "fmod" FFI_DEFAULT_ABI double_t (double_t,double_t);
> fmod (5.3,0.7);
0.4
@end example

@noindent
C structs are fully supported and are passed in a type-safe manner, see
ffi.pure for details. Note that these are to be used for passing structs by
value. (When passing a pointer to a struct, you must use @code{pointer_t}
instead.) For instance:

@example
> let complex_t = struct_t (double_t,double_t);
> let cexp = fcall "cexp" FFI_DEFAULT_ABI complex_t (complex_t);
> members (cexp (struct complex_t (0.0,1.0)));
0.54030230586814,0.841470984807897
@end example

@noindent
See the examples folder in the sources for more examples.


@node TODO,Index,Usage,Top
@anchor{todo}@anchor{7}
@chapter TODO
The API isn't perfect yet. In particular, one might consider to implement type
descriptors as structs instead of raw pointers, and support for typed pointers
would be useful. Contributions and suggestions are welcome.


@node Index,,TODO,Top
@anchor{index}
@unnumbered Index
@printindex ge

@c %**end of body
@bye
