\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename pd-faust.info
@documentencoding UTF-8
@copying
Generated by Sphinx
@end copying
@settitle pd-faust
@defindex ge
@paragraphindent 2
@exampleindent 4
@afourlatex
@dircategory Pure Language and Library Documentation
@direntry
* pd-faust: (pd-faust.info).    pd-faust
@end direntry

@c %**end of header

@titlepage
@title pd-faust
@author Albert Gr√§f (Editor)
@end titlepage
@contents

@c %** start of user preamble

@c %** end of user preamble

@ifnottex
@node Top
@top pd-faust
@end ifnottex

@c %**start of body
Version , December 17, 2011

Albert Graef <@email{Dr.Graef@@t-online.de}>

pd-faust is a dynamic environment for running Faust dsps in Pd. It is based on
the author's @code{faust2pd} script, but offers many small
improvements and some major additional features:

@itemize *
@item
Faust dsps are implemented using two Pd objects, @code{fsynth~} and @code{fdsp~},
which provide the necessary infrastructure to run Faust synthesizer and
effect units in Pd, respectively.
@item
In contrast to faust2pd, the Pd GUI of Faust units is generated dynamically,
inside Pd. While pd-faust supports the same global GUI layout options as
faust2pd, it also provides various options to adjust the layout of
individual control items.
@item
pd-faust recognizes the @code{midi} and @code{osc} controller attributes in the
Faust source and automatically provides corresponding MIDI and OSC
controller mappings. OSC-based controller automation is also available.
@item
Perhaps most importantly, Faust dsps can be reloaded at any time (even while
the Pd patch is running), in which case the GUI and the controller mappings
are regenerated automatically and on the fly as needed.
@end itemize

@anchor{0}@anchor{faust2pd}
@menu
* Copying::
* Installation::
* Usage::
* Caveats and Bugs::
* Index::

@detailmenu
 --- The Detailed Node Listing ---

Usage

* The fdsp~ and fsynth~ Objects::
* GUI Subpatches::
* Examples::
* Operating the Patches::
* External MIDI and OSC Controllers::
* Tweaking the GUI Layout::
* Remote Control::
@end detailmenu
@end menu


@node Copying,Installation,Top,Top
@anchor{copying}@anchor{1}@anchor{2}
@chapter Copying
Copyright (c) 2011 by Albert Graef

pd-faust is distributed under the GNU LGPL v3+. Please see the included
COPYING and COPYING.LESSER files for details.

This package also includes the faust-stk instruments which are distributed
under an MIT-style license, please check the examples/synths/README-STK file
and the dsp files for authorship information and licensing details pertaining
to these. The original faust-stk sources can be found in the Faust
distribution, cf. @indicateurl{http://faust.grame.fr/}.


@node Installation,Usage,Copying,Top
@anchor{installation}@anchor{3}
@chapter Installation
You'll need @uref{http://faust.grame.fr/,Faust} and @uref{http://puredata.info/,Pd}, obviously. Fairly recent versions of these are
required. Faust versions 0.9.45 and 2.0.a3 and Pd version 0.43.1 have been
tested.

The pd-faust objects are written in the @uref{http://pure-lang.googlecode.com/,Pure} programming language, so you'll
also need an installation of the Pure interpreter (0.50 or later), along with
the following packages: @code{pd-pure} (0.15 or later),
@code{pure-faust} (0.6 or later) and
@code{pure-stldict} (any version).

Finally, gcc and GNU make (or compatible) are required to compile the helper
dsps and the example instruments; please check the Makefile for details.

@anchor{4}@anchor{faust}@anchor{5}@anchor{pd}@anchor{6}@anchor{pure}For a basic installation run @code{make}, then @code{sudo make install}. This will
install the pd-faust objects in your lib/pd/extra/faust folder. Add this
directory to your Pd library search path (@code{--path} option or
@code{Preferences/Path} in Pd) and you should be set. The @code{make} command also
compiles the Faust dsps included in the distribution, so that the provided
examples will be ready to run afterwards as well (see @pxref{7,,Examples} below).

The pd-faust objects are installed both in source form (so you can customize
them for your own purposes) and in binary form as a Pd object library which
can be loaded with Pd's @code{-lib} option. The latter substantially reduces
startup times and is thus the recommended way to run pd-faust if you don't
need to customize the pd-faust objects on the fly. To these ends, after
completing installation and setting up @code{Preferences/Path} in Pd, simply add
@code{pdfaust} to your preloaded library modules in Pd's @code{Preferences/Startup}
dialog.


@cartouche
@quotation Note
The @code{pdfaust} module must come @emph{after} the @code{pure} entry which
loads pd-pure, otherwise you'll get an error message. In any case the
pd-pure loader will be required to run these objects, so it should be
configured accordingly; please check the @code{pd-pure}
documentation for details.
@end quotation
@end cartouche

Some further build options are described in the Makefile. In particular, it is
possible to compile the Faust dsps to LLVM bitcode which can be loaded
directly by the Pure interpreter, but for that you'll need an LLVM-capable
C/C++ compiler such as clang or gcc with the dragonegg plugin (please check
the @uref{http://llvm.org/,LLVM} website for details). Also note that dsps in bitcode format don't
work with the precompiled pd-faust module yet.

@anchor{8}@anchor{llvm}
@node Usage,Caveats and Bugs,Installation,Top
@anchor{usage}@anchor{9}
@chapter Usage
Working with pd-faust basically involves adding a bunch of @code{fsynth~} and
@code{fdsp~} objects to a Pd patch along with the corresponding GUI subpatches,
and wiring up the Faust units in some variation of a synth-effects chain which
typically takes input from Pd's MIDI interface (@code{notein}, @code{ctlin}, etc.)
and outputs the signals produced by the Faust units to Pd's audio interface
(@code{dac~}).

For your convenience, the distribution also includes a @code{midiosc} object
which can be used to handle MIDI input and playback as well as OSC controller
automation. This useful helper abstraction is described in more detail under
@pxref{a,,Operating the Patches} below.


@menu
* The fdsp~ and fsynth~ Objects::
* GUI Subpatches::
* Examples::
* Operating the Patches::
* External MIDI and OSC Controllers::
* Tweaking the GUI Layout::
* Remote Control::
@end menu


@node The fdsp~ and fsynth~ Objects,GUI Subpatches,,Usage
@anchor{the fdsp~ and fsynth~ objects}@anchor{b}@anchor{the-fdsp-and-fsynth-objects}
@section The fdsp~ and fsynth~ Objects
The @code{fdsp~} object is invoked as follows:

@example
fdsp~ dspname instname channel
@end example

@noindent

@itemize *
@item
@code{dspname} denotes the name of the Faust dsp (usually this is just the name
of the .dsp file with the extension stripped off). Please note that the
Faust dsp must be provided in a form which can be loaded in @emph{Pure} (not
Pd!), so the @code{pure.cpp} architecture included in recent Faust versions
must be used to compile the dsp to a shared library. (If you're already
running Faust2, you can also compile to an LLVM bitcode file instead; Pure
has built-in support for loading these.) The Makefiles included in the
pd-faust distribution show how to do this.
@item
@code{instname} denotes the name of the instance of the Faust unit. Multiple
instances of the same Faust dsp can be used in a Pd patch, which must all
have different instance names. In addition, the instance name is also used
to identify the GUI subpatch of the unit (see below) and to generate unique
OSC addresses for the unit's control elements.
@item
@code{channel} is the number of the MIDI channel the unit responds to. This can
be 1..16, or 0 to specify "omni" operation (listen to MIDI messages on all
channels).
@end itemize


@cartouche
@quotation Note
Since the @code{fdsp~} and @code{fsynth~} objects are written in Pure,
their creation arguments should be specified in Pure syntax. In particular,
both @code{dspname} or @code{instname} may either be Pure identifiers or
double-quoted strings (the former will automatically be translated to the
latter). Similarly, the @code{channel} argument (as well as the @code{numvoices}
argument of the @code{fsynth~} object, see below) must be an integer constant
in Pure syntax, which is pretty much like Pd syntax but also allows the
integer to be specified in hexadecimal, octal or binary.
@end quotation
@end cartouche

The @code{fdsp~} object requires a Faust dsp which can work as an effect unit,
processing audio input and producing audio output. (Only stereo units are
fully supported in the present version.)

The @code{fsynth~} object works in a similar fashion, but has an additional
creation argument specifying the desired number of voices:

@example
fsynth~ dspname instname channel numvoices
@end example

@noindent
The @code{fsynth~} object requires a Faust dsp which can work as a monophonic
synthesizer (having zero audio inputs and two audio outputs). To these ends,
pd-faust assumes that the Faust unit provides three so-called "voice controls"
which indicate which note to play:

@itemize *
@item
@code{freq} is the fundamental frequency of the note in Hz.
@item
@code{gain} is the velocity of the note, as a normalized value between 0 and 1.
This usually controls the volume of the output signal.
@item
@code{gate} indicates whether a note is currently playing. This value is either
0 (no note to play) or 1 (play a note), and usually triggers the envelop
function (ADSR or similar).
@end itemize

pd-faust doesn't care at which path inside the Faust dsp these controls are
located, but they must all be there, and the basenames of the controls must be
unique throughout the entire dsp.

Like @code{faust2pd}, pd-faust implements the necessary logic to
drive the given number of voices of an @code{fsynth~} object. That is, it will
actually create a separate instance of the Faust dsp for each voice and handle
polyphony by allocating voices from this pool in a round-robin fashion,
performing the usual voice stealing if the number of simultaneous notes to
play exceeds the number of voices. Also note that an @code{fsynth~} operated in
omni mode (@code{channel = 0}) automatically filters out messages on channel 10
which is reserved for percussion in the General MIDI standard.

The @code{fdsp~} and @code{fsynth~} objects respond to the following messages:

@itemize *
@item
@code{bang} outputs the current control settings on the control outlet in OSC
format.
@item
@code{write} outputs the current control settings to external MIDI and/or OSC
devices. This message can also be invoked with a numeric argument to toggle
the "write mode" of the unit; please see @pxref{c,,External MIDI and OSC Controllers} below for details.
@item
@code{reload} reloads the Faust unit. This also reloads the shared library or
bitcode file if the unit was recompiled since the object was last loaded.
(Instead of feeding a @code{reload} message to the control inlet of a Faust
unit, you can also just send a @code{bang} to the @code{reload} receiver.)
@item
@code{addr value} changes the control indicated by the OSC address @code{addr}.
This is also used internally for communication with the Pd GUI and for
controller automation.
@end itemize

In addition, the @code{fdsp~} and @code{fsynth~} objects respond to MIDI controller
messages of the form @code{ctl val num chan}, and the @code{fsynth~} object also
understands note-related messages of the form @code{note num vel chan} (note
on/off) and @code{bend val chan} (pitch bend). In either case, pd-faust provides
the necessary logic to map controller and note-related messages to the
corresponding control changes in the Faust unit.


@cartouche
@quotation Note
Like pd-pure, pd-faust also remaps Pd's @code{menu-open} command so
that it lets you edit the Faust source of an @code{fdsp~} or @code{fsynth~}
object by right-clicking on the object and choosing @code{Open} from the
context menu.
@end quotation
@end cartouche


@node GUI Subpatches,Examples,The fdsp~ and fsynth~ Objects,Usage
@anchor{gui subpatches}@anchor{d}@anchor{gui-subpatches}
@section GUI Subpatches
For each @code{fdsp~} and @code{fsynth~} object, the Pd patch should also contain an
(initially empty) "one-off" graph-on-parent subpatch with the same name as the
instance name of the Faust unit:

@example
pd instname
@end example

@noindent
You shouldn't insert anything into this subpatch, its contents (a bunch of Pd
GUI elements corresponding to the control elements of the Faust unit) will be
generated automatically by pd-faust when the corresponding @code{fdsp~} or
@code{fsynth~} object is created, and whenever the unit gets reloaded at runtime.

As with faust2pd, the default appearance of the GUI can be adjusted in various
ways; see @pxref{e,,Tweaking the GUI Layout} below for details.

The relative order in which you insert an @code{fdsp~} or @code{fsynth~} object and
its GUI subpatch into the main patch matters. Normally, the GUI subpatch
should be inserted @emph{first}, so that it will be updated automatically when its
associated Faust unit is first created, and also when the main patch is saved
and then reloaded later.

However, in some situations it may be preferable to insert the GUI subpatch
@emph{after} its associated Faust unit. If you do this, the GUI will @emph{not} be
updated automatically when the main patch is loaded, so you'll have to reload
the dsp manually (sending it a @code{reload} message) to force an update of the
GUI subpatch. This is useful, in particular, if you'd like to edit the GUI
patch manually after it has been generated.

In some cases it may even be desirable to completely "lock down" the GUI
subpatch. This can be done by simply @emph{renaming} the GUI subpatch after it has
been generated. When Pd saves the main patch, it saves the current status of
the GUI subpatches along with it, so that the renamed subpatch will remain
static and will @emph{never} be updated, even if its associated Faust unit gets
reloaded. This generally makes sense only if the control interface of the
Faust unit isn't changed after locking down its GUI patch. To "unlock" a GUI
subpatch, you just rename it back to its original name. (In this case you
might also want to reinsert the corresponding Faust unit afterwards, if you
want to have the GUI generated automatically without an explicit @code{reload}
again.)


@node Examples,Operating the Patches,GUI Subpatches,Usage
@anchor{examples}@anchor{7}
@section Examples
The examples folder contains a few example patches which illustrate how this
all works. Having installed pd-faust as described above, you can run these
from the examples directory, e.g.: @code{pd test.pd}. You can also run the
examples without actually installing pd-faust, if you add the @code{-path ..}
option when running Pd from the examples directory.

Here are some of the examples that are currently available:

@itemize *
@item
test.pd: Simple patch running a single Faust instrument.
@item
synth.pd: Slightly more elaborate patch featuring a synth-effects chain.
@item
bouree.pd: Full-featured example running various instruments.
@end itemize

For your convenience, related MIDI and OSC files as well as the Faust sources
of the instruments and effects are contained in corresponding subdirectories
(midi, osc, synths) of the examples directory. A slightly modified version of
the faust-stk instruments from the Faust distribution is also included, please
check the examples/synths/README-STK file for more information about these.

The MIDI files are all in standard MIDI file format. (Some of these come from
the faust-stk distribution, others can be found on the web.) The OSC files
used by pd-faust for controller automation are plain ASCII files suitable for
hand-editing if you know what you are doing; the format should be fairly
self-explanatory.

Please note that in the present version the patch directory layout (MIDI, OSC
and Faust source files can be found in the midi, osc and synths subfolders,
respectively) is hardwired, so you'll have to follow this layout for your own
pd-faust patches unless you're prepared to change the pd-faust sources.


@node Operating the Patches,External MIDI and OSC Controllers,Examples,Usage
@anchor{operating the patches}@anchor{a}@anchor{operating-the-patches}
@section Operating the Patches
The generated Pd GUI elements for the Faust dsps are pretty much the same as
with @code{faust2pd} (which see). The only obvious change is the
addition of a "record" button (gray toggle in the upper right corner) which
enables recording of OSC automation data.

In case the operation of the @code{midiosc} abstraction in the provided examples
is not immediately obvious, here is a brief rundown of the available controls:

@itemize *
@item
The creation argument of @code{midiosc} is the name of the MIDI file, either as
a Pure identifier (in this case the .mid filename extension is supplied
automatically) or as a double-quoted string. This argument can also be
omitted if you don't need MIDI file playback.
@item
The abstraction has a single control outlet through which it feeds the
generated MIDI and other messages to the connected @code{fsynth~} and @code{fdsp~}
objects. In addition, live MIDI input is also accepted and forwarded to the
control outlet, after being translated to the format understood by
@code{fsynth~} and @code{fdsp~} objects.
@item
The @code{start}, @code{stop} and @code{cont} controls in the @emph{first} row of control
elements start, stop and continue MIDI and OSC playback, respectively. The
@code{echo} toggle in this row causes played MIDI events to be printed in the
Pd main window.
@item
The gray "record" toggle in the upper right corner of the abstraction
enables recording of OSC controller automation data from any of the Faust
units which have their "record" toggle switched on. Once @code{midiosc}'s
"record" toggle is switched on, recording will be started and stopped with
the @code{start}, @code{stop} and @code{cont} controls in the first row.
@item
There are some additional controls related to OSC recording in the @emph{second}
row: @code{save} saves the currently recorded data in an OSC file for later use
(this file will be located in the osc subdirectory, and have the same name
as the MIDI file with new extension .osc); @code{abort} is like @code{stop} in
that it stops recording and playback, but also throws away the data recorded
in this run (while @code{stop} keeps it for later playback); and @code{clear}
clears the entire recorded OSC sequence so that you can start a new one.
@item
Once some automation data has been recorded, it will be played back along
with the MIDI file. You can then just listen to it, or go on to record more
automation data, etc., ad lib. Use the @code{echo} toggle in the second row to
print the OSC messages as they are played back. If you save the automation
data with the @code{save} button, it will be reloaded from its OSC file next
time the patch is opened.
@item
The controls in the @emph{third} row provide some additional ways to configure
the playback process. The @code{loop} button can be used to enable looping,
which repeats the playback of the MIDI (and OSC) sequence ad infinitum. The
@code{thru} button, when switched on, routes the MIDI data during playback
through Pd's MIDI output so that it can be used to drive an external MIDI
device in addition to the Faust instruments. The @code{write} button does the
same with MIDI and OSC controller data generated either through automation
data or by manually operating the control elements in the Pd GUI, see
@pxref{c,,External MIDI and OSC Controllers} below for details.
@end itemize

Note that @code{midiosc} is merely an example which should cover most common
uses. If you don't need all the fancy functionality it provides, your patches
may simply feed control messages directly into @code{fdsp~} and @code{fsynth~}
objects instead. On the other hand, if you need even more elaborate
input/output interfacing than what @code{midiosc} provides, @code{midiosc} can be
used as a starting point for your own input/output abstractions driving the
@code{fdsp~} and @code{fsynth~} objects in your patch.


@node External MIDI and OSC Controllers,Tweaking the GUI Layout,Operating the Patches,Usage
@anchor{external midi and osc controllers}@anchor{c}@anchor{external-midi-and-osc-controllers}
@section External MIDI and OSC Controllers
The @code{fsynth~} object has built-in (and hard-wired) support for MIDI notes,
pitch bend and MIDI controller 123 (all notes off).

Other MIDI and OSC controller data can be handled as well, by configuring the
controls in your Faust units accordingly. pd-faust's treatment of such
controller data depends on the @emph{mode} the @code{fdsp~} or @code{fsynth~} object is
in.

The default mode is @emph{read mode}, in which controller data received from
external MIDI and OSC devices is interpreted according to the controller
mappings defined in the Faust source (this is explained below), by updating
the corresponding GUI elements and the control variables of the Faust dsp.
For obvious reasons, this only works with @emph{active} Faust controls.

An @code{fdsp~} or @code{fsynth~} object can also be put in @emph{write mode} by feeding
a message of the form @code{write 1} into its control inlet. For convenience, the
@code{write} toggle in the @code{midiosc} abstraction allows you to do this
simultaneously for all Faust units connected to @code{midiosc}'s control
outlet.

Once an object is in write mode, it does not interpret incoming MIDI and OSC
controller data any more, but rather @emph{outputs} MIDI and OSC controller data in
response to both automation data and the manual operation of the Pd GUI
elements, again according to the controller mappings defined in the Faust
source. Note that this works with both @emph{active} and @emph{passive} Faust controls.

To configure MIDI controller assignments, the labels of the Faust control
elements have to be marked up with the special @code{midi} attribute in the Faust
source. For instance, a pan control (MIDI controller 10) may be implemented in
the Faust source as follows:

@example
pan = hslider("pan [midi:ctrl 10]", 0, -1, 1, 0.01);
@end example

@noindent
In read mode, pd-faust will then provide the necessary logic to handle MIDI
input from controller 10 by changing the pan control in the Faust unit
accordingly, mapping the controller values 0..127 to the range and step size
given in the Faust source. Conversely, in write mode corresponding MIDI
controller data will be generated and sent to Pd's MIDI output, on the MIDI
channel specified in the creation arguments of the Faust unit (0 meaning
"omni", i.e., output on all MIDI channels), so that it can drive an external
MIDI device such as a keyboard or a faderbox.

In principle, the same functionality is also available for external OSC
devices, employing explicit OSC controller assignments in the Faust source by
means of the @code{osc} attribute. E.g., the following enables input and output
of OSC messages for the OSC @code{/pan} address:

@example
pan = hslider("pan [osc:/pan]", 0, -1, 1, 0.01);
@end example

@noindent

@cartouche
@quotation Note
In contrast to some other architectures included in the Faust
distribution, pd-faust only allows literal OSC addresses here. That is,
glob-style OSC patterns are not supported as values for the @code{osc}
attribute.
@end quotation
@end cartouche

Also note that while the necessary infrastructure to support OSC input and
output is already provided by pd-faust, the OSC input and output facilities
themselves which are needed to make this actually work are not implemented in
the @code{midiosc} abstraction right now. That's because Pd doesn't provide any
built-in objects for OSC input and output, although a few different solutions
exist and are included in Hans-Christoph Steiner's @uref{http://puredata.info/community/projects/software/pd-extended,Pd-extended} distribution,
such as Martin Peach's @uref{http://puredata.info/Members/martinrp/OSCobjects,OSC externals}. Thus, you'll have to edit the
@code{midiosc} abstraction and add OSC input/output yourself if you need this.

@anchor{f}@anchor{pd-extended}@anchor{10}@anchor{osc-externals}
@node Tweaking the GUI Layout,Remote Control,External MIDI and OSC Controllers,Usage
@anchor{tweaking the gui layout}@anchor{e}@anchor{tweaking-the-gui-layout}
@section Tweaking the GUI Layout
As already mentioned, pd-faust provides the same global GUI layout options as
@code{faust2pd}. Please check the faust2pd documentation for details.
There are a few minor changes in the meaning of some of the options, though,
which we consider notable improvements after some experience working with
faust2pd. Here is a brief rundown of the available options, as they are
implemented in pd-faust:

@itemize *
@item
@code{width=wd}, @code{height=ht}: Specify the maximum horizontal and/or vertical
dimensions of the layout area. If one or both of these values are nonzero,
pd-faust will try to make the GUI fit within this area.
@item
@code{font-size=sz}: Specify the font size (default is 10).
@item
@code{fake-buttons}: Render @code{button} controls as Pd toggles rather than
bangs.
@item
@code{radio-sliders=max}: Render sliders with up to @code{max} different values as
Pd radio controls rather than Pd sliders. Note that in pd-faust this option
not only applies to sliders, but also to numeric entries, i.e., @code{nentry}
in the Faust source. However, as with faust2pd's @code{radio-sliders} option,
the option is only applicable if the control is zero-based and has a
stepsize of 1.
@item
@code{slider-nums}: Add a number box to each slider control. Note that in
pd-faust this is actually the default, which can be disabled with the
@code{no-slider-nums} option.
@item
@code{exclude=pat,...}: Exclude the controls whose labels match the given glob
patterns from the Pd GUI.
@end itemize

In pd-faust there is no way to specify the above options on the command line,
so you'll have to put them as @code{pd} attributes on the @emph{main} group of your
Faust program, as described in the faust2pd documentation. For instance:

@example
process = vgroup("[pd:no-slider-nums][pd:font-size=12]", ...);
@end example

@noindent
In addition, the following options can be used to change the appearance of
individual control items. If present, these options override the corresponding
defaults. Each option can also be prefixed with "@code{no-}" to negate the
option value. (Thus, e.g., @code{no-hidden} makes items visible which would
otherwise, by means of the global @code{exclude} option, be removed from the
GUI.)

@itemize *
@item
@code{hidden}: Hides the corresponding control in the Pd GUI. This is the only
option which can also be used for group controls, in which case @emph{all}
controls in the group will become invisible in the Pd GUI.
@item
@code{fake-button}, @code{radio-slider}, @code{slider-num}: These have the same
meaning as the corresponding global options, but apply to individual control
items.
@end itemize

Again, these options are specified with the @code{pd} attribute in the label of
the corresponding Faust control. For instance, the following Faust code hides
the controls in the @code{aux} group, removes the number entry from the @code{pan}
control, and renders the @code{preset} item as a Pd radio control:

@example
aux = vgroup("aux [pd:hidden]", aux_part);
pan = hslider("pan [pd:no-slider-num]", 0, -1, 1, 0.01);
preset = nentry("preset [pd:radio-slider]", 0, 0, 7, 1);
@end example

@noindent

@node Remote Control,,Tweaking the GUI Layout,Usage
@anchor{remote control}@anchor{11}@anchor{remote-control}
@section Remote Control
Also included in the sources is a helper abstraction faust-remote.pd and an
accompanying elisp program faust-remote.el. These work pretty much like
pure-remote.pd and pure-remote.el in the @code{pd-pure} distribution,
but are tailored for the remote control of Faust dsps in a Pd patch. In
particular, they enable you to quickly reload the Faust dsps in Pd using a
simple keyboard command (@code{C-C C-X} by default) from Emacs. The
faust-remote.el program was designed to be used with Juan Romero's Emacs
@uref{https://github.com/rukano/emacs-faust-mode,Faust mode}; please see etc/pure-remote.el in the pd-faust source for usage
instructions.

@anchor{12}@anchor{faust-mode}
@node Caveats and Bugs,Index,Usage,Top
@anchor{caveats and bugs}@anchor{13}@anchor{caveats-and-bugs}
@chapter Caveats and Bugs
Some parts of this software might still be experimental, under construction
and/or bug-ridden. Bug reports, patches and suggestions are welcome. Please
send these directly to the author, or post them either to the Faust or the
Pure mailing list.

In particular, please note the following known limitations in the current
implementation:

@itemize *
@item
Only stereo dsps are fully supported right now. This will hopefully be fixed
soon.
@item
Passive Faust controls are only supported in @code{fdsp~} objects.
@item
The names of the voice controls in the @code{fsynth~} object (@code{freq},
@code{gain}, @code{gate}) are currently hard-coded.
@item
Polyphonic aftertouch and channel pressure messages are not supported in the
MIDI interface right now, so you'll have to use ordinary MIDI controllers
for these parameters instead. Coarse/fine pairs of MIDI controllers aren't
directly supported either, so you'll have to implement these yourself as two
separate Faust controls.
@item
With the present @code{pure-faust} version, dynamic reloading of
a Faust module only works if there is only a single instance of the module
in the patch. This is actually a limitation of pure-faust, so it doesn't
affect the reloading of Faust bitcode modules which are handled directly by
the Pure interpreter. Our expectation is that pure-faust will eventually be
phased out in favour of Pure's native Faust interface, but Faust bitcode
modules often don't perform quite as well as Faust modules compiled to
native code using gcc yet, so using Pure's native Faust interface isn't the
default right now. This might change in the future.
@end itemize

Also, please check the TODO file included in the distribution for other issues
which we are already aware of and which will hopefully be addressed in future
pd-faust versions.


@node Index,,Caveats and Bugs,Top
@anchor{index}
@unnumbered Index
@printindex ge

@c %**end of body
@bye
